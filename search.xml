<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>PAT刷题记录（下）</title>
      <link href="/2019/02/14/PAT%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2019/02/14/PAT%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>这部分是PAT编号1046—1095的题目。</p><a id="more"></a><h1 id="1046—1055"><a href="#1046—1055" class="headerlink" title="1046—1055"></a>1046—1055</h1><h2 id="1046-划拳"><a href="#1046-划拳" class="headerlink" title="1046 划拳"></a>1046 划拳</h2><p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p><p>下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行先给出一个正整数 N（≤100），随后 N 行，每行给出一轮划拳的记录，格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">甲喊 甲划 乙喊 乙划</span><br></pre></td></tr></table></figure><p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过 100 的正整数（两只手一起划）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">8 10 9 12</span><br><span class="line">5 10 5 10</span><br><span class="line">3 8 5 12</span><br><span class="line">12 18 1 13</span><br><span class="line">4 16 12 15</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><div class="note success">要么甲赢乙输，乙喝酒；要么甲输乙赢，甲喝酒。</div><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b,c,d,p1=<span class="number">0</span>,p2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        <span class="keyword">if</span>(a+c==b &amp;&amp; a+c!=d)    p2++;</span><br><span class="line">        <span class="keyword">if</span>(a+c!=b &amp;&amp; a+c==d)    p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p1&lt;&lt;<span class="string">" "</span>&lt;&lt;p2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1047-编程团体赛"><a href="#1047-编程团体赛" class="headerlink" title="1047 编程团体赛"></a>1047 编程团体赛</h2><p>编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。</p><p>现给定所有队员的比赛成绩，请你编写程序找出冠军队。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（≤104），即所有参赛队员总数。随后 N 行，每行给出一位队员的成绩，格式为：<code>队伍编号-队员编号 成绩</code>，其中<code>队伍编号</code>为 1 到 1000 的正整数，<code>队员编号</code>为 1 到 10 的正整数，<code>成绩</code>为 0 到 100 的整数。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3-10 99</span><br><span class="line">11-5 87</span><br><span class="line">102-1 0</span><br><span class="line">102-3 100</span><br><span class="line">11-9 89</span><br><span class="line">3-2 61</span><br></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 176</span><br></pre></td></tr></table></figure><div class="note success">前面一部分当做字符串读入，后面一部分当做数组读入，读一个累加一次比较一次。</div><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n,score,max_s=<span class="number">0</span>,<span class="keyword">max_t</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;score;</span><br><span class="line">        <span class="keyword">int</span> t=s.find(<span class="string">'-'</span>);</span><br><span class="line">        <span class="keyword">int</span> team=stoi(s.substr(<span class="number">0</span>,t));</span><br><span class="line">        a[team]+=score;</span><br><span class="line">        <span class="keyword">if</span>(a[team]&gt;=max_s)</span><br><span class="line">        &#123;</span><br><span class="line">            max_s=a[team];</span><br><span class="line">            <span class="keyword">max_t</span>=team;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">max_t</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;max_s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1048-数字加密"><a href="#1048-数字加密" class="headerlink" title="1048 数字加密"></a>1048 数字加密</h2><p>本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出加密后的结果。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567 368782971</span><br></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3695Q8118</span><br></pre></td></tr></table></figure><div class="note success">a和b的长度可能不一样长，如果不一样长，短的那个前面需要补零，补齐之后再进行运算。</div><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    reverse(a.begin(),a.end());</span><br><span class="line">    reverse(b.begin(),b.end());</span><br><span class="line">    <span class="keyword">if</span>(a.size()&gt;b.size())   b.append(a.size()-b.size(),<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">if</span>(a.size()&lt;b.size())   a.append(b.size()-a.size(),<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=((a[i]-<span class="string">'0'</span>)+(b[i]-<span class="string">'0'</span>))%<span class="number">13</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp==<span class="number">10</span>)    c+=<span class="string">'J'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">11</span>)   c+=<span class="string">'Q'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp==<span class="number">12</span>)   c+=<span class="string">'K'</span>;</span><br><span class="line">            <span class="keyword">else</span>    c+=to_string(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=(b[i]-<span class="string">'0'</span>)-(a[i]-<span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;<span class="number">0</span>)  temp+=<span class="number">10</span>;</span><br><span class="line">            c+=to_string(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=c.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;c[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1049-数列的片段和"><a href="#1049-数列的片段和" class="headerlink" title="1049 数列的片段和"></a>1049 数列的片段和</h2><p>给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。</p><p>给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0。</p><h3 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个不超过 105 的正整数 N，表示数列中数的个数，第二行给出 N 个不超过 1.0 的正数，是数列中的数，其间以空格分隔。</p><h3 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出该序列所有片段包含的数之和，精确到小数点后 2 位。</p><h3 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0.1 0.2 0.3 0.4</span><br></pre></td></tr></table></figure><h3 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.00</span><br></pre></td></tr></table></figure><div class="note success">这题用float有两组样例竟然过不了，用double就可以通过。</div><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">double</span> x,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        sum+=x*i*(n-i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1050-螺旋矩阵"><a href="#1050-螺旋矩阵" class="headerlink" title="1050 螺旋矩阵"></a>1050 螺旋矩阵</h2><p>本题要求将给定的 N 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。要求矩阵的规模为 m 行 n列，满足条件：m×n 等于 N；m≥n；且 m−n 取所有可能值中的最小值。</p><h3 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行中给出一个正整数 N，第 2 行给出 N 个待填充的正整数。所有数字不超过 104，相邻数字以空格分隔。</p><h3 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出螺旋矩阵。每行 n 个数字，共 m 行。相邻数字以 1 个空格分隔，行末不得有多余空格。</p><h3 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">37 76 20 98 76 42 53 95 60 81 58 93</span><br></pre></td></tr></table></figure><h3 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">98 95 93</span><br><span class="line">42 37 81</span><br><span class="line">53 20 76</span><br><span class="line">58 60 76</span><br></pre></td></tr></table></figure><div class="note success">这一题好麻烦，螺旋输出需要两个循环，外层循环是有多少轮，内层循环是每次横竖横竖的顺序。<br><br>最后一组样例很容易超时，找m和n的取值时，只用一层循环就够了；不能开数组，换成vector。</div><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a &gt; b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,n,m,t=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="built_in">sqrt</span>(<span class="keyword">double</span>(x));n&gt;=<span class="number">1</span>;n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%n==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m=x/n;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++)    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a.begin(),a.end(),cmp);</span><br><span class="line">    <span class="keyword">int</span> level=m/<span class="number">2</span>+m%<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; b(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;level;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n<span class="number">-1</span>-i &amp;&amp; t&lt;=x<span class="number">-1</span>;j++)</span><br><span class="line">            b[i][j] = a[t++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=m<span class="number">-2</span>-i &amp;&amp; t&lt;=x<span class="number">-1</span>;j++)</span><br><span class="line">            b[j][n<span class="number">-1</span>-i] = a[t++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=n-i<span class="number">-1</span>;j&gt;=i&amp;&amp;t&lt;=x<span class="number">-1</span>;j--)</span><br><span class="line">            b[m<span class="number">-1</span>-i][j]=a[t++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-2</span>-i;j&gt;=i+<span class="number">1</span> &amp;&amp; t&lt;=x<span class="number">-1</span>;j--)</span><br><span class="line">            b[j][i]=a[t++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,b[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (j!=n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1051-复数乘法-（15-分）"><a href="#1051-复数乘法-（15-分）" class="headerlink" title="1051 复数乘法 （15 分）"></a>1051 复数乘法 （15 分）</h2><p>复数可以写成 (A+Bi) 的常规形式，其中 A 是实部，B 是虚部，i 是虚数单位，满足 i2=−1；也可以写成极坐标下的指数形式 (R×e(Pi))，其中 R 是复数模，P 是辐角，i 是虚数单位，其等价于三角形式 (R(cos(P)+isin(P))。</p><p>现给定两个复数的 R 和 P，要求输出两数乘积的常规形式。</p><h3 id="输入格式：-5"><a href="#输入格式：-5" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出两个复数的 R1, P1, R2, P2，数字间以空格分隔。</p><h3 id="输出格式：-5"><a href="#输出格式：-5" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按照 <code>A+Bi</code> 的格式输出两数乘积的常规形式，实部和虚部均保留 2 位小数。注意：如果 <code>B</code> 是负数，则应该写成 <code>A-|B|i</code> 的形式。</p><h3 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.3 3.5 5.2 0.4</span><br></pre></td></tr></table></figure><h3 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-8.68-8.23i</span><br></pre></td></tr></table></figure><div class="note success">这一题有一个坑，就是当A或者B大于等于-0.005，小于0的时候，会四舍五入成-0.00，而正确答案应该是0.00，所以这个区间的取值需要单独输出。</div><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> r1,p1,r2,p2,a1,a2,b1,b2,A,B;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;r1&gt;&gt;p1&gt;&gt;r2&gt;&gt;p2;</span><br><span class="line">    a1=r1*<span class="built_in">cos</span>(p1);</span><br><span class="line">    a2=r2*<span class="built_in">cos</span>(p2);</span><br><span class="line">    b1=r1*<span class="built_in">sin</span>(p1);</span><br><span class="line">    b2=r2*<span class="built_in">sin</span>(p2);</span><br><span class="line">    A=a1*a2-b1*b2;</span><br><span class="line">    B=a1*b2+a2*b1;</span><br><span class="line">    <span class="keyword">if</span>(A+<span class="number">0.005</span>&gt;=<span class="number">0</span> &amp;&amp; A&lt;<span class="number">0</span>)   <span class="built_in">printf</span>(<span class="string">"0.00"</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,A);</span><br><span class="line">    <span class="keyword">if</span>(B&gt;=<span class="number">0</span>)    <span class="built_in">printf</span>(<span class="string">"+%.2fi"</span>,B);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(B+<span class="number">0.005</span>&gt;=<span class="number">0</span> &amp;&amp; B&lt;<span class="number">0</span>)   <span class="built_in">printf</span>(<span class="string">"+0.00i"</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"%.2fi"</span>,B);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1052-卖个萌-（20-分）"><a href="#1052-卖个萌-（20-分）" class="headerlink" title="1052 卖个萌 （20 分）"></a>1052 卖个萌 （20 分）</h2><p>萌萌哒表情符号通常由“手”、“眼”、“口”三个主要部分组成。简单起见，我们假设一个表情符号是按下列格式输出的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[左手]([左眼][口][右眼])[右手]</span><br></pre></td></tr></table></figure><p>现给出可选用的符号集合，请你按用户的要求输出表情。</p><h3 id="输入格式：-6"><a href="#输入格式：-6" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入首先在前三行顺序对应给出手、眼、口的可选符号集。每个符号括在一对方括号 <code>[]</code>内。题目保证每个集合都至少有一个符号，并不超过 10 个符号；每个符号包含 1 到 4 个非空字符。</p><p>之后一行给出一个正整数 K，为用户请求的个数。随后 K 行，每行给出一个用户的符号选择，顺序为左手、左眼、口、右眼、右手——这里只给出符号在相应集合中的序号（从 1 开始），数字间以空格分隔。</p><h3 id="输出格式：-6"><a href="#输出格式：-6" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个用户请求，在一行中输出生成的表情。若用户选择的序号不存在，则输出 <code>Are you kidding me? @\/@</code>。</p><h3 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[╮][╭][o][~\][/~]  [&lt;][&gt;]</span><br><span class="line"> [╯][╰][^][-][=][&gt;][&lt;][@][⊙]</span><br><span class="line">[Д][▽][_][ε][^]  ...</span><br><span class="line">4</span><br><span class="line">1 1 2 2 2</span><br><span class="line">6 8 1 5 5</span><br><span class="line">3 3 4 3 3</span><br><span class="line">2 10 3 9 3</span><br></pre></td></tr></table></figure><h3 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">╮(╯▽╰)╭</span><br><span class="line">&lt;(@Д=)/~</span><br><span class="line">o(^ε^)o</span><br><span class="line">Are you kidding me? @\/@</span><br></pre></td></tr></table></figure><div class="note success">这题太骚了！首先不知道每一种表情各有多少个，每个表情符号的位数也不确定，所以用2维vector存储。然后入读的过程也很麻烦，需要找到“[”和”]”然后把这中间的子字符存入vector中。<br><br>输出的时候，要判断每个数字是否大于0而且小于对应vector的长度，如果有一个不满足就要输出那句话，那句话里面还有一个斜杠是转义字符，需要输2次才可以避免转义。</div><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        getline(<span class="built_in">cin</span>,s);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; row;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;s.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]==<span class="string">'['</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(k++&lt;s.size())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s[k]==<span class="string">']'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        row.push_back(s.substr(j+<span class="number">1</span>,k-j<span class="number">-1</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        v.push_back(row);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c,d,e;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;v[<span class="number">0</span>].size() || b&gt;v[<span class="number">1</span>].size() || c&gt;v[<span class="number">2</span>].size() || d&gt;v[<span class="number">1</span>].size() || e&gt;v[<span class="number">0</span>].size()</span><br><span class="line">           || a&lt;<span class="number">1</span> || b&lt;<span class="number">1</span> ||c&lt;<span class="number">1</span> || d&lt;<span class="number">1</span> || e&lt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Are you kidding me? @\\/@"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;v[<span class="number">0</span>][a<span class="number">-1</span>]&lt;&lt;<span class="string">"("</span>&lt;&lt;v[<span class="number">1</span>][b<span class="number">-1</span>]&lt;&lt;v[<span class="number">2</span>][c<span class="number">-1</span>]&lt;&lt;v[<span class="number">1</span>][d<span class="number">-1</span>]&lt;&lt;<span class="string">")"</span>&lt;&lt;v[<span class="number">0</span>][e<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1053-住房空置率-（20-分）"><a href="#1053-住房空置率-（20-分）" class="headerlink" title="1053 住房空置率 （20 分）"></a>1053 住房空置率 （20 分）</h2><p>在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下：</p><ul><li>在观察期内，若存在超过一半的日子用电量低于某给定的阈值 e，则该住房为“可能空置”；</li><li>若观察期超过某给定阈值 D 天，且满足上一个条件，则该住房为“空置”。</li></ul><p>现给定某居民区的住户用电量数据，请你统计“可能空置”的比率和“空置”比率，即以上两种状态的住房占居民区住房总套数的百分比。</p><h3 id="输入格式：-7"><a href="#输入格式：-7" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数 N（≤1000），为居民区住房总套数；正实数 e，即低电量阈值；正整数 D，即观察期阈值。随后 N 行，每行按以下格式给出一套住房的用电量数据：</p><p>K E1 E2 … EK</p><p>其中 K 为观察的天数，Ei 为第 i 天的用电量。</p><h3 id="输出格式：-7"><a href="#输出格式：-7" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。</p><h3 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 0.5 10</span><br><span class="line">6 0.3 0.4 0.5 0.2 0.8 0.6</span><br><span class="line">10 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5</span><br><span class="line">5 0.4 0.3 0.5 0.1 0.7</span><br><span class="line">11 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1</span><br><span class="line">11 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1</span><br></pre></td></tr></table></figure><h3 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">40.0% 20.0%</span><br></pre></td></tr></table></figure><p>（样例解释：第2、3户为“可能空置”，第4户为“空置”，其他户不是空置。）</p><div class="note success">总算遇到一个简单的题目，和上一题一样都是20分，难度完全不一样好吗！</div><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,D,cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> e;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;e&gt;&gt;D;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> t;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">            <span class="keyword">if</span>(t&lt;e) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;n/<span class="number">2</span> &amp;&amp; n&gt;D)  cnt2++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt&gt;n/<span class="number">2</span>) cnt1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> rate1=cnt1/(N*<span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">double</span> rate2=cnt2/(N*<span class="number">1.0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.1f"</span>,rate1*<span class="number">100</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">"%"</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.1f"</span>,rate2*<span class="number">100</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">"%"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1054-求平均值-（20-分）"><a href="#1054-求平均值-（20-分）" class="headerlink" title="1054 求平均值 （20 分）"></a>1054 求平均值 （20 分）</h2><p>本题的基本要求非常简单：给定 N 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [−1000,1000] 区间内的实数，并且最多精确到小数点后 2 位。当你计算平均值的时候，不能把那些非法的数据算在内。</p><h3 id="输入格式：-8"><a href="#输入格式：-8" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数 N（≤100）。随后一行给出 N 个实数，数字间以一个空格分隔。</p><h3 id="输出格式：-8"><a href="#输出格式：-8" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个非法输入，在一行中输出 <code>ERROR: X is not a legal number</code>，其中 <code>X</code> 是输入。最后在一行中输出结果：<code>The average of K numbers is Y</code>，其中 <code>K</code> 是合法输入的个数，<code>Y</code> 是它们的平均值，精确到小数点后 2 位。如果平均值无法计算，则用 <code>Undefined</code> 替换 <code>Y</code>。如果 <code>K</code> 为 1，则输出 <code>The average of 1 number is Y</code>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">5 -3.2 aaa 9999 2.3.4 7.123 2.35</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR: aaa is not a legal number</span><br><span class="line">ERROR: 9999 is not a legal number</span><br><span class="line">ERROR: 2.3.4 is not a legal number</span><br><span class="line">ERROR: 7.123 is not a legal number</span><br><span class="line">The average of 3 numbers is 1.38</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">aaa -9999</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: aaa is not a legal number</span><br><span class="line">ERROR: -9999 is not a legal number</span><br><span class="line">The average of 0 numbers is Undefined</span><br></pre></td></tr></table></figure><div class="note success">先开始想的是每一个都读成string类型，然后分别写两个函数，判断输入进来的string类型数据是否是整数或者是2位小数的浮点数，发现太麻烦，做不下去了。网上查的sscanf和sprintf，指定格式的输入输出，现在还没有太懂。</div><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">105</span>],b[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">double</span> temp,sum=<span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">        <span class="built_in">sscanf</span>(a,<span class="string">"%lf"</span>,&amp;temp);</span><br><span class="line">        <span class="built_in">sprintf</span>(b,<span class="string">"%.2f"</span>,temp);</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(a);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]!=b[j])  flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span> || temp&gt;<span class="number">1000</span> || temp&lt;<span class="number">-1000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"ERROR: %s is not a legal number\n"</span>, a);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    &#123;sum+=temp;cnt++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">1</span>)  <span class="built_in">printf</span>(<span class="string">"The average of 1 number is %.2f"</span>, sum);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt&gt;<span class="number">0</span>)  <span class="built_in">printf</span>(<span class="string">"The average of %d numbers is %.2f"</span>,cnt,sum/cnt);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">"The average of 0 numbers is Undefined"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1056—1065"><a href="#1056—1065" class="headerlink" title="1056—1065"></a>1056—1065</h1><h2 id="1056-组合数的和-（15-分）"><a href="#1056-组合数的和-（15-分）" class="headerlink" title="1056 组合数的和 （15 分）"></a>1056 组合数的和 （15 分）</h2><p>给定 N 个非 0 的个位数字，用其中任意 2 个数字都可以组合成 1 个 2 位的数字。要求所有可能组合出来的 2 位数字的和。例如给定 2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为330。</p><h3 id="输入格式：-9"><a href="#输入格式：-9" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行中给出 N（1 &lt; N &lt; 10），随后一行给出 N 个不同的非 0 个位数字。数字间以空格分隔。</p><h3 id="输出格式：-9"><a href="#输出格式：-9" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出所有可能组合出来的2位数字的和。</p><h3 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2 8 5</span><br></pre></td></tr></table></figure><h3 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">330</span><br></pre></td></tr></table></figure><div class="note success">每个数做为十位数会出现n-1次，做为个位数也会出现n-1次。</div><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,num,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        sum+=num*<span class="number">11</span>*(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1057-数零壹-（20-分）"><a href="#1057-数零壹-（20-分）" class="headerlink" title="1057 数零壹 （20 分）"></a>1057 数零壹 （20 分）</h2><p>给定一串长度不超过 105 的字符串，本题要求你将其中所有英文字母的序号（字母 a-z 对应序号 1-26，不分大小写）相加，得到整数 N，然后再分析一下 N 的二进制表示中有多少 0、多少 1。例如给定字符串 <code>PAT (Basic)</code>，其字母序号之和为：16+1+20+2+1+19+9+3=71，而 71 的二进制是 1000111，即有 3 个 0、4 个 1。</p><h3 id="输入格式：-10"><a href="#输入格式：-10" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出长度不超过 105、以回车结束的字符串。</p><h3 id="输出格式：-10"><a href="#输出格式：-10" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中先后输出 0 的个数和 1 的个数，其间以空格分隔。</p><h3 id="输入样例：-9"><a href="#输入样例：-9" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PAT (Basic)</span><br></pre></td></tr></table></figure><h3 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br></pre></td></tr></table></figure><div class="note success">一个一个检查并翘课。</div><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>,num=<span class="number">0</span>,cnt0=<span class="number">0</span>,cnt1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans[<span class="number">10005</span>];</span><br><span class="line">    getline(<span class="built_in">cin</span>,s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">'a'</span> &amp;&amp; s[i]&lt;=<span class="string">'z'</span>)</span><br><span class="line">            sum+=(s[i]-<span class="string">'a'</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">'A'</span> &amp;&amp; s[i]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">            sum+=(s[i]-<span class="string">'A'</span>)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(sum!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            cnt0++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cnt1++;</span><br><span class="line">        sum=sum/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cnt0&lt;&lt;<span class="string">" "</span>&lt;&lt;cnt1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1059-C语言竞赛-（20-分）"><a href="#1059-C语言竞赛-（20-分）" class="headerlink" title="1059 C语言竞赛 （20 分）"></a>1059 C语言竞赛 （20 分）</h2><p>C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：</p><ul><li>0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。</li><li>1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！</li><li>2、其他人将得到巧克力。</li></ul><p>给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。</p><h3 id="输入格式：-11"><a href="#输入格式：-11" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（≤104），是参赛者人数。随后 N 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 K 以及 K 个需要查询的 ID。</p><h3 id="输出格式：-11"><a href="#输出格式：-11" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个要查询的 ID，在一行中输出 <code>ID: 奖品</code>，其中奖品或者是 <code>Mystery Award</code>（神秘大奖）、或者是 <code>Minion</code>（小黄人）、或者是 <code>Chocolate</code>（巧克力）。如果所查 ID 根本不在排名里，打印 <code>Are you kidding?</code>（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 <code>ID: Checked</code>（不能多吃多占）。</p><h3 id="输入样例：-10"><a href="#输入样例：-10" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1111</span><br><span class="line">6666</span><br><span class="line">8888</span><br><span class="line">1234</span><br><span class="line">5555</span><br><span class="line">0001</span><br><span class="line">6</span><br><span class="line">8888</span><br><span class="line">0001</span><br><span class="line">1111</span><br><span class="line">2222</span><br><span class="line">8888</span><br><span class="line">2222</span><br></pre></td></tr></table></figure><h3 id="输出样例：-10"><a href="#输出样例：-10" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">8888: Minion</span><br><span class="line">0001: Chocolate</span><br><span class="line">1111: Mystery Award</span><br><span class="line">2222: Are you kidding?</span><br><span class="line">8888: Checked</span><br><span class="line">2222: Are you kidding?</span><br></pre></td></tr></table></figure><div class="note success">这题我一开始是用数组a[i]=j，没读入一个 i 递增一个代表排序，j 代表 i 序号对应的选手，但是查找的时候就需要循环，然后最后两组用例就超时过不了。<br><br>后来换成把数组下标（a[i]中的 i 作为选手id），对应的值为1,2,3,4就对应四种情况的输出。</div><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> rankk[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)  &#123;<span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,id;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)    rankk[id]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(prim(i))    rankk[id]=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span>    rankk[id]=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id;</span><br><span class="line">        <span class="keyword">if</span>(rankk[id]==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%04d: Are you kidding?\n"</span>,id);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rankk[id]==<span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%04d: Mystery Award\n"</span>,id);rankk[id]=<span class="number">4</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rankk[id]==<span class="number">2</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%04d: Minion\n"</span>,id);rankk[id]=<span class="number">4</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rankk[id]==<span class="number">3</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%04d: Chocolate\n"</span>,id);rankk[id]=<span class="number">4</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rankk[id]==<span class="number">4</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%04d: Checked\n"</span>,id);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1060-爱丁顿数-（25-分）"><a href="#1060-爱丁顿数-（25-分）" class="headerlink" title="1060 爱丁顿数 （25 分）"></a>1060 爱丁顿数 （25 分）</h2><p>英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” E ，即满足有 E 天骑车超过 E 英里的最大整数 E。据说爱丁顿自己的 E 等于87。</p><p>现给定某人 N 天的骑车距离，请你算出对应的爱丁顿数 E（≤N）。</p><h3 id="输入格式：-12"><a href="#输入格式：-12" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N (≤105)，即连续骑车的天数；第二行给出 N 个非负整数，代表每天的骑车距离。</p><h3 id="输出格式：-12"><a href="#输出格式：-12" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中给出 N 天的爱丁顿数。</p><h3 id="输入样例：-11"><a href="#输入样例：-11" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">6 7 6 9 3 10 8 2 7 8</span><br></pre></td></tr></table></figure><h3 id="输出样例：-11"><a href="#输出样例：-11" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><div class="note success">这题相比于前面几个20分的题目甚至还简单一些……只要题目读懂了，暴力就可以过（我一开始就对题目有些误解，误解在于这个“有”字，也就是说天数可以大于e，我以为只能等于e，如果是等于e的话，只能得18分，改成大于等于e就可以满分了。）<br><br>后来看网上别人的代码，都是先排序，我真的是纯粹的暴力模拟……</div><h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,e,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=n;k&gt;=<span class="number">0</span>;k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        e=k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;e) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;=e)  &#123;flag=<span class="number">1</span>;<span class="built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>) &lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1061-判断题-（15-分）"><a href="#1061-判断题-（15-分）" class="headerlink" title="1061 判断题 （15 分）"></a>1061 判断题 （15 分）</h2><p>判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。</p><h3 id="输入格式：-13"><a href="#输入格式：-13" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。</p><h3 id="输出格式：-13"><a href="#输出格式：-13" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照输入的顺序输出每个学生的得分，每个分数占一行。</p><h3 id="输入样例：-12"><a href="#输入样例：-12" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3 6</span><br><span class="line">2 1 3 3 4 5</span><br><span class="line">0 0 1 0 1 1</span><br><span class="line">0 1 1 0 0 1</span><br><span class="line">1 0 1 0 1 0</span><br><span class="line">1 1 0 0 1 1</span><br></pre></td></tr></table></figure><h3 id="输出样例：-12"><a href="#输出样例：-12" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td></tr></table></figure><div class="note success">循环入读到数组，再循环判断累加。<div><br><br>### 代码<br><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score[<span class="number">105</span>],right[<span class="number">105</span>],stu[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">int</span> N,M,ans;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;score[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;right[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;ans;</span><br><span class="line">            <span class="keyword">if</span>(ans==right[j])   sum+=score[j];</span><br><span class="line">        &#125;</span><br><span class="line">        stu[i]=sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)    <span class="built_in">cout</span>&lt;&lt;stu[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>## 1062 最简分数 （20 分）<br><br>一个分数一般写成两个整数相除的形式：N/M，其中 M 不为0。最简分数是指分子和分母没有公约数的分数表示形式。<br><br>现给定两个不相等的正分数 N1/M1 和 N2/M2，要求你按从小到大的顺序列出它们之间分母为 K 的最简分数。<br><br>### 输入格式：<br><br>输入在一行中按 N/M 的格式给出两个正分数，随后是一个正整数分母 K，其间以空格分隔。题目保证给出的所有整数都不超过 1000。<br><br>### 输出格式：<br><br>在一行中按 N/M 的格式列出两个给定分数之间分母为 K 的所有最简分数，按从小到大的顺序，其间以 1 个空格分隔。行首尾不得有多余空格。题目保证至少有 1 个输出。<br><br>### 输入样例：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7/18 13/20 12</span><br></pre></td></tr></table></figure><br><br>### 输出样例：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5/12 7/12</span><br></pre></td></tr></table></figure><br><br><div class="note success">又被那个double精度的问题坑到了。左边界的范围是强转int后+1的值，右边界是强转int后-0.001的值，我又没有-0.001，哭了。</div><h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(a!=b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) a=a-b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b)    b=b-a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a==b &amp;&amp; a!=<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10005</span>];</span><br><span class="line">    <span class="keyword">int</span> n1,n2,m1,m2,k,p=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d/%d %d/%d %d"</span>,&amp;n1,&amp;m1,&amp;n2,&amp;m2,&amp;k);</span><br><span class="line">    <span class="keyword">float</span> x1=(n1/(m1*<span class="number">1.0</span>))*k;</span><br><span class="line">    <span class="keyword">float</span> x2=(n2/(m2*<span class="number">1.0</span>))*k;</span><br><span class="line">    <span class="keyword">if</span>(x1&gt;x2)   &#123;<span class="keyword">double</span> t=x1;x1=x2;x2=t;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x1+<span class="number">1</span>;i&lt;x2<span class="number">-0.001</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(fun(i,k)==<span class="number">0</span>) num[p++]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num[<span class="number">0</span>]&lt;&lt;<span class="string">"/"</span>&lt;&lt;k;</span><br><span class="line">    <span class="keyword">if</span>(p&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p;i++)    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;num[i]&lt;&lt;<span class="string">"/"</span>&lt;&lt;k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1063-计算谱半径-（20-分）"><a href="#1063-计算谱半径-（20-分）" class="headerlink" title="1063 计算谱半径 （20 分）"></a>1063 计算谱半径 （20 分）</h2><p>在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 n 个复数空间的特征值 { a1+b1i,⋯,an+bni }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。</p><p>现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。</p><h3 id="输入格式：-14"><a href="#输入格式：-14" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数 N（≤ 10 000）是输入的特征值的个数。随后 N 行，每行给出 1 个特征值的实部和虚部，其间以空格分隔。注意：题目保证实部和虚部均为绝对值不超过 1000 的整数。</p><h3 id="输出格式：-14"><a href="#输出格式：-14" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出谱半径，四舍五入保留小数点后 2 位。</p><h3 id="输入样例：-13"><a href="#输入样例：-13" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">0 1</span><br><span class="line">2 0</span><br><span class="line">-1 0</span><br><span class="line">3 3</span><br><span class="line">0 -3</span><br></pre></td></tr></table></figure><h3 id="输出样例：-13"><a href="#输出样例：-13" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.24</span><br></pre></td></tr></table></figure><div class="note success">没话说，送分题。</div><h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line">    <span class="keyword">double</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">double</span> res=<span class="built_in">sqrt</span>(a*a+b*b);</span><br><span class="line">        <span class="keyword">if</span>(res&gt;max) max=res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1064-朋友数-（20-分）"><a href="#1064-朋友数-（20-分）" class="headerlink" title="1064 朋友数 （20 分）"></a>1064 朋友数 （20 分）</h2><p>如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 = 6，而 6 就是它们的朋友证号。给定一些整数，要求你统计一下它们中有多少个不同的朋友证号。</p><h3 id="输入格式：-15"><a href="#输入格式：-15" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数 N。随后一行给出 N 个正整数，数字间以空格分隔。题目保证所有数字小于 104。</p><h3 id="输出格式：-15"><a href="#输出格式：-15" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先第一行输出给定数字中不同的朋友证号的个数；随后一行按递增顺序输出这些朋友证号，数字间隔一个空格，且行末不得有多余空格。</p><h3 id="输入样例：-14"><a href="#输入样例：-14" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">123 899 51 998 27 33 36 12</span><br></pre></td></tr></table></figure><h3 id="输出样例：-14"><a href="#输出样例：-14" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3 6 9 26</span><br></pre></td></tr></table></figure><div class="note success">简单题，没有什么坑。<div><br><br>### 代码<br><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">100005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp+=(a[j]-<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        b[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(b,b+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]!=b[i<span class="number">-1</span>])    cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cnt+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]!=b[i<span class="number">-1</span>])    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>## 1065 单身狗 （25 分）<br><br>“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。<br><br>### 输入格式：<br><br>输入第一行给出一个正整数 N（≤ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（≤ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。<br><br>### 输出格式：<br><br>首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。<br><br>### 输入样例：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">11111 22222</span><br><span class="line">33333 44444</span><br><span class="line">55555 66666</span><br><span class="line">7</span><br><span class="line">55555 44444 10000 88888 22222 11111 23333</span><br></pre></td></tr></table></figure><br><br>### 输出样例：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">10000 23333 44444 55555 88888</span><br></pre></td></tr></table></figure><br><br><div class="note success">这一次做为25分的题目其实没有很难，有个点一开始没注意到就是如果输入的是int，然后是0开头，输出的时候就会把0省略掉，所以应该用“05d”输出，这个0也不能少，否则就会变成空格。</div><h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,id,id1,id2,cnt=<span class="number">0</span>,cntt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id1&gt;&gt;id2;</span><br><span class="line">        a[id1]=<span class="number">1</span>;a[id2]=<span class="number">1</span>;</span><br><span class="line">        b[id1]=id2;b[id2]=id1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id;</span><br><span class="line">        <span class="keyword">if</span>(a[id]==<span class="number">0</span>)    &#123;cnt++;c.push_back(id);&#125;</span><br><span class="line">        <span class="keyword">else</span> d.push_back(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp=b[d[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;d.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp==d[j])    flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>) &#123;cntt++;c.push_back(d[i]);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cnt+cntt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sort(c.begin(),c.end());</span><br><span class="line">    <span class="keyword">if</span>(cnt+cntt==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cnt+cntt==<span class="number">1</span>)    <span class="built_in">printf</span>(<span class="string">"%05d"</span>,c[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d"</span>,c[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %05d"</span>,c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1066—1075"><a href="#1066—1075" class="headerlink" title="1066—1075"></a>1066—1075</h1><h2 id="1066-图像过滤-（15-分）"><a href="#1066-图像过滤-（15-分）" class="headerlink" title="1066 图像过滤 （15 分）"></a>1066 图像过滤 （15 分）</h2><p>图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。</p><h3 id="输入格式：-16"><a href="#输入格式：-16" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出一幅图像的分辨率，即两个正整数 M 和 N（0&lt;M,N≤500），另外是待过滤的灰度值区间端点 A 和 B（0≤A&lt;B≤255）、以及指定的替换灰度值。随后 M 行，每行给出 N 个像素点的灰度值，其间以空格分隔。所有灰度值都在 [0, 255] 区间内。</p><h3 id="输出格式：-16"><a href="#输出格式：-16" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出按要求过滤后的图像。即输出 M 行，每行 N 个像素灰度值，每个灰度值占 3 位（例如黑色要显示为 <code>000</code>），其间以一个空格分隔。行首尾不得有多余空格。</p><h3 id="输入样例：-15"><a href="#输入样例：-15" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 5 100 150 0</span><br><span class="line">3 189 254 101 119</span><br><span class="line">150 233 151 99 100</span><br><span class="line">88 123 149 0 255</span><br></pre></td></tr></table></figure><h3 id="输出样例：-15"><a href="#输出样例：-15" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">003 189 254 000 000</span><br><span class="line">000 233 151 099 000</span><br><span class="line">088 000 000 000 255</span><br></pre></td></tr></table></figure><div class="note success">二维数组。</div><h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pic[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,a,b,k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;pic[i][j];</span><br><span class="line">            <span class="keyword">if</span>(pic[i][j]&gt;=a &amp;&amp; pic[i][j]&lt;=b)</span><br><span class="line">                pic[i][j]=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)    <span class="built_in">printf</span>(<span class="string">"%03d"</span>,pic[i][j]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %03d"</span>,pic[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1067-试密码-（20-分）"><a href="#1067-试密码-（20-分）" class="headerlink" title="1067 试密码 （20 分）"></a>1067 试密码 （20 分）</h2><p>当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。</p><h3 id="输入格式：-17"><a href="#输入格式：-17" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（≤ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。</p><h3 id="输出格式：-17"><a href="#输出格式：-17" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 <code>Welcome in</code>，并结束程序；如果是错误的，则在一行中按格式输出 <code>Wrong password: 用户输入的错误密码</code>；当错误尝试达到 N 次时，再输出一行 <code>Account locked</code>，并结束程序。</p><h3 id="输入样例-1：-1"><a href="#输入样例-1：-1" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Correct%pw 3</span><br><span class="line">correct%pw</span><br><span class="line">Correct@PW</span><br><span class="line">whatisthepassword!</span><br><span class="line">Correct%pw</span><br><span class="line">#</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-1"><a href="#输出样例-1：-1" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Wrong password: correct%pw</span><br><span class="line">Wrong password: Correct@PW</span><br><span class="line">Wrong password: whatisthepassword!</span><br><span class="line">Account locked</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-1"><a href="#输入样例-2：-1" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cool@gplt 3</span><br><span class="line">coolman@gplt</span><br><span class="line">coollady@gplt</span><br><span class="line">cool@gplt</span><br><span class="line">try again</span><br><span class="line">#</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-1"><a href="#输出样例-2：-1" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Wrong password: coolman@gplt</span><br><span class="line">Wrong password: coollady@gplt</span><br><span class="line">Welcome in</span><br></pre></td></tr></table></figure><div class="note success">循环用getline读入字符串的时候，如果前面还有读入的其他东西，需要加上一个getchar()函数吸收回车。<br><br>这道题在while循环里面满足条件了就会break，所以在编译器里测试的时候看到输出后立马就终止了，但是提交上去没有影响。</div><h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> right,password;</span><br><span class="line">    <span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;right&gt;&gt;n;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>,password);</span><br><span class="line">        <span class="keyword">if</span>(password==<span class="string">"#"</span>)    <span class="keyword">break</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(password==right &amp;&amp; cnt&lt;=n) &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Welcome in"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(password!=right &amp;&amp; cnt&lt;=n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Wrong password: "</span>&lt;&lt;password&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(cnt==n)  &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Account locked"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1069-微博转发抽奖-（20-分）"><a href="#1069-微博转发抽奖-（20-分）" class="headerlink" title="1069 微博转发抽奖 （20 分）"></a>1069 微博转发抽奖 （20 分）</h2><p>小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖名单。</p><h3 id="输入格式：-18"><a href="#输入格式：-18" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出三个正整数 M（≤ 1000）、N 和 S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从 1 开始）。随后 M 行，顺序给出转发微博的网友的昵称（不超过 20 个字符、不包含空格回车的非空字符串）。</p><p>注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。</p><h3 id="输出格式：-18"><a href="#输出格式：-18" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出 <code>Keep going...</code>。</p><h3 id="输入样例-1：-2"><a href="#输入样例-1：-2" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9 3 2</span><br><span class="line">Imgonnawin!</span><br><span class="line">PickMe</span><br><span class="line">PickMeMeMeee</span><br><span class="line">LookHere</span><br><span class="line">Imgonnawin!</span><br><span class="line">TryAgainAgain</span><br><span class="line">TryAgainAgain</span><br><span class="line">Imgonnawin!</span><br><span class="line">TryAgainAgain</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-2"><a href="#输出样例-1：-2" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PickMe</span><br><span class="line">Imgonnawin!</span><br><span class="line">TryAgainAgain</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-2"><a href="#输入样例-2：-2" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 3 5</span><br><span class="line">Imgonnawin!</span><br><span class="line">PickMe</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-2"><a href="#输出样例-2：-2" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Keep going...</span><br></pre></td></tr></table></figure><div class="note success">用vector存储所有人的名字和抽中的人，然后遇到抽中的位置就检查抽中的人中是否存在，不存在就push进去，存在的话，i的值就变成 i-(n-1)，相当于就是下一次循环的时候增加了一个。<br><br>如果中奖名单的size为0，就表示没有人抽中，输出指定内容。</div><h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,s;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; all_name;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="built_in">string</span>&gt; lucky;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;name;</span><br><span class="line">        all_name.push_back(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s<span class="number">-1</span>;i&lt;m;i=i+n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> temp=all_name[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lucky.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(lucky[j]==temp)   &#123;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>) lucky.push_back(temp);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)    i=i-(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lucky.size();i++) <span class="built_in">cout</span>&lt;&lt;lucky[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(lucky.size()==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Keep going..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1070-结绳-（25-分）"><a href="#1070-结绳-（25-分）" class="headerlink" title="1070 结绳 （25 分）"></a>1070 结绳 （25 分）</h2><p>给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。</p><p><img src="https://images.ptausercontent.com/46293e57-aa0e-414b-b5c3-7c4b2d5201e2.jpg" alt="rope.jpg"></p><p>给定 N 段绳子的长度，你需要找出它们能串成的绳子的最大长度。</p><h3 id="输入格式：-19"><a href="#输入格式：-19" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 N (2≤N≤104)；第 2 行给出 N 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过104。</p><h3 id="输出格式：-19"><a href="#输出格式：-19" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。</p><h3 id="输入样例：-16"><a href="#输入样例：-16" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">10 15 12 3 4 13 1 15</span><br></pre></td></tr></table></figure><h3 id="输出样例：-16"><a href="#输出样例：-16" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure><div class="note success">每次都是已有的长度加上新来的绳子的总和的一半，所以要尽量把长的绳子放到后面，先排序，再循环相加除以2。</div><h3 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">int</span> res=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        res=(res+a[i])/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1071-小赌怡情-（15-分）"><a href="#1071-小赌怡情-（15-分）" class="headerlink" title="1071 小赌怡情 （15 分）"></a>1071 小赌怡情 （15 分）</h2><p>常言道“小赌怡情”。这是一个很简单的小游戏：首先由计算机给出第一个整数；然后玩家下注赌第二个整数将会比第一个数大还是小；玩家下注 t 个筹码后，计算机给出第二个数。若玩家猜对了，则系统奖励玩家 t 个筹码；否则扣除玩家 t 个筹码。</p><p>注意：玩家下注的筹码数不能超过自己帐户上拥有的筹码数。当玩家输光了全部筹码后，游戏就结束。</p><h3 id="输入格式：-20"><a href="#输入格式：-20" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出 2 个正整数 T 和 K（≤ 100），分别是系统在初始状态下赠送给玩家的筹码数、以及需要处理的游戏次数。随后 K 行，每行对应一次游戏，顺序给出 4 个数字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n1 b t n2</span><br></pre></td></tr></table></figure><p>其中 <code>n1</code> 和 <code>n2</code> 是计算机先后给出的两个[0, 9]内的整数，保证两个数字不相等。<code>b</code> 为 0 表示玩家赌<code>小</code>，为 1 表示玩家赌<code>大</code>。<code>t</code> 表示玩家下注的筹码数，保证在整型范围内。</p><h3 id="输出格式：-20"><a href="#输出格式：-20" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每一次游戏，根据下列情况对应输出（其中 <code>t</code> 是玩家下注量，<code>x</code> 是玩家当前持有的筹码量）：</p><ul><li>玩家赢，输出 <code>Win t! Total = x.</code>；</li><li>玩家输，输出 <code>Lose t. Total = x.</code>；</li><li>玩家下注超过持有的筹码量，输出 <code>Not enough tokens. Total = x.</code>；</li><li>玩家输光后，输出 <code>Game Over.</code> 并结束程序。</li></ul><h3 id="输入样例-1：-3"><a href="#输入样例-1：-3" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">100 4</span><br><span class="line">8 0 100 2</span><br><span class="line">3 1 50 1</span><br><span class="line">5 1 200 6</span><br><span class="line">7 0 200 8</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-3"><a href="#输出样例-1：-3" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Win 100!  Total = 200.</span><br><span class="line">Lose 50.  Total = 150.</span><br><span class="line">Not enough tokens.  Total = 150.</span><br><span class="line">Not enough tokens.  Total = 150.</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-3"><a href="#输入样例-2：-3" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">100 4</span><br><span class="line">8 0 100 2</span><br><span class="line">3 1 200 1</span><br><span class="line">5 1 200 6</span><br><span class="line">7 0 200 8</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-3"><a href="#输出样例-2：-3" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Win 100!  Total = 200.</span><br><span class="line">Lose 200.  Total = 0.</span><br><span class="line">Game Over.</span><br></pre></td></tr></table></figure><div class="note success">循环读入并判断。</div><h3 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,K,n1,b,t,n2;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T&gt;&gt;K;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n1&gt;&gt;b&gt;&gt;t&gt;&gt;n2;</span><br><span class="line">        <span class="keyword">if</span>(T&lt;=<span class="number">0</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Game Over."</span>&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t&gt;T) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Not enough tokens.  Total = "</span>&lt;&lt;T&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((n2&lt;n1 &amp;&amp; b==<span class="number">0</span>) || (n2&gt;n1 &amp;&amp; b==<span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            T+=t;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Win "</span>&lt;&lt;t&lt;&lt;<span class="string">"!  Total = "</span>&lt;&lt;T&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((n2&lt;n1 &amp;&amp; b==<span class="number">1</span>) || (n2&gt;n1 &amp;&amp; b==<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            T-=t;</span><br><span class="line">            <span class="keyword">if</span>(T&gt;=<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Lose "</span>&lt;&lt;t&lt;&lt;<span class="string">".  Total = "</span>&lt;&lt;T&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span>    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Game Over."</span>&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1072-开学寄语-（20-分）"><a href="#1072-开学寄语-（20-分）" class="headerlink" title="1072 开学寄语 （20 分）"></a>1072 开学寄语 （20 分）</h2><p>下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其 QQ，封其电脑，夺其手机，收其 ipad，断其 wifi，使其百无聊赖，然后，净面、理发、整衣，然后思过、读书、锻炼、明智、开悟、精进。而后必成大器也！</p><p><img src="https://images.ptausercontent.com/3b1d9f4a-778b-4942-a9e2-836262f363aa.JPG" alt="jiyu.JPG"></p><p>本题要求你写个程序帮助这所学校的老师检查所有学生的物品，以助其成大器。</p><h3 id="输入格式：-21"><a href="#输入格式：-21" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数 N（≤ 1000）和 M（≤ 6），分别是学生人数和需要被查缴的物品种类数。第二行给出 M 个需要被查缴的物品编号，其中编号为 4 位数字。随后 N 行，每行给出一位学生的姓名缩写（由 1-4 个大写英文字母组成）、个人物品数量 K（0 ≤ K ≤ 10）、以及 K 个物品的编号。</p><h3 id="输出格式：-21"><a href="#输出格式：-21" class="headerlink" title="输出格式："></a>输出格式：</h3><p>顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">姓名缩写: 物品编号1 物品编号2 ……</span><br></pre></td></tr></table></figure><p>最后一行输出存在问题的学生的总人数和被查缴物品的总数。</p><h3 id="输入样例：-17"><a href="#输入样例：-17" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">2333 6666</span><br><span class="line">CYLL 3 1234 2345 3456</span><br><span class="line">U 4 9966 6666 8888 6666</span><br><span class="line">GG 2 2333 7777</span><br><span class="line">JJ 3 0012 6666 2333</span><br></pre></td></tr></table></figure><h3 id="输出样例：-17"><a href="#输出样例：-17" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">U: 6666 6666</span><br><span class="line">GG: 2333</span><br><span class="line">JJ: 6666 2333</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><div class="note success">又被四位数的问题坑到了，不能用cout，而要用printf(%04d)的形式，避免要输出的数第一位是0的情况。</div><h3 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M,t,K,cnt_name=<span class="number">0</span>,cnt_thing=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">        a[t]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;name&gt;&gt;K;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;K;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">            <span class="keyword">if</span>(a[t]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt_thing++;</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="number">0</span>) &#123;<span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">": "</span>;<span class="built_in">printf</span>(<span class="string">"%04d"</span>,t);flag=<span class="number">1</span>;cnt_name++;&#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)    <span class="built_in">printf</span>(<span class="string">" %04d"</span>,t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cnt_name&lt;&lt;<span class="string">" "</span>&lt;&lt;cnt_thing&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1074-宇宙无敌加法器-（20-分）"><a href="#1074-宇宙无敌加法器-（20-分）" class="headerlink" title="1074 宇宙无敌加法器 （20 分）"></a>1074 宇宙无敌加法器 （20 分）</h2><p>地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个 PAT 星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是 7 进制数、第 2 位是 2 进制数、第 3 位是 5 进制数、第 4 位是 10 进制数，等等。每一位的进制 d 或者是 0（表示十进制）、或者是 [2，9] 区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT 星人通常只需要记住前 20 位就够用了，以后各位默认为 10 进制。</p><p>在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203 + 415”呢？我们得首先计算最低位：3 + 5 = 8；因为最低位是 7 进制的，所以我们得到 1 和 1 个进位。第 2 位是：0 + 1 + 1（进位）= 2；因为此位是 2 进制的，所以我们得到 0 和 1 个进位。第 3 位是：2 + 4 + 1（进位）= 7；因为此位是 5 进制的，所以我们得到 2 和 1 个进位。第 4 位是：6 + 1（进位）= 7；因为此位是 10 进制的，所以我们就得到 7。最后我们得到：6203 + 415 = 7201。</p><h3 id="输入格式：-22"><a href="#输入格式：-22" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入首先在第一行给出一个 N 位的进制表（0 &lt; N ≤ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。</p><h3 id="输出格式：-22"><a href="#输出格式：-22" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出两个 PAT 数之和。</p><h3 id="输入样例：-18"><a href="#输入样例：-18" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">30527</span><br><span class="line">06203</span><br><span class="line">415</span><br></pre></td></tr></table></figure><h3 id="输出样例：-18"><a href="#输出样例：-18" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7201</span><br></pre></td></tr></table></figure><div class="note success">这一题我提交了n遍才过，枯了！<br><br>有两个坑，一个是如果没有需要输出的内容，需要输出0，这个占1分。<br><br>还有一个坑是，有可能有进位的情况，那就需要先输出一个1（最多进位是1啦），进位问题占4分。</div><h3 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val[<span class="number">25</span>];</span><br><span class="line">    <span class="keyword">int</span> sum[<span class="number">25</span>];</span><br><span class="line">    sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> mapp,a,b;</span><br><span class="line">    getline(<span class="built_in">cin</span>,mapp);</span><br><span class="line">    getline(<span class="built_in">cin</span>,a);</span><br><span class="line">    getline(<span class="built_in">cin</span>,b);</span><br><span class="line">    reverse(mapp.begin(),mapp.end());</span><br><span class="line">    reverse(a.begin(),a.end());</span><br><span class="line">    reverse(b.begin(),b.end());</span><br><span class="line">    <span class="keyword">if</span>(a.size()&gt;b.size())</span><br><span class="line">        b.insert(b.end(),a.size()-b.size(),<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">if</span>(a.size()&lt;b.size())</span><br><span class="line">        a.insert(a.end(),b.size()-a.size(),<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp=(a[i]-<span class="string">'0'</span>)+(b[i]-<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">int</span> t=mapp[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>)    t=<span class="number">10</span>;</span><br><span class="line">        val[i]=(temp+sum[i])%t;</span><br><span class="line">        sum[i+<span class="number">1</span>]=(temp+sum[i])/t;</span><br><span class="line">        p=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum[p]!=<span class="number">0</span>)   val[p]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>    p-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span> &amp;&amp; val[i]==<span class="number">0</span>)    <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;val[i];flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1076—1085"><a href="#1076—1085" class="headerlink" title="1076—1085"></a>1076—1085</h1><h2 id="1076-Wifi密码-（15-分）"><a href="#1076-Wifi密码-（15-分）" class="headerlink" title="1076 Wifi密码 （15 分）"></a>1076 Wifi密码 （15 分）</h2><p>下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用 wifi，又怕耽误亲们的学习，现将 wifi 密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成 wifi 的密码。这里简单假设每道选择题都有 4 个选项，有且只有 1 个正确答案。</p><p><img src="https://images.ptausercontent.com/7e56be3f-caba-45f1-b9cb-38a96d44de76.jpg" alt="wifi.jpg"></p><h3 id="输入格式：-23"><a href="#输入格式：-23" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（≤ 100），随后 N 行，每行按照 <code>编号-答案</code> 的格式给出一道题的 4 个选项，<code>T</code> 表示正确选项，<code>F</code> 表示错误选项。选项间用空格分隔。</p><h3 id="输出格式：-23"><a href="#输出格式：-23" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出 wifi 密码。</p><h3 id="输入样例：-19"><a href="#输入样例：-19" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">A-T B-F C-F D-F</span><br><span class="line">C-T B-F A-F D-F</span><br><span class="line">A-F D-F C-F B-T</span><br><span class="line">B-T A-F C-F D-F</span><br><span class="line">B-F D-T A-F C-F</span><br><span class="line">A-T C-F B-F D-F</span><br><span class="line">D-T B-F C-F A-F</span><br><span class="line">C-T A-F B-F D-F</span><br></pre></td></tr></table></figure><h3 id="输出样例：-19"><a href="#输出样例：-19" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13224143</span><br></pre></td></tr></table></figure><div class="note success">直接比较指定位置的值是T还是F，在把前面的选项存入数组。</div><h3 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="keyword">int</span> wifi[<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>,ans);</span><br><span class="line">        <span class="keyword">if</span>(ans[<span class="number">2</span>]==<span class="string">'T'</span>) wifi[i]=(ans[<span class="number">0</span>]-<span class="string">'A'</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ans[<span class="number">6</span>]==<span class="string">'T'</span>) wifi[i]=(ans[<span class="number">4</span>]-<span class="string">'A'</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ans[<span class="number">10</span>]==<span class="string">'T'</span>) wifi[i]=(ans[<span class="number">8</span>]-<span class="string">'A'</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ans[<span class="number">14</span>]==<span class="string">'T'</span>) wifi[i]=(ans[<span class="number">12</span>]-<span class="string">'A'</span>)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cout</span>&lt;&lt;wifi[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1077-互评成绩计算-（20-分）"><a href="#1077-互评成绩计算-（20-分）" class="headerlink" title="1077 互评成绩计算 （20 分）"></a>1077 互评成绩计算 （20 分）</h2><p>在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成绩是这样计算的：所有其他组的评分中，去掉一个最高分和一个最低分，剩下的分数取平均分记为 G1；老师给这个组的评分记为 G2。该组得分为 (G1+G2)/2，最后结果四舍五入后保留整数分。本题就要求你写个程序帮助老师计算每个组的互评成绩。</p><h3 id="输入格式：-24"><a href="#输入格式：-24" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数 N（&gt; 3）和 M，分别是分组数和满分，均不超过 100。随后 N 行，每行给出该组得到的 N 个分数（均保证为整型范围内的整数），其中第 1 个是老师给出的评分，后面 N−1 个是其他组给的评分。合法的输入应该是 [0,M] 区间内的整数，若不在合法区间内，则该分数须被忽略。题目保证老师的评分都是合法的，并且每个组至少会有 3 个来自同学的合法评分。</p><h3 id="输出格式：-24"><a href="#输出格式：-24" class="headerlink" title="输出格式："></a>输出格式：</h3><p>为每个组输出其最终得分。每个得分占一行。</p><h3 id="输入样例：-20"><a href="#输入样例：-20" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 50</span><br><span class="line">42 49 49 35 38 41</span><br><span class="line">36 51 50 28 -1 30</span><br><span class="line">40 36 41 33 47 49</span><br><span class="line">30 250 -25 27 45 31</span><br><span class="line">48 0 0 50 50 1234</span><br><span class="line">43 41 36 29 42 29</span><br></pre></td></tr></table></figure><h3 id="输出样例：-20"><a href="#输出样例：-20" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">42</span><br><span class="line">33</span><br><span class="line">41</span><br><span class="line">31</span><br><span class="line">37</span><br><span class="line">39</span><br></pre></td></tr></table></figure><div class="note success">需要用double类型累加和求平均，然后四舍五入。</div><h3 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,g2,full;</span><br><span class="line">    <span class="keyword">double</span> g1,res;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;full;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;g2;</span><br><span class="line">        <span class="keyword">int</span> temp,max=<span class="number">0</span>,min=<span class="number">105</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            <span class="keyword">if</span>(temp&lt;=full &amp;&amp; temp&gt;=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=temp;</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;max)    max=temp;</span><br><span class="line">                <span class="keyword">if</span>(temp&lt;min)    min=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        g1=(sum-max-min)/((cnt<span class="number">-2</span>)*<span class="number">1.0</span>);</span><br><span class="line">        res=(g1+g2)/(<span class="number">2.0</span>);</span><br><span class="line">        <span class="keyword">if</span>(res-<span class="keyword">int</span>(res)&gt;=<span class="number">0.5</span>)   res+=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">int</span>(res));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1078-字符串压缩与解压-（20-分）"><a href="#1078-字符串压缩与解压-（20-分）" class="headerlink" title="1078 字符串压缩与解压 （20 分）"></a>1078 字符串压缩与解压 （20 分）</h2><p>文本压缩有很多种方法，这里我们只考虑最简单的一种：把由相同字符组成的一个连续的片段用这个字符和片段中含有这个字符的个数来表示。例如 <code>ccccc</code> 就用 <code>5c</code> 来表示。如果字符没有重复，就原样输出。例如 <code>aba</code> 压缩后仍然是 <code>aba</code>。</p><p>解压方法就是反过来，把形如 <code>5c</code> 这样的表示恢复为 <code>ccccc</code>。</p><p>本题需要你根据压缩或解压的要求，对给定字符串进行处理。这里我们简单地假设原始字符串是完全由英文字母和空格组成的非空字符串。</p><h3 id="输入格式：-25"><a href="#输入格式：-25" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个字符，如果是 <code>C</code> 就表示下面的字符串需要被压缩；如果是 <code>D</code> 就表示下面的字符串需要被解压。第二行给出需要被压缩或解压的不超过 1000 个字符的字符串，以回车结尾。题目保证字符重复个数在整型范围内，且输出文件不超过 1MB。</p><h3 id="输出格式：-25"><a href="#输出格式：-25" class="headerlink" title="输出格式："></a>输出格式：</h3><p>根据要求压缩或解压字符串，并在一行中输出结果。</p><h3 id="输入样例-1：-4"><a href="#输入样例-1：-4" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line">TTTTThhiiiis isssss a   tesssst CAaaa as</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-4"><a href="#输出样例-1：-4" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5T2h4is i5s a3 te4st CA3a as</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-4"><a href="#输入样例-2：-4" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D</span><br><span class="line">5T2h4is i5s a3 te4st CA3a as10Z</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-4"><a href="#输出样例-2：-4" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ</span><br></pre></td></tr></table></figure><div class="note success">解压的时候，我一开始直接在循环里判断b[i]是否是数字，然后判断b[i+1]和b[i+2]是不是数字（因为可能出现大于9长度的同一个字母），但是循环里调用b[i+1]和b[i+2]可能会超出数组大小，最后一个样例过不了。<br><br>所以如果遇到当前字符是数字，先记录下来，然后看下一次循环再检验构成的数字是否增加。</div><h3 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b,ans;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">string</span> num;</span><br><span class="line">    <span class="keyword">int</span> times=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">"C"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>,b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;b.size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(b[j]==b[i])  cnt++;</span><br><span class="line">                <span class="keyword">else</span>    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)  ans+=to_string(cnt);</span><br><span class="line">            ans+=b[i];</span><br><span class="line">            i=i+cnt<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=b.size()) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">"D"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>,b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[i]&gt;=<span class="string">'0'</span> &amp;&amp; b[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num+=b[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num.size()&gt;<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    times=stoi(num);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;times<span class="number">-1</span>;j++)  ans+=b[i];</span><br><span class="line">                &#125;</span><br><span class="line">                ans+=b[i];</span><br><span class="line">                times=<span class="number">1</span>;</span><br><span class="line">                num=<span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1081-检查密码-（15-分）"><a href="#1081-检查密码-（15-分）" class="headerlink" title="1081 检查密码 （15 分）"></a>1081 检查密码 （15 分）</h2><p>本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英文字母、数字和小数点 <code>.</code>，还必须既有字母也有数字。</p><h3 id="输入格式：-26"><a href="#输入格式：-26" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（≤ 100），随后 N 行，每行给出一个用户设置的密码，为不超过 80 个字符的非空字符串，以回车结束。</p><h3 id="输出格式：-26"><a href="#输出格式：-26" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个用户的密码，在一行中输出系统反馈信息，分以下5种：</p><ul><li>如果密码合法，输出<code>Your password is wan mei.</code>；</li><li>如果密码太短，不论合法与否，都输出<code>Your password is tai duan le.</code>；</li><li>如果密码长度合法，但存在不合法字符，则输出<code>Your password is tai luan le.</code>；</li><li>如果密码长度合法，但只有字母没有数字，则输出<code>Your password needs shu zi.</code>；</li><li>如果密码长度合法，但只有数字没有字母，则输出<code>Your password needs zi mu.</code>。</li></ul><h3 id="输入样例：-21"><a href="#输入样例：-21" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">123s</span><br><span class="line">zheshi.wodepw</span><br><span class="line">1234.5678</span><br><span class="line">WanMei23333</span><br><span class="line">pass*word.6</span><br></pre></td></tr></table></figure><h3 id="输出样例：-21"><a href="#输出样例：-21" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Your password is tai duan le.</span><br><span class="line">Your password needs shu zi.</span><br><span class="line">Your password needs zi mu.</span><br><span class="line">Your password is wan mei.</span><br><span class="line">Your password is tai luan le.</span><br></pre></td></tr></table></figure><div class="note success">string类型的判断。</div><h3 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">string</span> password;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>,password);</span><br><span class="line">        <span class="keyword">int</span> flag1=<span class="number">0</span>,flag2=<span class="number">0</span>,flag3=<span class="number">0</span>,flag4=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(password.size()&lt;<span class="number">6</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Your password is tai duan le."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;password.size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>((password[j]&gt;=<span class="string">'a'</span> &amp;&amp; password[j]&lt;=<span class="string">'z'</span>)</span><br><span class="line">                   || (password[j]&gt;=<span class="string">'A'</span> &amp;&amp; password[j]&lt;=<span class="string">'Z'</span>))   flag1=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(password[j]&gt;=<span class="string">'0'</span> &amp;&amp; password[j]&lt;=<span class="string">'9'</span>)    flag2=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(password[j]==<span class="string">'.'</span>)   flag3=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>    flag4=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag4==<span class="number">1</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Your password is tai luan le."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag1==<span class="number">1</span> &amp;&amp; flag2==<span class="number">1</span> &amp;&amp; flag4==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Your password is wan mei."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag1==<span class="number">0</span> &amp;&amp; flag2==<span class="number">1</span> &amp;&amp; flag4==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Your password needs zi mu."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag1==<span class="number">1</span> &amp;&amp; flag2==<span class="number">0</span> &amp;&amp; flag4==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Your password needs shu zi."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1082-射击比赛-（20-分）"><a href="#1082-射击比赛-（20-分）" class="headerlink" title="1082 射击比赛 （20 分）"></a>1082 射击比赛 （20 分）</h2><p>本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。</p><h3 id="输入格式：-27"><a href="#输入格式：-27" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行中给出一个正整数 N（≤ 10 000）。随后 N 行，每行按下列格式给出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID x y</span><br></pre></td></tr></table></figure><p>其中 <code>ID</code> 是运动员的编号（由 4 位数字组成）；<code>x</code> 和 <code>y</code> 是其打出的弹洞的平面坐标(<code>x</code>,<code>y</code>)，均为整数，且 0 ≤ |<code>x</code>|, |<code>y</code>| ≤ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。</p><h3 id="输出格式：-27"><a href="#输出格式：-27" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。</p><h3 id="输入样例：-22"><a href="#输入样例：-22" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0001 5 7</span><br><span class="line">1020 -1 3</span><br><span class="line">0233 0 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例：-22"><a href="#输出样例：-22" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0233 0001</span><br></pre></td></tr></table></figure><div class="note success">循环读入并计算判断。</div><h3 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,id,x,y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">double</span> max=<span class="number">0</span>,min=<span class="number">10005</span>;</span><br><span class="line">    <span class="keyword">int</span> max_name,min_name;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">double</span> dis=<span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">        <span class="keyword">if</span>(dis&gt;max) &#123;max_name=id;max=dis;&#125;</span><br><span class="line">        <span class="keyword">if</span>(dis&lt;min) &#123;min_name=id;min=dis;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%04d %04d"</span>,min_name,max_name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1083-是否存在相等的差-（20-分）"><a href="#1083-是否存在相等的差-（20-分）" class="headerlink" title="1083 是否存在相等的差 （20 分）"></a>1083 是否存在相等的差 （20 分）</h2><p>给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字相减（大减小），得到 N 个非负差值，其中是否存在相等的差？</p><h3 id="输入格式：-28"><a href="#输入格式：-28" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（2 ≤ N ≤ 10 000），随后一行给出 1 到 N 的一个洗牌后的排列，第 i 个数表示正面写了 i 的那张卡片背面的数字。</p><h3 id="输出格式：-28"><a href="#输出格式：-28" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照“差值 重复次数”的格式从大到小输出重复的差值及其重复的次数，每行输出一个结果。</p><h3 id="输入样例：-23"><a href="#输入样例：-23" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">3 5 8 6 2 1 4 7</span><br></pre></td></tr></table></figure><h3 id="输出样例：-23"><a href="#输出样例：-23" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">3 3</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><div class="note success">虽然是需要排序，但是一个数组就可以搞定啦。</div><h3 id="代码-28"><a href="#代码-28" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,num,max=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="keyword">int</span> dis=<span class="built_in">abs</span>(num-i);</span><br><span class="line">        a[dis]++;</span><br><span class="line">        <span class="keyword">if</span>(dis&gt;max) max=dis;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=max;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1084-外观数列-（20-分）"><a href="#1084-外观数列-（20-分）" class="headerlink" title="1084 外观数列 （20 分）"></a>1084 外观数列 （20 分）</h2><p>外观数列是指具有以下特点的整数序列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d, d1, d111, d113, d11231, d112213111, ...</span><br></pre></td></tr></table></figure><p>它从不等于 1 的数字 <code>d</code> 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 <code>d</code>，所以就是 <code>d1</code>；第 2 项是 1 个 <code>d</code>（对应 <code>d1</code>）和 1 个 1（对应 11），所以第 3 项就是 <code>d111</code>。又比如第 4 项是 <code>d113</code>，其描述就是 1 个 <code>d</code>，2 个 1，1 个 3，所以下一项就是 <code>d11231</code>。当然这个定义对 <code>d</code> = 1 也成立。本题要求你推算任意给定数字 <code>d</code> 的外观数列的第 N 项。</p><h3 id="输入格式：-29"><a href="#输入格式：-29" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出 [0,9] 范围内的一个整数 <code>d</code>、以及一个正整数 N（≤ 40），用空格分隔。</p><h3 id="输出格式：-29"><a href="#输出格式：-29" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中给出数字 <code>d</code> 的外观数列的第 N 项。</p><h3 id="输入样例：-24"><a href="#输入样例：-24" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 8</span><br></pre></td></tr></table></figure><h3 id="输出样例：-24"><a href="#输出样例：-24" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1123123111</span><br></pre></td></tr></table></figure><div class="note success">感觉很复杂，题目读懂之后一点点模拟其实也不难，一次就通过了，二重循环的时候检查和当前这个数是否相同，如果相同计数增加1，然后结束内层循环之后，外层循环的指针就指向 i+cnt-1，然后还要判断一下当前指针的位置是否还在输入数据长度内。</div><h3 id="代码-29"><a href="#代码-29" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;d&gt;&gt;n;</span><br><span class="line">    <span class="built_in">string</span> ans,res;</span><br><span class="line">    ans=to_string(d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ans.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;ans.size();k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[k]==ans[j])    &#123;cnt++;&#125;</span><br><span class="line">                <span class="keyword">else</span>    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res+=ans[j];</span><br><span class="line">            res+=to_string(cnt);</span><br><span class="line">            <span class="keyword">if</span>(j+cnt&lt;ans.size())    j=j+cnt<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j+cnt&gt;=ans.size())  <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">        ans=res;</span><br><span class="line">        res=<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1085-PAT单位排行-（25-分）"><a href="#1085-PAT单位排行-（25-分）" class="headerlink" title="1085 PAT单位排行 （25 分）"></a>1085 PAT单位排行 （25 分）</h2><p>每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。</p><h3 id="输入格式：-30"><a href="#输入格式：-30" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（≤105），即考生人数。随后 N 行，每行按下列格式给出一个考生的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">准考证号 得分 学校</span><br></pre></td></tr></table></figure><p>其中<code>准考证号</code>是由 6 个字符组成的字符串，其首字母表示考试的级别：<code>B</code>代表乙级，<code>A</code>代表甲级，<code>T</code>代表顶级；<code>得分</code>是 [0, 100] 区间内的整数；<code>学校</code>是由不超过 6 个英文字母组成的单位码（大小写无关）。注意：题目保证每个考生的准考证号是不同的。</p><h3 id="输出格式：-30"><a href="#输出格式：-30" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先在一行中输出单位个数。随后按以下格式非降序输出单位的排行榜：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">排名 学校 加权总分 考生人数</span><br></pre></td></tr></table></figure><p>其中<code>排名</code>是该单位的排名（从 1 开始）；<code>学校</code>是全部按小写字母输出的单位码；<code>加权总分</code>定义为<code>乙级总分/1.5 + 甲级总分 + 顶级总分*1.5</code>的<strong>整数部分</strong>；<code>考生人数</code>是该属于单位的考生的总人数。</p><p>学校首先按加权总分排行。如有并列，则应对应相同的排名，并按考生人数升序输出。如果仍然并列，则按单位码的字典序输出。</p><h3 id="输入样例：-25"><a href="#输入样例：-25" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">A57908 85 Au</span><br><span class="line">B57908 54 LanX</span><br><span class="line">A37487 60 au</span><br><span class="line">T28374 67 CMU</span><br><span class="line">T32486 24 hypu</span><br><span class="line">A66734 92 cmu</span><br><span class="line">B76378 71 AU</span><br><span class="line">A47780 45 lanx</span><br><span class="line">A72809 100 pku</span><br><span class="line">A03274 45 hypu</span><br></pre></td></tr></table></figure><h3 id="输出样例：-25"><a href="#输出样例：-25" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 cmu 192 2</span><br><span class="line">1 au 192 3</span><br><span class="line">3 pku 100 1</span><br><span class="line">4 hypu 81 2</span><br><span class="line">4 lanx 81 2</span><br></pre></td></tr></table></figure><div class="note success">这题用vector加结构体只得了20分，最后两组测试数据超时了，看网上其他人还用了map，map我基本不会用，等有空了再来填坑好了。底下这版代码的逻辑没错，但是最后两组数据超时。</div><h3 id="代码-30"><a href="#代码-30" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pats</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> scores;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> pats &amp;a,<span class="keyword">const</span> pats &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.scores!=b.scores)   <span class="keyword">return</span> a.scores&gt;b.scores;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.cnt!=b.cnt)  <span class="keyword">return</span> a.cnt&lt;b.cnt;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.name&lt;b.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pats&gt; pat;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> score;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">string</span> id,school;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pats temp;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id&gt;&gt;score&gt;&gt;school;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;school.size();j++)    school[j]=<span class="built_in">tolower</span>(school[j]);</span><br><span class="line">        <span class="keyword">if</span>(id[<span class="number">0</span>]==<span class="string">'B'</span>)  score=score/<span class="number">1.5</span>;</span><br><span class="line">        <span class="keyword">if</span>(id[<span class="number">0</span>]==<span class="string">'T'</span>)  score=score*<span class="number">1.5</span>;</span><br><span class="line">        temp.name=school;temp.scores=score;temp.cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;pat.size();k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pat[k].name==school) &#123;pat[k].scores+=score;pat[k].cnt++;flag=<span class="number">1</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>) pat.push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;pat.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sort(pat.begin(),pat.end(),cmp);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;pat[<span class="number">0</span>].name&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="keyword">int</span>(pat[<span class="number">0</span>].scores)&lt;&lt;<span class="string">" "</span>&lt;&lt;pat[<span class="number">0</span>].cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;pat.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">int</span>(pat[i].scores)==<span class="keyword">int</span>(pat[i<span class="number">-1</span>].scores))</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;pat[i].name&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="keyword">int</span>(pat[i].scores)&lt;&lt;<span class="string">" "</span>&lt;&lt;pat[i].cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;pat[i].name&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="keyword">int</span>(pat[i].scores)&lt;&lt;<span class="string">" "</span>&lt;&lt;pat[i].cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1086—1095"><a href="#1086—1095" class="headerlink" title="1086—1095"></a>1086—1095</h1><h2 id="1086-就不告诉你-（15-分）"><a href="#1086-就不告诉你-（15-分）" class="headerlink" title="1086 就不告诉你 （15 分）"></a>1086 就不告诉你 （15 分）</h2><p>做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。</p><p><img src="https://images.ptausercontent.com/0c3a4497-27c3-45ea-9c8e-5a1ab2df48af.jpg" alt="53.jpg"></p><h3 id="输入格式：-31"><a href="#输入格式：-31" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。</p><h3 id="输出格式：-31"><a href="#输出格式：-31" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中倒着输出 A 和 B 的乘积。</p><h3 id="输入样例：-26"><a href="#输入样例：-26" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 7</span><br></pre></td></tr></table></figure><h3 id="输出样例：-26"><a href="#输出样例：-26" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">53</span><br></pre></td></tr></table></figure><div class="note success">100*100是返回1，前面的0要省略。</div><h3 id="代码-31"><a href="#代码-31" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    res=to_string(a*b);</span><br><span class="line">    reverse(res.begin(),res.end());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,stoi(res));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1087-有多少不同的值-（20-分）"><a href="#1087-有多少不同的值-（20-分）" class="headerlink" title="1087 有多少不同的值 （20 分）"></a>1087 有多少不同的值 （20 分）</h2><p>当自然数 n 依次取 1、2、3、……、N 时，算式 ⌊n/2⌋+⌊n/3⌋+⌊n/5⌋ 有多少个不同的值？（注：⌊x⌋ 为取整函数，表示不超过 x 的最大自然数，即 x 的整数部分。）</p><h3 id="输入格式：-32"><a href="#输入格式：-32" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入给出一个正整数 N（2≤N≤104）。</p><h3 id="输出格式：-32"><a href="#输出格式：-32" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出题面中算式取到的不同值的个数。</p><h3 id="输入样例：-27"><a href="#输入样例：-27" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2017</span><br></pre></td></tr></table></figure><h3 id="输出样例：-27"><a href="#输出样例：-27" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1480</span><br></pre></td></tr></table></figure><div class="note success">这题还是很简单的，用vector存一下所有已经记录过的数。</div><h3 id="代码-32"><a href="#代码-32" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="keyword">int</span>(i/<span class="number">2</span>)+<span class="keyword">int</span>(i/<span class="number">3</span>)+<span class="keyword">int</span>(i/<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]==sum)   flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>) &#123;a.push_back(sum);cnt++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1088-三人行-（20-分）"><a href="#1088-三人行-（20-分）" class="headerlink" title="1088 三人行 （20 分）"></a>1088 三人行 （20 分）</h2><p>子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”</p><p>本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。</p><h3 id="输入格式：-33"><a href="#输入格式：-33" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。</p><h3 id="输出格式：-33"><a href="#输出格式：-33" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 <code>Cong</code>；平等则输出 <code>Ping</code>；比你弱则输出 <code>Gai</code>。其间以 1 个空格分隔，行首尾不得有多余空格。</p><p>注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 <code>No Solution</code>。</p><h3 id="输入样例-1：-5"><a href="#输入样例-1：-5" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">48 3 7</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-5"><a href="#输出样例-1：-5" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">48 Ping Cong Gai</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-5"><a href="#输入样例-2：-5" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">48 11 6</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-5"><a href="#输出样例-2：-5" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No Solution</span><br></pre></td></tr></table></figure><div class="note success">这一题我一看就感觉是解方程的题目，然而有两个未知数和一个方程，所以解可能不唯一，我还算的是a和b的比值，然而只能得13分，应该是有些情况没考虑到。<br><br>看了别人的答案，才发现自己简直太傻逼了，直接循环啊，a从99循环10，然后看b和c的情况是否满足题目要求就可以了。以后遇到类似于方程的问题要想到循环。</div><h3 id="代码-33"><a href="#代码-33" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;m) <span class="built_in">cout</span>&lt;&lt;<span class="string">" Cong"</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==m)    <span class="built_in">cout</span>&lt;&lt;<span class="string">" Ping"</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;m) <span class="built_in">cout</span>&lt;&lt;<span class="string">" Gai"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,x,y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">99</span>;i&gt;=<span class="number">10</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j=(i%<span class="number">10</span>)*<span class="number">10</span>+i/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">double</span> k=<span class="built_in">abs</span>(i-j)*<span class="number">1.0</span>/x;</span><br><span class="line">        <span class="keyword">if</span>(j==k*y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">            print(m,i);print(m,j);print(m,k);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"No Solution"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1089-狼人杀-简单版-（20-分）"><a href="#1089-狼人杀-简单版-（20-分）" class="headerlink" title="1089 狼人杀-简单版 （20 分）"></a>1089 狼人杀-简单版 （20 分）</h2><p>以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？</p><p>本题是这个问题的升级版：已知 N 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？</p><h3 id="输入格式：-34"><a href="#输入格式：-34" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行中给出一个正整数 N（5≤N≤100）。随后 N 行，第 i 行给出第 i 号玩家说的话（1≤i≤N），即一个玩家编号，用正号表示好人，负号表示狼人。</p><h3 id="输出格式：-34"><a href="#输出格式：-34" class="headerlink" title="输出格式："></a>输出格式：</h3><p>如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 A=a[1],…,a[M]和 B=b[1],…,b[M]，若存在 0≤k&lt;M 使得 a[i]=b[i] （i≤k），且 a[k+1]&lt;b[k+1]，则称序列 A 小于序列 B。若无解则输出 <code>No Solution</code>。</p><h3 id="输入样例-1：-6"><a href="#输入样例-1：-6" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">+3</span><br><span class="line">-4</span><br><span class="line">+5</span><br><span class="line">+4</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-6"><a href="#输出样例-1：-6" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 4</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-6"><a href="#输入样例-2：-6" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">+6</span><br><span class="line">+3</span><br><span class="line">+1</span><br><span class="line">-5</span><br><span class="line">-2</span><br><span class="line">+4</span><br></pre></td></tr></table></figure><h3 id="输出样例-2（解不唯一）："><a href="#输出样例-2（解不唯一）：" class="headerlink" title="输出样例 2（解不唯一）："></a>输出样例 2（解不唯一）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 5</span><br></pre></td></tr></table></figure><h3 id="输入样例-3："><a href="#输入样例-3：" class="headerlink" title="输入样例 3："></a>输入样例 3：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">-3</span><br><span class="line">-4</span><br><span class="line">-5</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><h3 id="输出样例-3："><a href="#输出样例-3：" class="headerlink" title="输出样例 3："></a>输出样例 3：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No Solution</span><br></pre></td></tr></table></figure><div class="note success">这题一开始没有什么思路，然后看了别人的才明白，直接二重循环一次一次的验证就可以了，假设循环中的两个代号是狼人，其他人是好人，检查每个人说的是否是真话，如果是假话就jishu增加，如果检查完后，正好有2条假话，而且这两个说谎的人一个是好人一个是狼人，就可以证明当前循环中的这两个人就是狼人。</div><h3 id="代码-34"><a href="#代码-34" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; v(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)   <span class="built_in">cin</span>&gt;&gt;v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lie,a(n+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            a[i]=<span class="number">-1</span>;a[j]=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(v[k]*a[<span class="built_in">abs</span>(v[k])]&lt;<span class="number">0</span>) lie.push_back(k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(lie.size()==<span class="number">2</span> &amp;&amp; a[lie[<span class="number">0</span>]]+a[lie[<span class="number">1</span>]]==<span class="number">0</span>)</span><br><span class="line">                &#123;<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;j;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"No Solution"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1091-N-自守数-（15-分）"><a href="#1091-N-自守数-（15-分）" class="headerlink" title="1091 N-自守数 （15 分）"></a>1091 N-自守数 （15 分）</h2><p>如果某个数 K 的平方乘以 N 以后，结果的末尾几位数等于 K，那么就称这个数为“N-自守数”。例如 3×922=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。</p><p>本题就请你编写程序判断一个给定的数字是否关于某个 N 是 N-自守数。</p><h3 id="输入格式：-35"><a href="#输入格式：-35" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行中给出正整数 M（≤20），随后一行给出 M 个待检测的、不超过 1000 的正整数。</p><h3 id="输出格式：-35"><a href="#输出格式：-35" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个需要检测的数字，如果它是 N-自守数就在一行中输出最小的 N 和 NK2 的值，以一个空格隔开；否则输出 <code>No</code>。注意题目保证 N&lt;10。</p><h3 id="输入样例：-28"><a href="#输入样例：-28" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">92 5 233</span><br></pre></td></tr></table></figure><h3 id="输出样例：-28"><a href="#输出样例：-28" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 25392</span><br><span class="line">1 25</span><br><span class="line">No</span><br></pre></td></tr></table></figure><div class="note success">这题做为15分的题目有点复杂啊，既然要找n的值，就循环从1遍历到9，检验是否满足题目要求，需要把输入的数字和乘积结果都转换为string类型，然后比较最后几位是否相等。</div><h3 id="代码-35"><a href="#代码-35" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="built_in">string</span> snum,res;</span><br><span class="line">        snum=to_string(num);</span><br><span class="line">        <span class="keyword">int</span> num_size=snum.size();</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=j*num*num;</span><br><span class="line">            res=to_string(temp);</span><br><span class="line">            <span class="keyword">int</span> res_size=res.size();</span><br><span class="line">            <span class="keyword">if</span>(res.substr(res_size-num_size,res_size)==snum)</span><br><span class="line">                &#123;<span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="string">" "</span>&lt;&lt;(num*num*j)&lt;&lt;<span class="built_in">endl</span>;flag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1092-最好吃的月饼-（20-分）"><a href="#1092-最好吃的月饼-（20-分）" class="headerlink" title="1092 最好吃的月饼 （20 分）"></a>1092 最好吃的月饼 （20 分）</h2><p>月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。</p><p><img src="https://images.ptausercontent.com/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg" alt="mk.jpg"></p><p>若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。</p><h3 id="输入格式：-36"><a href="#输入格式：-36" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入首先给出两个正整数 N（≤1000）和 M（≤100），分别为月饼的种类数（于是默认月饼种类从 1 到 N 编号）和参与统计的城市数量。</p><p>接下来 M 行，每行给出 N 个非负整数（均不超过 1 百万），其中第 i 个整数为第 i 种月饼的销量（块）。数字间以空格分隔。</p><h3 id="输出格式：-36"><a href="#输出格式：-36" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。</p><h3 id="输入样例：-29"><a href="#输入样例：-29" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">1001 992 0 233 6</span><br><span class="line">8 0 2018 0 2008</span><br><span class="line">36 18 0 1024 4</span><br></pre></td></tr></table></figure><h3 id="输出样例：-29"><a href="#输出样例：-29" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><div class="note success">开一个数组负责累加统计即可。</div><h3 id="代码-36"><a href="#代码-36" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,temp,max=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            a[j]+=temp;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;=max)   max=a[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;max&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==max &amp;&amp; flag==<span class="number">0</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;i;flag=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]==max &amp;&amp; flag==<span class="number">1</span>)   <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1093-字符串A-B-（20-分）"><a href="#1093-字符串A-B-（20-分）" class="headerlink" title="1093 字符串A+B （20 分）"></a>1093 字符串A+B （20 分）</h2><p>给定两个字符串 A 和 B，本题要求你输出 A+B，即两个字符串的并集。要求先输出 A，再输出 B，但<strong>重复的字符必须被剔除</strong>。</p><h3 id="输入格式：-37"><a href="#输入格式：-37" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在两行中分别给出 A 和 B，均为长度不超过 106的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。</p><h3 id="输出格式：-37"><a href="#输出格式：-37" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出题面要求的 A 和 B 的和。</p><h3 id="输入样例：-30"><a href="#输入样例：-30" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is a sample test</span><br><span class="line">to show you_How it works</span><br></pre></td></tr></table></figure><h3 id="输出样例：-30"><a href="#输出样例：-30" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This ampletowyu_Hrk</span><br></pre></td></tr></table></figure><div class="note success">这一题双重循环的话最后一组测试用例会超时，在数组里面标记就可以了。</div><h3 id="代码-37"><a href="#代码-37" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">205</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> a,b,c;</span><br><span class="line">    getline(<span class="built_in">cin</span>,a);</span><br><span class="line">    getline(<span class="built_in">cin</span>,b);</span><br><span class="line">    c=a+b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[c[i]]==<span class="number">0</span>)  &#123;<span class="built_in">cout</span>&lt;&lt;c[i];s[c[i]]=<span class="number">1</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1094-谷歌的招聘-（20-分）"><a href="#1094-谷歌的招聘-（20-分）" class="headerlink" title="1094 谷歌的招聘 （20 分）"></a>1094 谷歌的招聘 （20 分）</h2><p>2004 年 7 月，谷歌在硅谷的 101 号公路边竖立了一块巨大的广告牌（如下图）用于招聘。内容超级简单，就是一个以 .com 结尾的网址，而前面的网址是一个 10 位素数，这个素数是自然常数 e 中最早出现的 10 位连续数字。能找出这个素数的人，就可以通过访问谷歌的这个网站进入招聘流程的下一步。</p><p><img src="https://images.ptausercontent.com/57148679-d574-4f49-b048-775c6c07791c.jpg" alt="prime.jpg"></p><p>自然常数 e 是一个著名的超越数，前面若干位写出来是这样的：e = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642<strong>7427466391</strong>932003059921… 其中粗体标出的 10 位数就是答案。</p><p>本题要求你编程解决一个更通用的问题：从任一给定的长度为 L 的数字中，找出最早出现的 K 位连续数字所组成的素数。</p><h3 id="输入格式：-38"><a href="#输入格式：-38" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出 2 个正整数，分别是 L（不超过 1000 的正整数，为数字长度）和 K（小于 10 的正整数）。接下来一行给出一个长度为 L 的正整数 N。</p><h3 id="输出格式：-38"><a href="#输出格式：-38" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出 N 中最早出现的 K 位连续数字所组成的素数。如果这样的素数不存在，则输出 <code>404</code>。注意，原始数字中的前导零也计算在位数之内。例如在 200236 中找 4 位素数，0023 算是解；但第一位 2 不能被当成 0002 输出，因为在原始数字中不存在这个 2 的前导零。</p><h3 id="输入样例-1：-7"><a href="#输入样例-1：-7" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20 5</span><br><span class="line">23654987725541023819</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-7"><a href="#输出样例-1：-7" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">49877</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-7"><a href="#输入样例-2：-7" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 3</span><br><span class="line">2468024680</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-6"><a href="#输出样例-2：-6" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">404</span><br></pre></td></tr></table></figure><div class="note success">这一题应该还是很简单的，只要会string的一些基本函数就好说。我在做题的时候把substr的参数记错了，里面的参数应该是起始位置和长度，而不是起始位置和终止位置。<br><br>一开始没读懂那个提示，提交之后只有18分，有一个测试点没通过，然后再读了一下这个提示，才明白意思是如果数字结果是“0023”，就应该输出0023，而不能把前面没有意义的0省略，所以输出是要判断一下数据位数。</div><h3 id="代码-38"><a href="#代码-38" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isprim</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)  &#123;flag=<span class="number">1</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,k,temp=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> number,sub;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;number;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l-k+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sub=number.substr(i,k);</span><br><span class="line">        temp=stoi(sub);</span><br><span class="line">        <span class="keyword">if</span>(isprim(temp)==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s=to_string(temp);</span><br><span class="line">            <span class="keyword">if</span>(s.size()!=k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k-s.size();j++)   <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"404"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div></div>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT刷题记录(上)</title>
      <link href="/2019/01/24/PAT%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2019/01/24/PAT%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>2019年准备参加PAT的认证，记录一下官网刷题的情况。</p><p>因为题目太多，分成上下两部分，这部分是1001—1045。</p><a id="more"></a><h1 id="1001—1010"><a href="#1001—1010" class="headerlink" title="1001—1010"></a>1001—1010</h1><h2 id="1004-成绩排名"><a href="#1004-成绩排名" class="headerlink" title="1004 成绩排名"></a>1004 成绩排名</h2><p>读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第 1 行：正整数 n</span><br><span class="line">第 2 行：第 1 个学生的姓名 学号 成绩</span><br><span class="line">第 3 行：第 2 个学生的姓名 学号 成绩</span><br><span class="line">  ... ... ...</span><br><span class="line">第 n+1 行：第 n 个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><div class="note success">很简单，定义一个结构体，然后根据分数排序就行了</div><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> subject;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line">student stu[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> student &amp;a,<span class="keyword">const</span> student &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;stu[i].name&gt;&gt;stu[i].subject&gt;&gt;stu[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu,stu+n,compare);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;stu[<span class="number">0</span>].name&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[<span class="number">0</span>].subject&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;stu[n<span class="number">-1</span>].name&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[n<span class="number">-1</span>].subject&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1005-继续（3n-1）猜想"><a href="#1005-继续（3n-1）猜想" class="headerlink" title="1005 继续（3n+1）猜想"></a>1005 继续（3n+1）猜想</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure><div class="note success">我的想法应该算是暴力吧，把每一个数的（3n+1）猜想都求一次，然后将求出的所有结果记录在一个集合里（set集合可以按从小到大排序，提出重复元素），然后将这个集合和原始集合求差集，即可找出“关键数”。<br><br>注意：需要掌握set集合的声明和调用方法，必须用迭代器遍历，正向迭代器的声明和函数调用都不一样！</div><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; x1,x2,x;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> number;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;number;</span><br><span class="line">        num[i]=number;</span><br><span class="line">        x1.insert(number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(num[i]%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num[i]=num[i]/<span class="number">2</span>;</span><br><span class="line">                x2.insert(num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num[i]%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num[i]=(<span class="number">3</span>*num[i]+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                x2.insert(num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    set_difference(x1.begin(),x1.end(),x2.begin(),x2.end(),inserter(x,x.begin()));</span><br><span class="line">    <span class="comment">//x1相对于x2的差集</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator it;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(it=x.rbegin();it!=x.rend();it++)  <span class="comment">//使用迭代器进行遍历</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*it;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;*it;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1006-换个格式输出整数"><a href="#1006-换个格式输出整数" class="headerlink" title="1006 换个格式输出整数"></a>1006 换个格式输出整数</h2><p>让我们用字母 <code>B</code> 来表示“百”、字母 <code>S</code> 表示“十”，用 <code>12...n</code> 来表示不为零的个位数字 <code>n</code>（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 <code>234</code> 应该被输出为 <code>BBSSS1234</code>，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，给出正整数 n（&lt;1000）。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，用规定的格式输出 n。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">234</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure><div class="note success">反正最大长度就是3，干脆分3中情况直接写算啦！</div><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> number;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;number;</span><br><span class="line">    <span class="keyword">if</span>(number.size()==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">int</span>(number[<span class="number">0</span>]<span class="number">-48</span>);i++)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"B"</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">int</span>(number[<span class="number">1</span>]<span class="number">-48</span>);i++)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"S"</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">int</span>(number[<span class="number">2</span>]<span class="number">-48</span>);i++)    <span class="built_in">cout</span>&lt;&lt;(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(number.size()==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">int</span>(number[<span class="number">0</span>]<span class="number">-48</span>);i++)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"S"</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">int</span>(number[<span class="number">1</span>]<span class="number">-48</span>);i++)    <span class="built_in">cout</span>&lt;&lt;(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(number.size()==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">int</span>(number[<span class="number">0</span>]<span class="number">-48</span>);i++)    <span class="built_in">cout</span>&lt;&lt;(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1007-素数对猜想"><a href="#1007-素数对猜想" class="headerlink" title="1007 素数对猜想"></a>1007 素数对猜想</h2><p>让我们定义dn为：dn=pn+1−pn，其中pi是第i个素数。显然有d1=1，且对于n&gt;1有dn是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数<code>N</code>(&lt;105)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出正整数<code>N</code>。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><div class="note success">一开始我先写了一个函数，用vector存储n以内的所有素数，然后再双循环比较两者只差是否为2，但是当n为10的5次方时超时了，被扣了2分。<br><br>后来看了网上的答案才发现，二重循环的时候不用验证到i，验证到&lt;=i*i就可以了。因为，比如要判断10是不是素数，只用看它能不能被2,3,4整除就可以了，5乘以比5大的数都超过10了，乘以比5小的数才可能是10。</div><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,counts=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>,b=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)  flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a=b;</span><br><span class="line">            b=i;</span><br><span class="line">            <span class="keyword">if</span>(b-a==<span class="number">2</span>)  counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;counts&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1008-数组元素循环右移问题"><a href="#1008-数组元素循环右移问题" class="headerlink" title="1008 数组元素循环右移问题"></a>1008 数组元素循环右移问题</h2><p>一个数组A中存有N（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由（A0A1⋯AN−1）变换为（AN−M⋯AN−1A0A1⋯AN−M−1）（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 6 1 2 3 4</span><br></pre></td></tr></table></figure><div class="note success">感觉很简单，按照题目要求交了，结果有两组样例没通过，又检查了半天发现，m的范围是大于0，如果超过n，就需要移动好几轮，所以m应该取成m%n。</div><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    m=m%n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n-m;i&lt;n;i++)  <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-m<span class="number">-1</span>;i++)    <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num[n-m<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1009-说反话"><a href="#1009-说反话" class="headerlink" title="1009 说反话"></a>1009 说反话</h2><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><h3 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h3><p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p><h3 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，输出倒序后的句子。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure><div class="note success">C++里面的cin不能读入空格，就算用getline读入，也还要分割，有点麻烦。<br><br>不如用python，只需要四行代码~按逗号分割开来存入list，然后反序输出，关键是输入格式，最后一个单词后面不能有空格，在网上找的方法，使用join函数，意思是把输出字符之间用空格分隔开输出。</div><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = input()</span><br><span class="line">li = s.split(<span class="string">" "</span>)</span><br><span class="line">li.reverse()</span><br><span class="line">print(<span class="string">" "</span>.join(i <span class="keyword">for</span> i <span class="keyword">in</span> li))</span><br></pre></td></tr></table></figure><h2 id="1010-一元多项式求导"><a href="#1010-一元多项式求导" class="headerlink" title="1010 一元多项式求导"></a>1010 一元多项式求导</h2><p>设计函数求一元多项式的导数。（注：xn（n为整数）的一阶导数为nxn−1。）</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p><h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure><h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure><div class="note success">感觉最大的难点就是输入和输出的格式问题，还有一开始没读懂题目意思，不知道啥时候要输出“0 0”，其实就是如果整个多项式求导之后的结果是0，就输出“0 0”，如果某一项的系数是0，这一项就不用输出了。<br><br>今天才发现用while(cin&gt;&gt;a&gt;&gt;b)，这种方式不会自己停下来，不过没有关系，只要主函数有return 0就不影响得分。</div><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;a*b&lt;&lt;<span class="string">" "</span>&lt;&lt;b<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;a*b&lt;&lt;<span class="string">" "</span>&lt;&lt;b<span class="number">-1</span>;flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"0 0"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2011—1020"><a href="#2011—1020" class="headerlink" title="2011—1020"></a>2011—1020</h1><h2 id="2011-A-B和C"><a href="#2011-A-B和C" class="headerlink" title="2011 A+B和C"></a>2011 A+B和C</h2><p>给定区间 [−231,231] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。</p><h3 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</p><h3 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 A+B&gt;C，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p><h3 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure><h3 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure><div class="note success">简单！没有一次过，竟然是因为“Case”的c没有大写！注意细节！</div><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a,b,c;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        <span class="keyword">if</span>(a+b&gt;c)   <span class="built_in">cout</span>&lt;&lt;<span class="string">"true"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;<span class="string">"false"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1012-数字分类"><a href="#1012-数字分类" class="headerlink" title="1012 数字分类"></a>1012 数字分类</h2><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p><ul><li>A1 = 能被 5 整除的数字中所有偶数的和；</li><li>A2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 n1−n2+n3−n4⋯；</li><li>A3 = 被 5 除后余 2 的数字的个数；</li><li>A4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li><li>A5 = 被 5 除后余 4 的数字中最大数字。</li></ul><h3 id="输入格式：-5"><a href="#输入格式：-5" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p><h3 id="输出格式：-5"><a href="#输出格式：-5" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对给定的 N 个正整数，按题目要求计算 A1~A5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p><p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p><h3 id="输入样例-1：-1"><a href="#输入样例-1：-1" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-1"><a href="#输出样例-1：-1" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-1"><a href="#输入样例-2：-1" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-1"><a href="#输出样例-2：-1" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N 11 2 N 9</span><br></pre></td></tr></table></figure><div class="note success">简单，就是一大推if，分类讨论，按照格式输出。</div><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">int</span> n,res1=<span class="number">0</span>,res2=<span class="number">0</span>,res3=<span class="number">0</span>,res5=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag1=<span class="number">0</span>,flag2=<span class="number">0</span>,flag3=<span class="number">0</span>,flag4=<span class="number">0</span>,flag5=<span class="number">0</span>,counts=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> res4=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x[i];</span><br><span class="line">        <span class="keyword">if</span>(x[i]%<span class="number">10</span>==<span class="number">0</span>)  &#123;res1+=x[i];flag1=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(x[i]%<span class="number">5</span>==<span class="number">1</span>)  &#123;res2=res2+flag*x[i];flag=-flag;flag2=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(x[i]%<span class="number">5</span>==<span class="number">2</span>)  &#123;res3++;flag3=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(x[i]%<span class="number">5</span>==<span class="number">3</span>)  &#123;res4+=x[i];counts++;flag4=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(x[i]%<span class="number">5</span>==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[i]&gt;res5)   res5=x[i];</span><br><span class="line">            flag5=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag1==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag1!=<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;res1&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag2==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag2!=<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;res2&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag3==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag3!=<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;res3&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag4==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag4!=<span class="number">0</span>)    &#123;<span class="built_in">printf</span>(<span class="string">"%.1f"</span>,res4/counts);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(flag5==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"N"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag5!=<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;res5&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1013-数素数"><a href="#1013-数素数" class="headerlink" title="1013 数素数"></a>1013 数素数</h2><p>令 Pi 表示第 i 个素数。现任给两个正整数 M≤N≤104，请输出 PM 到 PN 的所有素数。</p><h3 id="输入格式：-6"><a href="#输入格式：-6" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出 M 和 N，其间以空格分隔。</p><h3 id="输出格式：-6"><a href="#输出格式：-6" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 PM 到 PN 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p><h3 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 27</span><br></pre></td></tr></table></figure><h3 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11 13 17 19 23 29 31 37 41 43</span><br><span class="line">47 53 59 61 67 71 73 79 83 89</span><br><span class="line">97 101 103</span><br></pre></td></tr></table></figure><div class="note success">素数的判断依然是j*j&lt;=i，然后暴力计数就可以过啦。</div><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> counts=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">104730</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)  flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">            <span class="keyword">if</span>(counts&gt;=a &amp;&amp; counts&lt;=b &amp;&amp; (counts-a+<span class="number">1</span>)%<span class="number">10</span>==<span class="number">1</span>)   &#123;<span class="built_in">cout</span>&lt;&lt;i;&#125;</span><br><span class="line">            <span class="keyword">if</span>(counts&gt;=a &amp;&amp; counts&lt;=b &amp;&amp; (counts-a+<span class="number">1</span>)%<span class="number">10</span>&gt;<span class="number">1</span> &amp;&amp; (counts-a+<span class="number">1</span>)%<span class="number">10</span>&lt;=<span class="number">9</span>)  &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i;&#125;</span><br><span class="line">            <span class="keyword">if</span>(counts&gt;=a &amp;&amp; counts&lt;=b &amp;&amp; (counts-a+<span class="number">1</span>)%<span class="number">10</span>==<span class="number">0</span>) &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1014-福尔摩斯的约会"><a href="#1014-福尔摩斯的约会" class="headerlink" title="1014 福尔摩斯的约会"></a>1014 福尔摩斯的约会</h2><p>大侦探福尔摩斯接到一张奇怪的字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间<code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p><h3 id="输入格式：-7"><a href="#输入格式：-7" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p><h3 id="输出格式：-7"><a href="#输出格式：-7" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p><h3 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djDkxh4hhGE </span><br><span class="line">2984akDfkkkkggEdsb </span><br><span class="line">s&amp;hgsfdk </span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><h3 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure><div class="note success">这一题很繁琐，各种条件都要考虑到，还有输出格式，小于0的数前面要补0。<br><br>还有个问题是判断小时的那里，是判断天数之后的下一对相同的数字或大写字母。</div><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str1,str2,str3,str4;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str1&gt;&gt;str2&gt;&gt;str3&gt;&gt;str4;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,hour;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;str1.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[i]==str2[i] &amp;&amp; str1[i]&gt;=<span class="string">'A'</span> &amp;&amp; str1[i]&lt;=<span class="string">'G'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(str1[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'A'</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"MON "</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'B'</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"TUE "</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'C'</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"WED "</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'D'</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"THU "</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'E'</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"FRI "</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'F'</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"SAT "</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'G'</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"SUN "</span>;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;str1.size();j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[j]==str2[j] &amp;&amp; str1[j]&gt;=<span class="string">'0'</span> &amp;&amp; str1[j]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            hour=str1[j]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;hour&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;str1.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str1[j]==str2[j] &amp;&amp; str1[j]&gt;=<span class="string">'A'</span> &amp;&amp; str1[j]&lt;=<span class="string">'N'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                hour=str1[j]-<span class="string">'A'</span>+<span class="number">10</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;hour&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;str3.size();k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str3[k]==str4[k] &amp;&amp; (str3[k]&gt;=<span class="string">'a'</span> &amp;&amp; str3[k]&lt;=<span class="string">'z'</span>) || (str3[k]&gt;=<span class="string">'A'</span> &amp;&amp; str3[k]&lt;=<span class="string">'Z'</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;<span class="number">10</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;k&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(k&gt;=<span class="number">10</span>)   &#123;<span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1015-德才论"><a href="#1015-德才论" class="headerlink" title="1015 德才论"></a>1015 德才论</h2><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p><h3 id="输入格式：-8"><a href="#输入格式：-8" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出 3 个正整数，分别为：N（≤105），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。</p><p>随后 N 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p><h3 id="输出格式：-8"><a href="#输出格式：-8" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p><h3 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">14 60 80</span><br><span class="line">10000001 64 90</span><br><span class="line">10000002 90 60</span><br><span class="line">10000011 85 80</span><br><span class="line">10000003 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000005 82 77</span><br><span class="line">10000006 83 76</span><br><span class="line">10000007 90 78</span><br><span class="line">10000008 75 79</span><br><span class="line">10000009 59 90</span><br><span class="line">10000010 88 45</span><br><span class="line">10000012 80 100</span><br><span class="line">10000013 90 99</span><br><span class="line">10000014 66 60</span><br></pre></td></tr></table></figure><h3 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">10000013 90 99</span><br><span class="line">10000012 80 100</span><br><span class="line">10000003 85 80</span><br><span class="line">10000011 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000007 90 78</span><br><span class="line">10000006 83 76</span><br><span class="line">10000005 82 77</span><br><span class="line">10000002 90 60</span><br><span class="line">10000014 66 60</span><br><span class="line">10000008 75 79</span><br><span class="line">10000001 64 90</span><br></pre></td></tr></table></figure><div class="note success">结构体排序问题，还需要熟悉一下结构体排序规则的那个bool类型的函数呀，其他的问题不大。还有个问题就是一开始结构体数组开小了，会提示“段错误”，像这种10的5次方的结构体数组还是开在main函数外面比较保险。</div><h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">students</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span> score1;</span><br><span class="line">    <span class="keyword">int</span> score2;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Cmpare</span><span class="params">(<span class="keyword">const</span> students &amp;a, <span class="keyword">const</span> students &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.level!=b.level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.level&lt;b.level;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.level==b.level)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.score1+a.score2!=b.score1+b.score2)</span><br><span class="line">            <span class="keyword">return</span> a.score1+a.score2 &gt; b.score1+b.score2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.score1+a.score2==b.score1+b.score2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.score1!=b.score1)  <span class="keyword">return</span> a.score1&gt;b.score1;</span><br><span class="line">            <span class="keyword">else</span>    <span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">students stu[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,l,h;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;h;</span><br><span class="line">    <span class="keyword">int</span> counts=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;stu[i].id&gt;&gt;stu[i].score1&gt;&gt;stu[i].score2;</span><br><span class="line">        <span class="keyword">if</span>(stu[i].score1&gt;=l &amp;&amp; stu[i].score2&gt;=l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(stu[i].score1&gt;=h &amp;&amp; stu[i].score2&gt;=h)    stu[i].level=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stu[i].score1&gt;=h &amp;&amp; stu[i].score2&lt;h)    stu[i].level=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(stu[i].score1&lt;h &amp;&amp; stu[i].score2&lt;h &amp;&amp; stu[i].score1&gt;=stu[i].score2) stu[i].level=<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span>    stu[i].level=<span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;stu[i].level=<span class="number">5</span>;counts++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu,stu+n,Cmpare);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;n-counts&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-counts;i++)    <span class="built_in">cout</span>&lt;&lt;stu[i].id&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[i].score1&lt;&lt;<span class="string">" "</span>&lt;&lt;stu[i].score2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1016-部分A-B"><a href="#1016-部分A-B" class="headerlink" title="1016 部分A+B"></a>1016 部分A+B</h2><p>正整数 A 的“DA（为 1 位整数）部分”定义为由 A 中所有 DA 组成的新整数 PA。例如：给定 A=3862767，DA=6，则 A 的“6 部分”PA 是 66，因为 A 中有 2 个 6。</p><p>现给定 A、DA、B、DB，请编写程序计算 PA+PB。</p><h3 id="输入格式：-9"><a href="#输入格式：-9" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 A、DA、B、DB，中间以空格分隔，其中 0&lt;A,B&lt;1010。</p><h3 id="输出格式：-9"><a href="#输出格式：-9" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出 PA+PB 的值。</p><h3 id="输入样例-1：-2"><a href="#输入样例-1：-2" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3862767 6 13530293 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-2"><a href="#输出样例-1：-2" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">399</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-2"><a href="#输入样例-2：-2" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3862767 1 13530293 8</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-2"><a href="#输出样例-2：-2" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><div class="note success">先定义了一个函数，用来求10的n次方，然后分别数数字出现的个数，最后求和。<br><br>后来想起来可以用c++的pow函数直接求x的y次方，但是需要注意的是，pow函数传入的是double类型，输出也是double类型，如果用int输入可能会不准确。</div><h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ten</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=sum*<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="keyword">char</span> x1,x2;</span><br><span class="line">    <span class="keyword">int</span> count1=<span class="number">0</span>,count2=<span class="number">0</span>,sum1=<span class="number">0</span>,sum2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;x1&gt;&gt;b&gt;&gt;x2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++) &#123;<span class="keyword">if</span>(a[i]==x1)    count1++;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++) &#123;<span class="keyword">if</span>(b[i]==x2)    count2++;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=count1;i++)  &#123;sum1+=ten(i<span class="number">-1</span>)*(x1-<span class="string">'0'</span>);&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=count2;i++)  &#123;sum2+=ten(i<span class="number">-1</span>)*(x2-<span class="string">'0'</span>);&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum1+sum2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1017-A除以B"><a href="#1017-A除以B" class="headerlink" title="1017 A除以B"></a>1017 A除以B</h2><p>本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。</p><h3 id="输入格式：-10"><a href="#输入格式：-10" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 A 和 B，中间以 1 空格分隔。</p><h3 id="输出格式：-10"><a href="#输出格式：-10" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中依次输出 Q 和 R，中间以 1 空格分隔。</p><h3 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123456789050987654321 7</span><br></pre></td></tr></table></figure><h3 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17636684150141093474 3</span><br></pre></td></tr></table></figure><div class="note success">大整数除法的题目。之前没敲过，看了一下网上的代码，就是手算除法的思路，做了一个模拟。用python可以不用模拟，直接使用“//“运算符，除法取整数，只要两行代码，十分简单。</div><h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><p>C++：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b,flag=<span class="number">0</span>,temp=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=temp*<span class="number">10</span>+a[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp&gt;=b) &#123;<span class="built_in">cout</span>&lt;&lt;temp/b;flag=<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line">        temp=temp%b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> input().split()]</span><br><span class="line">    print(str(a[<span class="number">0</span>] // a[<span class="number">1</span>]) + <span class="string">" "</span> + str(a[<span class="number">0</span>] % a[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h2 id="1018-锤子剪刀布"><a href="#1018-锤子剪刀布" class="headerlink" title="1018 锤子剪刀布"></a>1018 锤子剪刀布</h2><p>大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：</p><p><img src="https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg" alt="FigCJB.jpg"></p><p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p><h3 id="输入格式：-11"><a href="#输入格式：-11" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第 1 行给出正整数 N（≤105），即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。<code>C</code> 代表“锤子”、<code>J</code> 代表“剪刀”、<code>B</code> 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p><h3 id="输出格式：-11"><a href="#输出格式：-11" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p><h3 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure><h3 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure><div class="note success">没啥难点，却做了很久，一开始想复杂了，没想清楚那个统计出现最多的次数要怎么搞，其实用两个数组记录就可以了。</div><h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,win1=<span class="number">0</span>,win2=<span class="number">0</span>,same=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> player1[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> player2[<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> a,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'C'</span> &amp;&amp; b==<span class="string">'J'</span>)    &#123;win1++;player1[<span class="number">1</span>]++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'C'</span> &amp;&amp; b==<span class="string">'B'</span>)    &#123;win2++;player2[<span class="number">0</span>]++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'J'</span> &amp;&amp; b==<span class="string">'C'</span>)    &#123;win2++;player2[<span class="number">1</span>]++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'J'</span> &amp;&amp; b==<span class="string">'B'</span>)    &#123;win1++;player1[<span class="number">2</span>]++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'B'</span> &amp;&amp; b==<span class="string">'C'</span>)    &#123;win1++;player1[<span class="number">0</span>]++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="string">'B'</span> &amp;&amp; b==<span class="string">'J'</span>)    &#123;win2++;player2[<span class="number">2</span>]++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(a==b)    &#123;same++;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max1=player1[<span class="number">0</span>]&gt;=player1[<span class="number">1</span>]?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">    max1=player1[max1]&gt;=player1[<span class="number">2</span>]?max1:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max2=player2[<span class="number">0</span>]&gt;=player2[<span class="number">1</span>]?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">    max2=player2[max2]&gt;=player2[<span class="number">2</span>]?max2:<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">4</span>]=&#123;<span class="string">"BCJ"</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;win1&lt;&lt;<span class="string">" "</span>&lt;&lt;same&lt;&lt;<span class="string">" "</span>&lt;&lt;n-win1-same&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;win2&lt;&lt;<span class="string">" "</span>&lt;&lt;same&lt;&lt;<span class="string">" "</span>&lt;&lt;n-win2-same&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;str[max1]&lt;&lt;<span class="string">" "</span>&lt;&lt;str[max2]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1019-数字黑洞"><a href="#1019-数字黑洞" class="headerlink" title="1019 数字黑洞"></a>1019 数字黑洞</h2><p>给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 <code>6174</code>，这个神奇的数字也叫 Kaprekar 常数。</p><p>例如，我们从<code>6767</code>开始，将得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line">7641 - 1467 = 6174</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</p><h3 id="输入格式：-12"><a href="#输入格式：-12" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入给出一个 (0,104) 区间内的正整数 N。</p><h3 id="输出格式：-12"><a href="#输出格式：-12" class="headerlink" title="输出格式："></a>输出格式：</h3><p>如果 N 的 4 位数字全相等，则在一行内输出 <code>N - N = 0000</code>；否则将计算的每一步在一行内输出，直到 <code>6174</code> 作为差出现，输出格式见样例。注意每个数字按 <code>4</code> 位数格式输出。</p><h3 id="输入样例-1：-3"><a href="#输入样例-1：-3" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6767</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-3"><a href="#输出样例-1：-3" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-3"><a href="#输入样例-2：-3" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2222</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-3"><a href="#输出样例-2：-3" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2222 - 2222 = 0000</span><br></pre></td></tr></table></figure><div class="note success">关键问题就是字符串格式和数字之间的转换、排序、补零，一开始用数组做的，一直没有满分，后来看了网上的代码，string 数据类型也可以排序，然后用to_string()函数把数组转成字符串，用stoi()函数把字符串转成数字。</div><h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span> </span>&#123;<span class="keyword">return</span> a &gt; b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    s.insert(<span class="number">0</span>, <span class="number">4</span> - s.length(), <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> a = s, b = s;</span><br><span class="line">        sort(a.begin(), a.end(), cmp);</span><br><span class="line">        sort(b.begin(), b.end());</span><br><span class="line">        <span class="keyword">int</span> result = stoi(a) - stoi(b);</span><br><span class="line">        s = to_string(result);</span><br><span class="line">        s.insert(<span class="number">0</span>, <span class="number">4</span> - s.length(), <span class="string">'0'</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" - "</span> &lt;&lt; b &lt;&lt; <span class="string">" = "</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">"6174"</span> || s==<span class="string">"0000"</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1020-月饼"><a href="#1020-月饼" class="headerlink" title="1020 月饼"></a>1020 月饼</h2><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p><p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。</p><h3 id="输入格式：-13"><a href="#输入格式：-13" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p><h3 id="输出格式：-13"><a href="#输出格式：-13" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p><h3 id="输入样例：-9"><a href="#输入样例：-9" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 20</span><br><span class="line">18 15 10</span><br><span class="line">75 72 45</span><br></pre></td></tr></table></figure><h3 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">94.50</span><br></pre></td></tr></table></figure><div class="note success">结构体和排序的问题，需要注意的是除法计算出来的单价不是很准确，求和的时候尽量不要用单价，避免有误差。</div><h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mooncake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> number;</span><br><span class="line">    <span class="keyword">float</span> money;</span><br><span class="line">    <span class="keyword">float</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> mooncake &amp;a,<span class="keyword">const</span> mooncake &amp;b)</span>   </span>&#123;<span class="keyword">return</span> a.price&gt;=b.price;&#125;</span><br><span class="line">mooncake cakes[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j,n,d,total=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> m=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;cakes[i].number;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;cakes[i].money;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)    cakes[i].price=cakes[i].money/cakes[i].number;</span><br><span class="line">    sort(cakes,cakes+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        total+=cakes[j].number;</span><br><span class="line">        m+=cakes[j].money;</span><br><span class="line">        <span class="keyword">if</span>(total&gt;=d)  <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(total&gt;d)</span><br><span class="line">    &#123;</span><br><span class="line">        total-=cakes[j].number;</span><br><span class="line">        m-=cakes[j].money;</span><br><span class="line">        <span class="keyword">int</span> temp=d-total;</span><br><span class="line">        m+=cakes[j].money/(cakes[j].number/temp);</span><br><span class="line">        <span class="comment">//m-=cakes[j].price/(cakes[j].number/(total-d));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1021—1030"><a href="#1021—1030" class="headerlink" title="1021—1030"></a>1021—1030</h1><h2 id="1021-个位数统计"><a href="#1021-个位数统计" class="headerlink" title="1021 个位数统计"></a>1021 个位数统计</h2><p>给定一个 k 位整数 N=dk−110k−1+⋯+d1101+d0 (0≤di≤9, i=0,⋯,k−1, dk−1&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 N=100311，则有 2 个 0，3 个 1，和 1 个 3。</p><h3 id="输入格式：-14"><a href="#输入格式：-14" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 N。</p><h3 id="输出格式：-14"><a href="#输出格式：-14" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对 N 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 N 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p><h3 id="输入样例：-10"><a href="#输入样例：-10" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100311</span><br></pre></td></tr></table></figure><h3 id="输出样例：-10"><a href="#输出样例：-10" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:2</span><br><span class="line">1:3</span><br><span class="line">3:1</span><br></pre></td></tr></table></figure><div class="note success">用一个数组存储每一个数字出现的次数即可。</div><h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum[<span class="number">15</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> number;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;number;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;number.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[number[i]-<span class="string">'0'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">":"</span>&lt;&lt;sum[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1022-D进制的A-B"><a href="#1022-D进制的A-B" class="headerlink" title="1022 D进制的A+B"></a>1022 D进制的A+B</h2><p>输入两个非负 10 进制整数 A 和 B (≤230−1)，输出 A+B 的 D (1&lt;D≤10)进制数。</p><h3 id="输入格式：-15"><a href="#输入格式：-15" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 3 个整数 A、B 和 D。</p><h3 id="输出格式：-15"><a href="#输出格式：-15" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出 A+B 的 D 进制数。</p><h3 id="输入样例：-11"><a href="#输入样例：-11" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 8</span><br></pre></td></tr></table></figure><h3 id="输出样例：-11"><a href="#输出样例：-11" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1103</span><br></pre></td></tr></table></figure><div class="note success">进制转换类型我做的还不是很熟练，几进制就是除以几的余数，然后不断除以这个数直到商是0为止。</div><h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,d;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;d;</span><br><span class="line">    <span class="keyword">int</span> sum=a+b;</span><br><span class="line">    <span class="keyword">int</span> ans[<span class="number">31</span>],num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        ans[num++]=sum%d;</span><br><span class="line">        sum=sum/d;</span><br><span class="line">    &#125;<span class="keyword">while</span>(sum!=<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)   <span class="built_in">cout</span>&lt;&lt;ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1023-组个最小数"><a href="#1023-组个最小数" class="headerlink" title="1023 组个最小数"></a>1023 组个最小数</h2><p>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。</p><p>现给定数字，请编写程序输出能够组成的最小的数。</p><h3 id="输入格式：-16"><a href="#输入格式：-16" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。</p><h3 id="输出格式：-16"><a href="#输出格式：-16" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出能够组成的最小的数。</p><h3 id="输入样例：-12"><a href="#输入样例：-12" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 0 0 0 3 0 0 1 0</span><br></pre></td></tr></table></figure><h3 id="输出样例：-12"><a href="#输出样例：-12" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10015558</span><br></pre></td></tr></table></figure><div class="note success">先找到非0的最小数并输出，然后输入所有的0（如果有的话），然后按从小到大的顺序输出其他数。</div><h3 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)  <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">            t=i;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a[<span class="number">0</span>];i++) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a[t]<span class="number">-1</span>;i++)   <span class="built_in">cout</span>&lt;&lt;t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=t+<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a[i];j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1024-科学计数法"><a href="#1024-科学计数法" class="headerlink" title="1024 科学计数法"></a>1024 科学计数法</h2><p>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9]<code>.</code>[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。</p><p>现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。</p><h3 id="输入格式：-17"><a href="#输入格式：-17" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。</p><h3 id="输出格式：-17"><a href="#输出格式：-17" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。</p><h3 id="输入样例-1：-4"><a href="#输入样例-1：-4" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+1.23400E-03</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-4"><a href="#输出样例-1：-4" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.00123400</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-4"><a href="#输入样例-2：-4" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1.2E+10</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-4"><a href="#输出样例-2：-4" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-12000000000</span><br></pre></td></tr></table></figure><div class="note success">先保存E前面的字符串，然后把E后面的字符串用stoi函数转换成数字，如果是负数表示向前移动，先输出“0.”然后再看需要补多少0，如果是正数需要判断是移动小数点还是补零。</div><h3 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">'E'</span>) i++;</span><br><span class="line">    <span class="built_in">string</span> t = s.substr(<span class="number">1</span>, i<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> n = stoi(s.substr(i+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'-'</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"-"</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"0."</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">abs</span>(n) - <span class="number">1</span>; j++) <span class="built_in">cout</span> &lt;&lt; <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.length(); j++)</span><br><span class="line">            <span class="keyword">if</span> (t[j] != <span class="string">'.'</span>) <span class="built_in">cout</span> &lt;&lt; t[j];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; t[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cnt, j;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>, cnt = <span class="number">0</span>; j &lt; t.length() &amp;&amp; cnt &lt; n; j++, cnt++) <span class="built_in">cout</span> &lt;&lt; t[j];</span><br><span class="line">        <span class="keyword">if</span> (j == t.length()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - cnt; k++) <span class="built_in">cout</span> &lt;&lt; <span class="string">'0'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; t.length(); k++) <span class="built_in">cout</span> &lt;&lt; t[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1026-程序运行时间"><a href="#1026-程序运行时间" class="headerlink" title="1026 程序运行时间"></a>1026 程序运行时间</h2><p>要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 f 的运行时间，我们只要在调用 f 之前先调用 clock()，获得一个时钟打点数 C1；在 f 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 f 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。</p><p>这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p><h3 id="输入格式：-18"><a href="#输入格式：-18" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 [0,107]。</p><h3 id="输出格式：-18"><a href="#输出格式：-18" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出被测函数运行的时间。运行时间必须按照 <code>hh:mm:ss</code>（即2位的 <code>时:分:秒</code>）格式输出；不足 1 秒的时间四舍五入到秒。</p><h3 id="输入样例：-13"><a href="#输入样例：-13" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 4577973</span><br></pre></td></tr></table></figure><h3 id="输出样例：-13"><a href="#输出样例：-13" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12:42:59</span><br></pre></td></tr></table></figure><div class="note success">挺简单的，就是时间差除以100之后要做一个四舍五入的处理。</div><h3 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1,c2,hour,minute,second;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    <span class="keyword">float</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;c1&gt;&gt;c2;</span><br><span class="line">    time=(c2-c1)/<span class="number">100</span>;</span><br><span class="line">    t=(c2-c1)*<span class="number">1.0</span>/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-time&gt;=<span class="number">0.5</span>) time+=<span class="number">1</span>;</span><br><span class="line">    hour=time/<span class="number">3600</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2d"</span>,hour);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">    minute=(time%<span class="number">3600</span>)/<span class="number">60</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2d"</span>,minute);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">    second=(time%<span class="number">3600</span>)%<span class="number">60</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2d"</span>,second);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1027-打印沙漏"><a href="#1027-打印沙漏" class="headerlink" title="1027 打印沙漏"></a>1027 打印沙漏</h2><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19 *</span><br></pre></td></tr></table></figure><h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line">2</span><br></pre></td></tr></table></figure><div class="note success">计算不难，在居中打印那里卡了一下，原本想着用C++居中打印太麻烦，干脆用python的center函数直接居中打印，也不用双循环，结果交上去竟然显示格式不对，看了它的输出格式才发现只用每行前面部门补空格就行，后半部分不用补空格，最后还是用C++双循环输出。</div><h3 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,k,sum,num=<span class="number">1</span>,s=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a;</span><br><span class="line">    sum=(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num+=<span class="number">2</span>;</span><br><span class="line">        s+=num;</span><br><span class="line">        <span class="keyword">if</span>(s&gt;sum)  <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=num<span class="number">-2</span>;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=(num<span class="number">-2</span>-i)/<span class="number">2</span>;k++) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)   <span class="built_in">cout</span>&lt;&lt;a;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;=num<span class="number">-2</span>;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=(num<span class="number">-2</span>-i)/<span class="number">2</span>;k++) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)   <span class="built_in">cout</span>&lt;&lt;a;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;n-((s-num)*<span class="number">2</span>+<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1028-人口普查"><a href="#1028-人口普查" class="headerlink" title="1028 人口普查"></a>1028 人口普查</h2><p>某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。</p><p>这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。</p><h3 id="输入格式：-19"><a href="#输入格式：-19" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出正整数 N，取值在(0,105]；随后 N 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 <code>yyyy/mm/dd</code>（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。</p><h3 id="输出格式：-19"><a href="#输出格式：-19" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。</p><h3 id="输入样例：-14"><a href="#输入样例：-14" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">John 2001/05/12</span><br><span class="line">Tom 1814/09/06</span><br><span class="line">Ann 2121/01/30</span><br><span class="line">James 1814/09/05</span><br><span class="line">Steve 1967/11/20</span><br></pre></td></tr></table></figure><h3 id="输出样例：-14"><a href="#输出样例：-14" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 Tom John</span><br></pre></td></tr></table></figure><div class="note success">我是读入字符串，然后拆分了换算成年月日，然后计算2014年9月6日到出生日之间的天数来判断谁的年龄大，然后根据出生日期来判断是否符合规定，结果最后一组样例一直过不了，不知道为啥。<br><br>看了网上的答案，发现可以用字符串直接比较大小……太牛逼了。</div><h3 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">string</span> name, birth, maxname, minname, maxbirth = <span class="string">"1814/09/06"</span>, minbirth = <span class="string">"2014/09/06"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name &gt;&gt; birth;</span><br><span class="line">        <span class="keyword">if</span> (birth &gt;= <span class="string">"1814/09/06"</span> &amp;&amp; birth &lt;= <span class="string">"2014/09/06"</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (birth &gt;= maxbirth) &#123;maxbirth = birth;maxname = name;&#125;</span><br><span class="line">            <span class="keyword">if</span> (birth &lt;= minbirth) &#123;minbirth = birth;minname = name;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">if</span> (cnt != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; minname &lt;&lt; <span class="string">" "</span> &lt;&lt; maxname;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1029-旧键盘"><a href="#1029-旧键盘" class="headerlink" title="1029 旧键盘"></a>1029 旧键盘</h2><p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。</p><h3 id="输入格式：-20"><a href="#输入格式：-20" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 2 行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过 80 个字符的串，由字母 A-Z（包括大、小写）、数字 0-9、以及下划线 <code>_</code>（代表空格）组成。题目保证 2 个字符串均非空。</p><h3 id="输出格式：-20"><a href="#输出格式：-20" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键。</p><h3 id="输入样例：-15"><a href="#输入样例：-15" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7_This_is_a_test</span><br><span class="line">_hs_s_a_es</span><br></pre></td></tr></table></figure><h3 id="输出样例：-15"><a href="#输出样例：-15" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7TI</span><br></pre></td></tr></table></figure><div class="note success">感觉C++的标准模板库中STL，string用的很多，但我掌握的还不够熟练，用string定义的字符串可以直接用“+”连接增加，用toupper()函数将小写字母转成大写字母，find()函数用于查找一个字符串中的子字符串。</div><h3 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> str1,str2,ans;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str1&gt;&gt;str2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str1.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[i]!=str2[k] &amp;&amp; ans.find(<span class="built_in">toupper</span>(str1[i]))==<span class="built_in">string</span>::npos)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=<span class="built_in">toupper</span>(str1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str1[i]==str2[k])    k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1030-完美数列"><a href="#1030-完美数列" class="headerlink" title="1030 完美数列"></a>1030 完美数列</h2><p>给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。</p><p>现在给定参数 p 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。</p><h3 id="输入格式：-21"><a href="#输入格式：-21" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数 N 和 p，其中 N（≤105）是输入的正整数的个数，p（≤109）是给定的参数。第二行给出 N 个正整数，每个数不超过 109。</p><h3 id="输出格式：-21"><a href="#输出格式：-21" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。</p><h3 id="输入样例：-16"><a href="#输入样例：-16" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 8</span><br><span class="line">2 3 20 4 5 1 6 7 8 9</span><br></pre></td></tr></table></figure><h3 id="输出样例：-16"><a href="#输出样例：-16" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><div class="note success">一开始我还以为mp就是m*10+p，看了半天算出来都是9才想起mp应该是mxp……<br><br>暴力模拟有一组样例会超时，看了一下别人的答案，第二次循环的时候从i+res开始到n结束就可以了，因为是要找最大的res，如果i+res后面还有更多数，才可能更新res。</div><h3 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,counts,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;v[i];</span><br><span class="line">    sort(v,v+n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+res;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(v[j]&lt;=v[i]*p)</span><br><span class="line">            &#123;</span><br><span class="line">                counts=j-i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(counts&gt;res) res=counts;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>    <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1031—1040"><a href="#1031—1040" class="headerlink" title="1031—1040"></a>1031—1040</h1><h2 id="1031-查验身份证"><a href="#1031-查验身份证" class="headerlink" title="1031 查验身份证"></a>1031 查验身份证</h2><p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p><p>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值<code>Z</code>；最后按照以下关系对应<code>Z</code>值与校验码<code>M</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z：0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">M：1 0 X 9 8 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p><h3 id="输入格式：-22"><a href="#输入格式：-22" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。</p><h3 id="输出格式：-22"><a href="#输出格式：-22" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出<code>All passed</code>。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">320124198808240056</span><br><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">320124198808240056</span><br><span class="line">110108196711301862</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">All passed</span><br></pre></td></tr></table></figure><div class="note success">可以用两个数组来保存权重和需要比较的值，先写一个函数判断是否满足要求，然后一个一个读入判断。</div><h3 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">17</span>] = &#123;<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">11</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> id;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">istrue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">17</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(id[i]&lt;<span class="string">'0'</span> || id[i]&gt;<span class="string">'9'</span>)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        sum+=(id[i]-<span class="string">'0'</span>)*a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp=(id[<span class="number">17</span>]==<span class="string">'X'</span>)?<span class="number">10</span>:(id[<span class="number">17</span>]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> b[sum%<span class="number">11</span>]==temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;id;</span><br><span class="line">        <span class="keyword">if</span>(!istrue())   &#123;<span class="built_in">cout</span>&lt;&lt;id&lt;&lt;<span class="built_in">endl</span>;flag=<span class="number">1</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"All passed"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1032-挖掘机技术哪家强"><a href="#1032-挖掘机技术哪家强" class="headerlink" title="1032 挖掘机技术哪家强"></a>1032 挖掘机技术哪家强</h2><p>为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p><h3 id="输入格式：-23"><a href="#输入格式：-23" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行给出不超过 105 的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p><h3 id="输出格式：-23"><a href="#输出格式：-23" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p><h3 id="输入样例：-17"><a href="#输入样例：-17" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 65</span><br><span class="line">2 80</span><br><span class="line">1 100</span><br><span class="line">2 70</span><br><span class="line">3 40</span><br><span class="line">3 0</span><br></pre></td></tr></table></figure><h3 id="输出样例：-17"><a href="#输出样例：-17" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 150</span><br></pre></td></tr></table></figure><div class="note success">一个数组就可以搞定，千万别想着上结构体或者两个数组……</div><h3 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> score[<span class="number">100005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b,max_score=<span class="number">0</span>,max_id=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        score[a]+=b;</span><br><span class="line">        <span class="keyword">if</span>(score[a]&gt;=max_score) &#123;max_score=score[a];max_id=a;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;max_id&lt;&lt;<span class="string">" "</span>&lt;&lt;max_score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1033-旧键盘打字"><a href="#1033-旧键盘打字" class="headerlink" title="1033 旧键盘打字"></a>1033 旧键盘打字</h2><p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p><h3 id="输入格式：-24"><a href="#输入格式：-24" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 105 个字符的串。可用的字符包括字母 [<code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>]、数字 <code>0</code>-<code>9</code>、以及下划线 <code>_</code>（代表空格）、<code>,</code>、<code>.</code>、<code>-</code>、<code>+</code>（代表上档键）。题目保证第 2 行输入的文字串非空。</p><p>注意：如果上档键坏掉了，那么大写的英文字母无法被打出。</p><h3 id="输出格式：-24"><a href="#输出格式：-24" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。</p><h3 id="输入样例：-18"><a href="#输入样例：-18" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7+IE.</span><br><span class="line">7_This_is_a_test.</span><br></pre></td></tr></table></figure><h3 id="输出样例：-18"><a href="#输出样例：-18" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_hs_s_a_tst</span><br></pre></td></tr></table></figure><div class="note success">第一次交上去有一个测试点没过，被扣了一分，原因是有可能第一个字符串是空串（太坑了！）于是就不能用cin读入两个字符串，而是用getline(cin,str)的方式读入，只要读到换行就算读入了一个字符串。</div><h3 id="代码-28"><a href="#代码-28" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> broken,str,ans;</span><br><span class="line">    getline(<span class="built_in">cin</span>,broken);</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;broken.size();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i]==broken[j] || str[i]==<span class="built_in">tolower</span>(broken[j])) flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(str[i]&gt;=<span class="string">'A'</span> &amp;&amp; str[i]&lt;=<span class="string">'Z'</span> &amp;&amp; broken.find(<span class="string">'+'</span>)!=<span class="built_in">string</span>::npos)    flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>) ans+=str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1036-跟奥巴马一起编程"><a href="#1036-跟奥巴马一起编程" class="headerlink" title="1036 跟奥巴马一起编程"></a>1036 跟奥巴马一起编程</h2><p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p><h3 id="输入格式：-25"><a href="#输入格式：-25" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出正方形边长 N（3≤N≤20）和组成正方形边的某种字符 C，间隔一个空格。</p><h3 id="输出格式：-25"><a href="#输出格式：-25" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。</p><h3 id="输入样例：-19"><a href="#输入样例：-19" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure><h3 id="输出样例：-19"><a href="#输出样例：-19" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure><div class="note success">双循环输出，四周输入字符，中间输出空格。注意是四舍五入，因为是除以2，所以如果有余数肯定就得加1。</div><h3 id="代码-29"><a href="#代码-29" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>!=<span class="number">0</span>)  m=(n/<span class="number">2</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)  m=n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">1</span> &amp;&amp; i&lt;(m<span class="number">-1</span>) &amp;&amp; j&gt;=<span class="number">1</span> &amp;&amp; j&lt;n<span class="number">-1</span>)   <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1037-在霍格沃茨找零钱"><a href="#1037-在霍格沃茨找零钱" class="headerlink" title="1037 在霍格沃茨找零钱"></a>1037 在霍格沃茨找零钱</h2><p>如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。</p><h3 id="输入格式：-26"><a href="#输入格式：-26" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 1 行中分别给出 P 和 A，格式为 <code>Galleon.Sickle.Knut</code>，其间用 1 个空格分隔。这里 <code>Galleon</code> 是 [0, 107] 区间内的整数，<code>Sickle</code> 是 [0, 17) 区间内的整数，<code>Knut</code> 是 [0, 29) 区间内的整数。</p><h3 id="输出格式：-26"><a href="#输出格式：-26" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。</p><h3 id="输入样例-1：-5"><a href="#输入样例-1：-5" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.16.27 14.1.28</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-5"><a href="#输出样例-1：-5" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.2.1</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-5"><a href="#输入样例-2：-5" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14.1.28 10.16.27</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-5"><a href="#输出样例-2：-5" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-3.2.1</span><br></pre></td></tr></table></figure><div class="note success">为了避免出现进位的问题，我直接全部转换成最小的单位，相减之后再除和取模。</div><h3 id="代码-30"><a href="#代码-30" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pg,ps,pk,ag,as,ak;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d.%d.%d %d.%d.%d"</span>,&amp;pg,&amp;ps,&amp;pk,&amp;ag,&amp;as,&amp;ak);</span><br><span class="line">    <span class="keyword">int</span> P=pg*<span class="number">17</span>*<span class="number">29</span>+ps*<span class="number">29</span>+pk;</span><br><span class="line">    <span class="keyword">int</span> A=ag*<span class="number">17</span>*<span class="number">29</span>+as*<span class="number">29</span>+ak;</span><br><span class="line">    <span class="keyword">int</span> res=A-P;</span><br><span class="line">    <span class="keyword">int</span> resg=res/(<span class="number">17</span>*<span class="number">29</span>);</span><br><span class="line">    <span class="keyword">int</span> ress=(res%(<span class="number">17</span>*<span class="number">29</span>))/<span class="number">29</span>;</span><br><span class="line">    <span class="keyword">int</span> resk=(res%(<span class="number">17</span>*<span class="number">29</span>*<span class="number">29</span>))%<span class="number">29</span>;</span><br><span class="line">    <span class="keyword">if</span>(res&gt;=<span class="number">0</span>)  <span class="built_in">cout</span>&lt;&lt;resg&lt;&lt;<span class="string">"."</span>&lt;&lt;ress&lt;&lt;<span class="string">"."</span>&lt;&lt;resk&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;<span class="string">"-"</span>&lt;&lt;-resg&lt;&lt;<span class="string">"."</span>&lt;&lt;-ress&lt;&lt;<span class="string">"."</span>&lt;&lt;-resk&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1038-统计同成绩学生"><a href="#1038-统计同成绩学生" class="headerlink" title="1038 统计同成绩学生"></a>1038 统计同成绩学生</h2><p>本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。</p><h3 id="输入格式：-27"><a href="#输入格式：-27" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行给出不超过 105 的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。</p><h3 id="输出格式：-27"><a href="#输出格式：-27" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。</p><h3 id="输入样例：-20"><a href="#输入样例：-20" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">60 75 90 55 75 99 82 90 75 50</span><br><span class="line">3 75 90 88</span><br></pre></td></tr></table></figure><h3 id="输出样例：-20"><a href="#输出样例：-20" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 2 0</span><br></pre></td></tr></table></figure><div class="note success">非常简单的题目，竟然最后一个测试点运行超时（……）结果把读入换成scanf就可以通过了，什么垃圾题目。</div><h3 id="代码-31"><a href="#代码-31" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n,m,a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">        s[a]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)    <span class="built_in">cout</span>&lt;&lt;s[b];</span><br><span class="line">        <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;s[b];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1039-到底买不买"><a href="#1039-到底买不买" class="headerlink" title="1039 到底买不买"></a>1039 到底买不买</h2><p>小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。</p><p>为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。</p><p><img src="https://images.ptausercontent.com/b7e2ffa6-8819-436d-ad79-a41263abe914.jpg" alt="figbuy.jpg"></p><p>图 1</p><h3 id="输入格式：-28"><a href="#输入格式：-28" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。</p><h3 id="输出格式：-28"><a href="#输出格式：-28" class="headerlink" title="输出格式："></a>输出格式：</h3><p>如果可以买，则在一行中输出 <code>Yes</code> 以及有多少多余的珠子；如果不可以买，则在一行中输出 <code>No</code> 以及缺了多少珠子。其间以 1 个空格分隔。</p><h3 id="输入样例-1：-6"><a href="#输入样例-1：-6" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ppRYYGrrYBR2258</span><br><span class="line">YrR8RrY</span><br></pre></td></tr></table></figure><h3 id="输出样例-1：-6"><a href="#输出样例-1：-6" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes 8</span><br></pre></td></tr></table></figure><h3 id="输入样例-2：-6"><a href="#输入样例-2：-6" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ppRYYGrrYB225</span><br><span class="line">YrR8RrY</span><br></pre></td></tr></table></figure><h3 id="输出样例-2：-6"><a href="#输出样例-2：-6" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No 2</span><br></pre></td></tr></table></figure><div class="note success">还是数组的问题，第一个字符串中出现一个，就在数组中对应存储一个，然后遍历第二个字符串中的每一个看数组里存的是几，对于0就说明有，用掉之后就减1，小于等于0就说明没有，就把缺少的个数增加1。</div><h3 id="代码-32"><a href="#代码-32" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> lose=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++) book[a[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(book[b[i]]&gt;<span class="number">0</span>)   book[b[i]]--;</span><br><span class="line">        <span class="keyword">else</span>   lose++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lose==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;a.size()-b.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;lose&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1040-有几个PAT"><a href="#1040-有几个PAT" class="headerlink" title="1040 有几个PAT"></a>1040 有几个PAT</h2><p>字符串 <code>APPAPT</code> 中包含了两个单词 <code>PAT</code>，其中第一个 <code>PAT</code> 是第 2 位(<code>P</code>)，第 4 位(<code>A</code>)，第 6 位(<code>T</code>)；第二个 <code>PAT</code> 是第 3 位(<code>P</code>)，第 4 位(<code>A</code>)，第 6 位(<code>T</code>)。</p><p>现给定字符串，问一共可以形成多少个 <code>PAT</code>？</p><h3 id="输入格式：-29"><a href="#输入格式：-29" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入只有一行，包含一个字符串，长度不超过105，只包含 <code>P</code>、<code>A</code>、<code>T</code> 三种字母。</p><h3 id="输出格式：-29"><a href="#输出格式：-29" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出给定字符串中包含多少个 <code>PAT</code>。由于结果可能比较大，只输出对 1000000007 取余数的结果。</p><h3 id="输入样例：-21"><a href="#输入样例：-21" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPAPT</span><br></pre></td></tr></table></figure><h3 id="输出样例：-21"><a href="#输出样例：-21" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><div class="note success">拿到题目之后毫无头绪，看了别人的答案，瞬间搞懂：PAT的个数就等于每个A前面P的个数乘以T的个数，最后求和就可以了。所以先统计整个字符串中有多少个T，然后依次遍历字符串，遇到P就countp++，遇到T就countt–，然后遇到A就求乘积并累加取模。</div><h3 id="代码-33"><a href="#代码-33" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line">    <span class="keyword">int</span> countt=<span class="number">0</span>,countp=<span class="number">0</span>,res=<span class="number">0</span>,mod=<span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'T'</span>) countt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'P'</span>) countp++;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'T'</span>) countt--;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'A'</span>) res=(res+(countp*countt)%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1041—1045"><a href="#1041—1045" class="headerlink" title="1041—1045"></a>1041—1045</h1><h2 id="1041-考试座位号"><a href="#1041-考试座位号" class="headerlink" title="1041 考试座位号"></a>1041 考试座位号</h2><p>每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</p><h3 id="输入格式：-30"><a href="#输入格式：-30" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（≤1000），随后 N 行，每行给出一个考生的信息：<code>准考证号 试机座位号 考试座位号</code>。其中<code>准考证号</code>由 14 位数字组成，座位从 1 到 N 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。</p><p>考生信息之后，给出一个正整数 M（≤N），随后一行中给出 M 个待查询的试机座位号码，以空格分隔。</p><h3 id="输出格式：-30"><a href="#输出格式：-30" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p><h3 id="输入样例：-22"><a href="#输入样例：-22" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">10120150912233 2 4</span><br><span class="line">10120150912119 4 1</span><br><span class="line">10120150912126 1 3</span><br><span class="line">10120150912002 3 2</span><br><span class="line">2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h3 id="输出样例：-22"><a href="#输出样例：-22" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10120150912002 2</span><br><span class="line">10120150912119 1</span><br></pre></td></tr></table></figure><div class="note success">结构体。</div><h3 id="代码-34"><a href="#代码-34" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span> num1;</span><br><span class="line">    <span class="keyword">int</span> num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    student students[<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">int</span> n,m,num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;students[i].id&gt;&gt;students[i].num1&gt;&gt;students[i].num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(students[j].num1==num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;students[j].id&lt;&lt;<span class="string">" "</span>&lt;&lt;students[j].num2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1042-字符统计"><a href="#1042-字符统计" class="headerlink" title="1042 字符统计"></a>1042 字符统计</h2><p>请编写程序，找出一段给定文字中出现最频繁的那个英文字母。</p><h3 id="输入格式：-31"><a href="#输入格式：-31" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。</p><h3 id="输出格式：-31"><a href="#输出格式：-31" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。</p><h3 id="输入样例：-23"><a href="#输入样例：-23" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a simple TEST.  There ARE numbers and other symbols 1&amp;2&amp;3...........</span><br></pre></td></tr></table></figure><h3 id="输出样例：-23"><a href="#输出样例：-23" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e 7</span><br></pre></td></tr></table></figure><div class="note success">用string的tolower函数将大写字母转成小写字母然后统计，每新统计一个就进行一次比较，是当前最大的就进行替换。</div><h3 id="代码-35"><a href="#代码-35" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> word[<span class="number">30</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> max_num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">char</span> max_word=<span class="string">'z'</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i]=<span class="built_in">tolower</span>(str[i]);</span><br><span class="line">        <span class="keyword">if</span>(str[i]&gt;=<span class="string">'a'</span> &amp;&amp; str[i]&lt;=<span class="string">'z'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            word[str[i]-<span class="string">'a'</span>]++;</span><br><span class="line">            <span class="keyword">if</span>(word[str[i]-<span class="string">'a'</span>]&gt;max_num ||</span><br><span class="line">            word[str[i]-<span class="string">'a'</span>]==max_num &amp;&amp; str[i]&lt;max_word)</span><br><span class="line">            &#123;</span><br><span class="line">                max_num=word[str[i]-<span class="string">'a'</span>];</span><br><span class="line">                max_word=str[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;max_word&lt;&lt;<span class="string">" "</span>&lt;&lt;max_num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1043-输出PATest"><a href="#1043-输出PATest" class="headerlink" title="1043 输出PATest"></a>1043 输出PATest</h2><p>给定一个长度不超过 104 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 <code>PATestPATest....</code> 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。</p><h3 id="输入格式：-32"><a href="#输入格式：-32" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个长度不超过 104 的、仅由英文字母构成的非空字符串。</p><h3 id="输出格式：-32"><a href="#输出格式：-32" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p><h3 id="输入样例：-24"><a href="#输入样例：-24" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redlesPayBestPATTopTeePHPereatitAPPT</span><br></pre></td></tr></table></figure><h3 id="输出样例：-24"><a href="#输出样例：-24" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATestPATestPTetPTePePee</span><br></pre></td></tr></table></figure><div class="note success">统计给出的字符串中P、A、T、e、s、t 的个数，出现次数最多的个数就是要循环输出的次数，然后每输出一个字符，对应的计数就减1。</div><h3 id="代码-36"><a href="#代码-36" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">6</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'P'</span>) num[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'A'</span>) num[<span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'T'</span>) num[<span class="number">2</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'e'</span>) num[<span class="number">3</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'s'</span>) num[<span class="number">4</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">'t'</span>) num[<span class="number">5</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m=*max_element(num,num+<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">0</span>]&gt;<span class="number">0</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"P"</span>;num[<span class="number">0</span>]--;&#125;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">1</span>]&gt;<span class="number">0</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"A"</span>;num[<span class="number">1</span>]--;&#125;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">2</span>]&gt;<span class="number">0</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"T"</span>;num[<span class="number">2</span>]--;&#125;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">3</span>]&gt;<span class="number">0</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"e"</span>;num[<span class="number">3</span>]--;&#125;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">4</span>]&gt;<span class="number">0</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"s"</span>;num[<span class="number">4</span>]--;&#125;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">5</span>]&gt;<span class="number">0</span>)    &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"t"</span>;num[<span class="number">5</span>]--;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1044-火星数字"><a href="#1044-火星数字" class="headerlink" title="1044 火星数字"></a>1044 火星数字</h2><p>火星人是以 13 进制计数的：</p><ul><li>地球人的 0 被火星人称为 tret。</li><li>地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。</li><li>火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。</li></ul><p>例如地球人的数字 <code>29</code> 翻译成火星文就是 <code>hel mar</code>；而火星文 <code>elo nov</code> 对应地球数字 <code>115</code>。为了方便交流，请你编写程序实现地球和火星数字之间的互译。</p><h3 id="输入格式：-33"><a href="#输入格式：-33" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（&lt;100），随后 N 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。</p><h3 id="输出格式：-33"><a href="#输出格式：-33" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对应输入的每一行，在一行中输出翻译后的另一种语言的数字。</p><h3 id="输入样例：-25"><a href="#输入样例：-25" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">29</span><br><span class="line">5</span><br><span class="line">elo nov</span><br><span class="line">tam</span><br></pre></td></tr></table></figure><h3 id="输出样例：-25"><a href="#输出样例：-25" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hel mar</span><br><span class="line">may</span><br><span class="line">115</span><br><span class="line">13</span><br></pre></td></tr></table></figure><div class="note success">这一个有点麻烦，首先读入必须得是字符串，因为不知道是地球文还是火星文，而且要用getline读入，因为可能是两个单词中间有空格。然后不管是火星文转地球文还是地球文转火星文，当火星文只有1位时，可能它正好是13的倍数，属于第二个字符串数组，也可能是小于13的数，属于第一个字符串数组。</div><h3 id="代码-37"><a href="#代码-37" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a[<span class="number">13</span>]=&#123;<span class="string">"tret"</span>,<span class="string">"jan"</span>,<span class="string">"feb"</span>,<span class="string">"mar"</span>,<span class="string">"apr"</span>,<span class="string">"may"</span>,<span class="string">"jun"</span>,<span class="string">"jly"</span>,<span class="string">"aug"</span>,<span class="string">"sep"</span>,<span class="string">"oct"</span>,<span class="string">"nov"</span>,<span class="string">"dec"</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> b[<span class="number">13</span>]=&#123;<span class="string">"0"</span>,<span class="string">"tam"</span>,<span class="string">"hel"</span>,<span class="string">"maa"</span>,<span class="string">"huh"</span>,<span class="string">"tou"</span>,<span class="string">"kes"</span>,<span class="string">"hei"</span>,<span class="string">"elo"</span>,<span class="string">"syy"</span>,<span class="string">"lok"</span>,<span class="string">"mer"</span>,<span class="string">"jou"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>,str);</span><br><span class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]&gt;=<span class="string">'0'</span> &amp;&amp; str[<span class="number">0</span>]&lt;=<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num=stoi(str);</span><br><span class="line">            <span class="keyword">if</span>(num/<span class="number">13</span>&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x1=num/<span class="number">13</span>;</span><br><span class="line">                <span class="keyword">int</span> x2=(num%<span class="number">13</span>)%<span class="number">13</span>;</span><br><span class="line">                <span class="keyword">if</span>(x2==<span class="number">0</span>)   <span class="built_in">cout</span>&lt;&lt;b[x1]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;b[x1]&lt;&lt;<span class="string">" "</span>&lt;&lt;a[x2]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;a[num%<span class="number">13</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> n1,n2;</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">3</span>]==<span class="string">' '</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> s1=str.substr(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">                <span class="built_in">string</span> s2=str.substr(<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">13</span>;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s1==b[i])   n1=i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">13</span>;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s2==a[i])    n2=i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="number">13</span>*n1+n2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">13</span>;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(str==a[i])   &#123;flag=<span class="number">1</span>;<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">13</span>;i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(str==b[i])   <span class="built_in">cout</span>&lt;&lt;<span class="number">13</span>*i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1045-快速排序"><a href="#1045-快速排序" class="headerlink" title="1045 快速排序"></a>1045 快速排序</h2><p>著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？</p><p>例如给定 $N = 5$, 排列是1、3、2、4、5。则：</p><ul><li>1 的左边没有元素，右边的元素都比它大，所以它可能是主元；</li><li>尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；</li><li>尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；</li><li>类似原因，4 和 5 都可能是主元。</li></ul><p>因此，有 3 个元素可能是主元。</p><h3 id="输入格式：-34"><a href="#输入格式：-34" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行中给出一个正整数 N（≤105）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 109。</p><h3 id="输出格式：-34"><a href="#输出格式：-34" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。</p><h3 id="输入样例：-26"><a href="#输入样例：-26" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 2 4 5</span><br></pre></td></tr></table></figure><h3 id="输出样例：-26"><a href="#输出样例：-26" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 5</span><br></pre></td></tr></table></figure><div class="note success">暴力的话会超时，于是不知道怎么做…..看了网上的答案，先将数组排序，如果排序前两个数字的位置没有变，而且这个数字比前面数中最大的数都大，就证明这个数是主元。<br><br>这个题目的格式有点坑，可能出现0个主元的情况，如果只输出0就会报格式错误，必须再加一个空行的输出才可以。</div><h3 id="代码-38"><a href="#代码-38" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>],b[<span class="number">100005</span>],v[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,max=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        b[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==b[i] &amp;&amp; b[i]&gt;max)  v[cnt++]=b[i];</span><br><span class="line">        <span class="keyword">if</span>(b[i]&gt;max)    max=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">0</span>)  <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)    <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python实验汇总</title>
      <link href="/2018/11/24/Python%E5%AE%9E%E9%AA%8C%E6%B1%87%E6%80%BB/"/>
      <url>/2018/11/24/Python%E5%AE%9E%E9%AA%8C%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>Python实验课的实验内容汇总……</p><a id="more"></a><h1 id="实验一-Python环境及基础"><a href="#实验一-Python环境及基础" class="headerlink" title="实验一 Python环境及基础"></a>实验一 Python环境及基础</h1><h2 id="题目1：字符串拼接"><a href="#题目1：字符串拼接" class="headerlink" title="题目1：字符串拼接"></a>题目1：字符串拼接</h2><p>接受用户输入的两个字符串，将它们组合后输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = input(<span class="string">"请输入第一个字符串："</span>)</span><br><span class="line">str2 = input(<span class="string">"请输入第二个字符串："</span>)</span><br><span class="line">print(str1 + str2)</span><br></pre></td></tr></table></figure><div class="note success">两个字符串可以用“+”连接成为一个新的字符串。</div><h2 id="题目2：整数序列求和"><a href="#题目2：整数序列求和" class="headerlink" title="题目2：整数序列求和"></a>题目2：整数序列求和</h2><p>用户输入一个正整数N,计算从1到N(包含1和N)相加之后的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = eval(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num+<span class="number">1</span>):</span><br><span class="line">    sum = sum + i</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><div class="note success">range(n)是从0到n-1</div><h2 id="题目3：健康食谱输出"><a href="#题目3：健康食谱输出" class="headerlink" title="题目3：健康食谱输出"></a>题目3：健康食谱输出</h2><p>列出5种不同的食材，输出它们可能组成的所有菜式名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">diet = [<span class="string">'土豆'</span>,<span class="string">'萝卜'</span>,<span class="string">'牛肉'</span>,<span class="string">'白菜'</span>,<span class="string">'鸡肉'</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> diet:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> diet:</span><br><span class="line">        <span class="keyword">if</span> x != y:</span><br><span class="line">            print(x+y)</span><br></pre></td></tr></table></figure><div class="note success">数组循环，可以使用for i in （数组名）的方式循环遍历。</div><h2 id="题目4：太阳花的绘制"><a href="#题目4：太阳花的绘制" class="headerlink" title="题目4：太阳花的绘制"></a>题目4：太阳花的绘制</h2><p>绘制一个太阳花图形，效果如图：</p><p><img src="https://i.loli.net/2018/11/26/5bfbef0e5ba43.png" alt="花.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">turtle.color(<span class="string">'red'</span>, <span class="string">'yellow'</span>)</span><br><span class="line">    turtle.begin_fill()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        turtle.forward(<span class="number">200</span>)</span><br><span class="line">        turtle.left(<span class="number">170</span>)</span><br><span class="line">        <span class="keyword">if</span> abs(turtle.pos()) &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    turtle.end_fill()</span><br><span class="line">    turtle.done()</span><br></pre></td></tr></table></figure><div class="note success">turtle库的用法</div><h1 id="实验二-字符串运算及字符串格式化"><a href="#实验二-字符串运算及字符串格式化" class="headerlink" title="实验二 字符串运算及字符串格式化"></a>实验二 字符串运算及字符串格式化</h1><h2 id="题目1：格式化输出字符串堆积的三角形"><a href="#题目1：格式化输出字符串堆积的三角形" class="headerlink" title="题目1：格式化输出字符串堆积的三角形"></a>题目1：格式化输出字符串堆积的三角形</h2><p>其中，str.center()方法用于字符串两边填充：str.rjust(width[,fillchar])方法用于字符串右填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"1"</span>.center(<span class="number">20</span>)) <span class="comment"># 1行20个字符，居中对齐</span></span><br><span class="line">print(format(<span class="string">"121"</span>, <span class="string">"^20"</span>))  <span class="comment"># 1行20个字符，居中对齐</span></span><br><span class="line">print(format(<span class="string">"12321"</span>, <span class="string">"^20"</span>))  <span class="comment"># 1行20个字符，居中对齐</span></span><br><span class="line">print(<span class="string">"1"</span>.rjust(<span class="number">20</span>, <span class="string">"*"</span>))  <span class="comment"># 1行20个字符，右对齐，加*号</span></span><br><span class="line">print(format(<span class="string">"121"</span>, <span class="string">"*&gt;20"</span>))  <span class="comment"># 1行20个字符，右对齐，加*号</span></span><br><span class="line">print(format(<span class="string">"12321"</span>, <span class="string">"*&gt;20"</span>))  <span class="comment"># 1行20个字符，右对齐，加*号</span></span><br></pre></td></tr></table></figure><div class="note success">字符串的格式化，须熟悉掌握</div><h2 id="题目2：天天向上"><a href="#题目2：天天向上" class="headerlink" title="题目2：天天向上"></a>题目2：天天向上</h2><p>一年365天，以第1天的能力值为基数，记为1.0，当好好学习时能力值相比前一天提高1‰，当没有学习是由于遗忘等原因能力值相比前一天下降1‰，每天努力和每天放任，一年下来的能力值相差多少呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dayup = <span class="number">1</span></span><br><span class="line">daydown = <span class="number">1</span></span><br><span class="line">power = <span class="number">0.001</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">365</span>+<span class="number">1</span>):</span><br><span class="line">    dayup = dayup * (<span class="number">1</span> + power)</span><br><span class="line">    daydown = daydown * (<span class="number">1</span> - power)</span><br><span class="line">print(dayup,daydown)</span><br></pre></td></tr></table></figure><p>一年365天，一周5个工作日，如果每个工作日都很努力，可以提高1%，仅在周末放任一下，能力值下降1%，效果如何呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">daypower = <span class="number">1</span></span><br><span class="line">power = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">365</span> + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">6</span>]:</span><br><span class="line">        daypower = daypower * (<span class="number">1</span> - power)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        daypower = daypower * (<span class="number">1</span> + power)</span><br><span class="line">print(daypower)</span><br></pre></td></tr></table></figure><h2 id="题目3：凯撒密码"><a href="#题目3：凯撒密码" class="headerlink" title="题目3：凯撒密码"></a>题目3：凯撒密码</h2><p>设想在某些情况下给朋友传递字条信息，但又不希望传递中途被第三方看懂这些信息，因此需要对字条信息进行加密处理。传统加密算法很多，这里介绍一种非常简单的加密算法——凯撒密码。顾名思义，凯撒密码是古罗马凯撒大帝用来对军事情报进行加密的算法，它采用了替换算法对信息中的每一个英文字符循环替换为该字符后面第三个字符，对应关系如下：</p><p>原文：A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</p><p>密文：D E F G H I J K L M N O P Q R S T U V W X Y Z A B C</p><p>假设用户可能使用的信息仅包括所有英文字母，编程计算密文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str = input(<span class="string">"请输入明文："</span>)</span><br><span class="line">answer = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"a"</span> &lt;= i &lt;= <span class="string">"z"</span>:</span><br><span class="line">        answer = answer + chr((ord(i) - ord(<span class="string">"a"</span>) + <span class="number">3</span>)%<span class="number">26</span> + ord(<span class="string">"a"</span>))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">"A"</span> &lt;= i &lt;= <span class="string">"Z"</span>:</span><br><span class="line">        answer = answer + chr((ord(i) - ord(<span class="string">"A"</span>) + <span class="number">3</span>)%<span class="number">26</span> + ord(<span class="string">"A"</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        answer = answer + i</span><br><span class="line">print(answer)</span><br></pre></td></tr></table></figure><div class="note success">ord(“a”)表示字符a对应的acsii码，而chr(1)表示acsii码为1的字符。</div><h2 id="题目4：文本进度条"><a href="#题目4：文本进度条" class="headerlink" title="题目4：文本进度条"></a>题目4：文本进度条</h2><p>进度条是计算机处理任务或执行软件中增强用户体验的重要手段，它能够实时显示任务或软件的执行进度，十分常用。</p><p>编程实现如下图所示带刷新和时间监控的文本进度条：</p><p>———–执行开始———-</p><p> 0 %[-&gt;…………………………………………..]0.00s</p><p> 2 %[*-&gt;………………………………………….]0.05s</p><p> 4 %[**-&gt;…………………………………………]0.15s</p><p> 6 %[<em>*</em>-&gt;………………………………………..]0.30s</p><p> 8 %[*<em>*</em>-&gt;……………………………………….]0.50s</p><p>10 %[**<em>*</em>-&gt;………………………………………]0.76s</p><p>12 %[******-&gt;……………………………………..]1.06s</p><p>14 %[****<em>*</em>-&gt;…………………………………….]1.41s</p><p>16 %[*****<em>*</em>-&gt;……………………………………]1.82s</p><p>18 %[******<em>*</em>-&gt;…………………………………..]2.27s</p><p>20 %[*******<em>*</em>-&gt;………………………………….]2.78s</p><p>……</p><p>98 %[**********************************************<em>*</em>-&gt;.]61.95s</p><p>100%[***********************************************<em>*</em>-&gt;]64.48s</p><p>———–执行结束———-</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">scale = <span class="number">50</span></span><br><span class="line">print(<span class="string">"执行开始"</span>.center(scale//<span class="number">2</span>,<span class="string">"-"</span>))</span><br><span class="line">t = time.clock()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(scale+<span class="number">1</span>):</span><br><span class="line">    a = <span class="string">"*"</span> * i</span><br><span class="line">    b = <span class="string">"."</span> * (scale - i)</span><br><span class="line">    c = i/scale * <span class="number">100</span></span><br><span class="line">    t -= time.clock()</span><br><span class="line">    print(<span class="string">"\r&#123;:3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.3f&#125;s"</span>.format(c,a,b,-t))<span class="comment"># 加上end=''之后可以动态更新</span></span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line">print(<span class="string">"\n"</span> + <span class="string">"执行结束"</span>.center(scale//<span class="number">2</span>,<span class="string">"-"</span>))</span><br></pre></td></tr></table></figure><div class="note success">进度条问题，关键是输出格式和循环次数</div><h1 id="实验三-控制结构（分支）"><a href="#实验三-控制结构（分支）" class="headerlink" title="实验三 控制结构（分支）"></a>实验三 控制结构（分支）</h1><h2 id="题目1：身体质量指数BMI"><a href="#题目1：身体质量指数BMI" class="headerlink" title="题目1：身体质量指数BMI"></a>题目1：身体质量指数BMI</h2><p>BMI 值可以“客观的”衡量个人的肥胖程度或者说健康程度。世界卫生组织（WHO）根据对全球人口体重的统计认为，BMI 值低于18.5 kg/m2 时属于“过轻”，表明个体可能营养不良或者饮食无法保障；BMI 值高于25 kg/m2 时属于“过重”。根据下表所示指标编程测试 自己的身体指数状况。</p><table><thead><tr><th>分类</th><th>国际BMI值</th><th>国内MBI值</th></tr></thead><tbody><tr><td>偏瘦</td><td>&lt; 18.5</td><td>&lt; 18.5</td></tr><tr><td>正常</td><td>18.5 ~ 25</td><td>18.5 ~ 24</td></tr><tr><td>偏胖</td><td>25 ~ 30</td><td>24 ~ 28</td></tr><tr><td>肥胖</td><td>> = 30</td><td>>= 28</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">height = eval(input(<span class="string">"请输入你的身高（单位m）："</span>))</span><br><span class="line">weight = eval(input(<span class="string">"请输入你的体重（单位：kg）："</span>))</span><br><span class="line">BMI = weight / pow(height, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> BMI &lt; <span class="number">18.5</span>:</span><br><span class="line">    national = <span class="string">"偏瘦"</span></span><br><span class="line"><span class="keyword">elif</span> BMI &lt; <span class="number">25</span>:</span><br><span class="line">    national = <span class="string">"正常"</span></span><br><span class="line"><span class="keyword">elif</span> BMI &lt; <span class="number">30</span>:</span><br><span class="line">    national = <span class="string">"偏胖"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    national = <span class="string">"肥胖"</span></span><br><span class="line"><span class="keyword">if</span> BMI &lt; <span class="number">18.5</span>:</span><br><span class="line">    domestic = <span class="string">"偏瘦"</span></span><br><span class="line"><span class="keyword">elif</span> BMI &lt; <span class="number">24</span>:</span><br><span class="line">    domestic = <span class="string">"正常"</span></span><br><span class="line"><span class="keyword">elif</span> BMI &lt; <span class="number">28</span>:</span><br><span class="line">    domestic =<span class="string">"偏胖"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    domestic = <span class="string">"肥胖"</span></span><br><span class="line">print(<span class="string">"BMI值为："</span>,BMI)</span><br><span class="line">print(<span class="string">"国际指数表明&#123;&#125;，国内指数表明&#123;&#125;"</span>.format(national,domestic))</span><br></pre></td></tr></table></figure><h2 id="题目2：学生成绩等级判断"><a href="#题目2：学生成绩等级判断" class="headerlink" title="题目2：学生成绩等级判断"></a>题目2：学生成绩等级判断</h2><p>编程实现输入学生成绩score，得出其等级状况grade,其对应关系如下： </p><p>Score&gt;=85       grade=”A” </p><p>70&lt;=Score&lt;85    grade=”B” </p><p>60&lt;=Score&lt;70    grade=”C” </p><p>Score&lt;60        grade=”D” </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">score = eval(input(<span class="string">"请输入学生成绩："</span>))</span><br><span class="line">grade = <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">85</span>:</span><br><span class="line">    grade = <span class="string">"A"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">70</span> &lt;= score &lt;= <span class="number">85</span>:</span><br><span class="line">    grade = <span class="string">"B"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt;= <span class="number">70</span>:</span><br><span class="line">    grade = <span class="string">"C"</span></span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">"D"</span></span><br><span class="line">print(grade)</span><br></pre></td></tr></table></figure><h2 id="题目3：猜数游戏"><a href="#题目3：猜数游戏" class="headerlink" title="题目3：猜数游戏"></a>题目3：猜数游戏</h2><p>在程序中预设一个0-9 之间的整数，让用户通过键盘输入所猜的数，如果大于预设的 数，显示“遗憾，太大了”；小于预设的数，显示“遗憾，太小了”，如此循环，直到猜中该数，显示“预测N 次，你猜中了！”，其中N 是用户输入的数字次数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">number = random.randint(<span class="number">0</span>,<span class="number">9</span>)</span><br><span class="line">print(<span class="string">"正确的数值是："</span>,number)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">    guess = eval(input(<span class="string">"请输入你猜的数值："</span>))</span><br><span class="line">    <span class="keyword">if</span> guess &gt; number:</span><br><span class="line">        print(<span class="string">"遗憾，太大了！"</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess &lt; number:</span><br><span class="line">        print(<span class="string">"遗憾，太小了！"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"恭喜，猜对了！你一共猜了&#123;&#125;次"</span>.format(count))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="实验四-控制结构（循环）"><a href="#实验四-控制结构（循环）" class="headerlink" title="实验四 控制结构（循环）"></a>实验四 控制结构（循环）</h1><h2 id="题目1：统计不同字符个数"><a href="#题目1：统计不同字符个数" class="headerlink" title="题目1：统计不同字符个数"></a>题目1：统计不同字符个数</h2><p>用户从键盘输入一行字符，编写一个程序，统计并输出其中英文字符、数字、空格和其它字符的个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">str = input(<span class="string">"请输入一串字符串："</span>)</span><br><span class="line">count1 = <span class="number">0</span></span><br><span class="line">count2 = <span class="number">0</span></span><br><span class="line">count3 = <span class="number">0</span></span><br><span class="line">count4 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</span><br><span class="line">    <span class="keyword">if</span> ord(<span class="string">"a"</span>) &lt;= ord(i) &lt;= ord(<span class="string">"z"</span>) <span class="keyword">or</span> ord(<span class="string">"A"</span>) &lt;= ord(i) &lt;= ord(<span class="string">"Z"</span>):</span><br><span class="line">        count1 = count1 + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> ord(<span class="string">"0"</span>) &lt;= ord(i) &lt;= ord(<span class="string">"9"</span>):</span><br><span class="line">        count2 = count2 + <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">' '</span>:</span><br><span class="line">        count3 = count3 + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count4 = count4 + <span class="number">1</span></span><br><span class="line">print(<span class="string">"字母的个数是&#123;&#125;，数字的个数是&#123;&#125;，空格的个数是&#123;&#125;，其他类型的字符个数是&#123;&#125;"</span></span><br><span class="line">      .format(count1,count2,count3,count4))</span><br></pre></td></tr></table></figure><h2 id="题目2：猜数游戏续"><a href="#题目2：猜数游戏续" class="headerlink" title="题目2：猜数游戏续"></a>题目2：猜数游戏续</h2><p>在上一次猜游戏实验题目的基础上，完善程序，实现如下的功能：</p><p>系统自动生成1-100以内的随机整数，让用户通过键盘输入所猜的数，如果大于预设的数，显示“遗憾，太大了”；小于预设的数，显示“遗憾，太小了”，如此循环，直到猜中该数，显示“预测N次，你猜中了！”，其中N是用户输入的数字次数。</p><p>如果用户输入的不是整数，而是小数，则提示用户“输入错误，必须输入整数！”，并让用户重新输入。如果用户输入的不是数字，则给出出错提示“输入格式错误，结束程序！”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">number = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(<span class="string">"正确的数值是："</span>,number)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">    guess = input(<span class="string">"请输入你猜的数值："</span>)</span><br><span class="line">    <span class="keyword">if</span> guess.isalpha():</span><br><span class="line">        print(<span class="string">"输入格式错误，结束程序！"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    guess = eval(guess)</span><br><span class="line">    <span class="keyword">if</span> int(guess) == guess:</span><br><span class="line">        <span class="keyword">if</span> guess &gt; number:</span><br><span class="line">            print(<span class="string">"遗憾，太大了！"</span>)</span><br><span class="line">        <span class="keyword">elif</span> guess &lt; number:</span><br><span class="line">            print(<span class="string">"遗憾，太小了！"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"恭喜，猜对了！你一共猜了&#123;&#125;次"</span>.format(count))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"输入错误，必须输入整数！"</span>)</span><br></pre></td></tr></table></figure><div class="note success">str.isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回 True,否则返回 False </div><h2 id="题目3：最大公约数计算"><a href="#题目3：最大公约数计算" class="headerlink" title="题目3：最大公约数计算"></a>题目3：最大公约数计算</h2><p>从键盘接收两个整数，编写程序求出这两个整数的最大公约数和最小公倍数（提示：用辗转相除法求最大公约数，用两数乘积除以最大公约数求得最小公倍数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">num1 = eval(input(<span class="string">"请输入第一个数："</span>))</span><br><span class="line">num2 = eval(input(<span class="string">"请输入第二个数："</span>))</span><br><span class="line">m = max(num1,num2)</span><br><span class="line">n = min(num1,num2)</span><br><span class="line">r = m % n</span><br><span class="line"><span class="keyword">while</span> r != <span class="number">0</span>:</span><br><span class="line">    m = n</span><br><span class="line">    n = r</span><br><span class="line">    r = m % n</span><br><span class="line">print(<span class="string">"&#123;&#125;和&#123;&#125;的最大公约数是&#123;&#125;"</span>.format(num1, num2, n))</span><br><span class="line">print(<span class="string">"&#123;&#125;和&#123;&#125;的最小公倍数数是&#123;&#125;"</span>.format(num1, num2, (num1 * num2)/n))</span><br></pre></td></tr></table></figure><h2 id="题目4：数字金字塔"><a href="#题目4：数字金字塔" class="headerlink" title="题目4：数字金字塔"></a>题目4：数字金字塔</h2><p>请编写程序实现如下数字金字塔的显示：</p><p><img src="https://i.loli.net/2018/11/26/5bfbeee45abb1.png" alt="数字.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    st = <span class="string">""</span></span><br><span class="line">    j = i</span><br><span class="line">    <span class="keyword">while</span> j &gt; <span class="number">1</span>:</span><br><span class="line">        st = st + str(j)</span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        st = st + str(j)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    print(st.center(<span class="number">17</span>))</span><br></pre></td></tr></table></figure><h1 id="实验五-组合数据类型"><a href="#实验五-组合数据类型" class="headerlink" title="实验五 组合数据类型"></a>实验五 组合数据类型</h1><h2 id="题目1：密码生成"><a href="#题目1：密码生成" class="headerlink" title="题目1：密码生成"></a>题目1：密码生成</h2><p>编写程序，在 26 个字母大小写和 9 个数字组成的列表中随机生成 10个8位密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">num1 = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'0'</span>),ord(<span class="string">'9'</span>)+<span class="number">1</span>)]</span><br><span class="line">num2 = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>)]</span><br><span class="line">num3 = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'A'</span>),ord(<span class="string">'Z'</span>)+<span class="number">1</span>)]</span><br><span class="line">num = num1 + num2 + num3</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    code = random.sample(num,<span class="number">8</span>)</span><br><span class="line">    print(<span class="string">''</span>.join(code))</span><br></pre></td></tr></table></figure><div class="note success">random.sample()函数，从指定的list中随机选取指定长度的元素。<br><br>str.join(list)表示list中间用str连接</div><h2 id="题目2：排序"><a href="#题目2：排序" class="headerlink" title="题目2：排序"></a>题目2：排序</h2><p>通过键盘输入系列整数值，输入 0 则表示输入结束，将这些值（不含 0）建立为一个列表，并按从大到小的顺序输出该列表各元素。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List = []</span><br><span class="line">number = eval(input(<span class="string">"input number:"</span>))</span><br><span class="line">List.append(number)</span><br><span class="line"><span class="keyword">while</span> number != <span class="number">0</span>:</span><br><span class="line">    number = eval(input(<span class="string">"input number:"</span>))</span><br><span class="line">    List.append(number)</span><br><span class="line">List.sort(reverse=<span class="number">1</span>)</span><br><span class="line">print(List)</span><br></pre></td></tr></table></figure><div class="note success">sort函数用于排序，默认是从小到大排序，reverse=1表示从大到小排序。</div><h2 id="题目3：输出素数"><a href="#题目3：输出素数" class="headerlink" title="题目3：输出素数"></a>题目3：输出素数</h2><p>输入一个大于 2 的自然数， 输出小于该数字的所有素数组成的集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,number):</span><br><span class="line">        <span class="keyword">if</span> number % i ==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">number = eval(input(<span class="string">"请输入一个大于2的数："</span>))</span><br><span class="line">numbers = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,number):</span><br><span class="line">    <span class="keyword">if</span> prim(i):</span><br><span class="line">        numbers.append(i)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><h2 id="题目4：英文电话号码"><a href="#题目4：英文电话号码" class="headerlink" title="题目4：英文电话号码"></a>题目4：英文电话号码</h2><p>使用字典来创建程序，提示用户输入电话号码，并用英文单词形式显示数字。例如：输入138则显示“one three eight”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Getdict</span><span class="params">(phone)</span>:</span></span><br><span class="line">    a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    b = [<span class="string">'zero'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>,<span class="string">'five'</span>,<span class="string">'six'</span>,<span class="string">'seven'</span>,<span class="string">'eight'</span>,<span class="string">'nine'</span>]</span><br><span class="line">    mydict = dict(zip(a,b))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> phone:</span><br><span class="line">        print(mydict[int(i)],end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">phone = input(<span class="string">"请输入电话号码："</span>)</span><br><span class="line">Getdict(phone)</span><br></pre></td></tr></table></figure><div class="note success">dict(zip(a,b))方法可以把a和b两个list的键和值转换为字典。<br><br>print()函数默认输出后换行，如果想以其他形式结尾，可以使用end=‘ ’，表示用空格结尾。</div><h1 id="实验六-综合"><a href="#实验六-综合" class="headerlink" title="实验六 综合"></a>实验六 综合</h1><h2 id="题目1：抓狐狸游戏"><a href="#题目1：抓狐狸游戏" class="headerlink" title="题目1：抓狐狸游戏"></a>题目1：抓狐狸游戏</h2><p>编写程序，模拟抓狐狸小游戏。假设一共有一排5个洞口，小狐狸最开始的时候在其中一个洞口，然后玩家随机打开一个洞口，如果里面有狐狸就抓到了。如果洞口里没有狐狸就第二天再来抓， 但是第二天狐狸会在玩家来抓之前跳到隔壁洞口里。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">hole = random.randint(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">print(<span class="string">"狐狸现在在&#123;&#125;号洞口"</span>.format(hole))</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    guess = eval(input(<span class="string">"请选择洞口编号："</span>))</span><br><span class="line">    <span class="keyword">if</span> guess == hole:</span><br><span class="line">        print(<span class="string">"恭喜你，抓到狐狸了！"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"猜错啦，再给你一次机会吧！"</span>)</span><br><span class="line">        hole = hole + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> hole == <span class="number">6</span>:</span><br><span class="line">            hole = <span class="number">0</span></span><br><span class="line">        print(<span class="string">"狐狸现在在&#123;&#125;号洞口"</span>.format(hole))</span><br></pre></td></tr></table></figure><h2 id="题目2：三国演义"><a href="#题目2：三国演义" class="headerlink" title="题目2：三国演义"></a>题目2：三国演义</h2><p>统计《三国演义》中人物出场次数最多的前 20 人。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">excludes = &#123;<span class="string">"将军"</span>,<span class="string">"却说"</span>,<span class="string">"这样"</span>,<span class="string">"他们"</span>,<span class="string">"东汉"</span>,<span class="string">"如今"</span>,<span class="string">"然而"</span>,<span class="string">"自己"</span>,<span class="string">"这个"</span>,<span class="string">"没有"</span></span><br><span class="line">            ,<span class="string">"蜀汉"</span>,<span class="string">"东吴"</span>,<span class="string">"就是"</span>,<span class="string">"已经"</span>,<span class="string">"虽然"</span>,<span class="string">"看到"</span>,<span class="string">"不是"</span>,<span class="string">"我们"</span>,<span class="string">"立刻"</span>,<span class="string">"一个"</span>,</span><br><span class="line">            <span class="string">"汉中"</span>,<span class="string">"公元"</span>&#125;</span><br><span class="line">txt = open(<span class="string">"F:\python选修课\三国演义.txt"</span>,<span class="string">"r"</span>,encoding=<span class="string">'utf-8'</span>).read()</span><br><span class="line">words = jieba.lcut(txt)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> len(word)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> excludes:</span><br><span class="line">    <span class="keyword">del</span>(counts[word])</span><br><span class="line">items = list(counts.items())</span><br><span class="line">items.sort(key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse = <span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    word,count = items[i]</span><br><span class="line">    print(<span class="string">"&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;"</span>.format(word,count))</span><br></pre></td></tr></table></figure><h1 id="实验七-函数"><a href="#实验七-函数" class="headerlink" title="实验七 函数"></a>实验七 函数</h1><h2 id="题目1：求和"><a href="#题目1：求和" class="headerlink" title="题目1：求和"></a>题目1：求和</h2><p>定义求 n! 的函数fact()和求和函数sum(),在此基础上编程实现 1！+2！+…m!的计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    answer = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        answer = answer * i</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(number_list)</span>:</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> number_list:</span><br><span class="line">        s = s + fact(i)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">m = eval(input(<span class="string">"请输入m："</span>))</span><br><span class="line">number_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>)]</span><br><span class="line">print(sum(number_list))</span><br></pre></td></tr></table></figure><h2 id="题目2：匿名函数求平方"><a href="#题目2：匿名函数求平方" class="headerlink" title="题目2：匿名函数求平方"></a>题目2：匿名函数求平方</h2><p>定义匿名函数实现求平方，定义判素数函数 list_prime(),该函数可以实现接受任意个数的判断，并将所有素数作为返回值。在此基础上编程实现随机输入任意个数，从中挑选出所有素数，并计算所有素数平方和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim_list</span><span class="params">(ls)</span>:</span></span><br><span class="line">    prim = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,i):</span><br><span class="line">            <span class="keyword">if</span> i % j ==<span class="number">0</span>:</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            prim.append(i)</span><br><span class="line">    <span class="keyword">return</span> prim</span><br><span class="line"></span><br><span class="line">my_list = prim_list([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">13</span>])</span><br><span class="line">print(my_list)</span><br><span class="line">square = <span class="keyword">lambda</span> x:x * x</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_list:</span><br><span class="line">    sum = sum + square(i)</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><div class="note success">普通函数的关键字是def，而匿名函数的关键字是lambda，匿名函数没有函数名，这里，<code>lambda x: x * x</code> 是 lambda 函数，其中 x 是参数，<code>x * x</code> 是表达式。<br><br>这个函数没有名字，它返回一个函数对象，该对象被分配给变量 square，可以将其作为一个正常的函数来调用。</div><h2 id="题目3：字母表字典"><a href="#题目3：字母表字典" class="headerlink" title="题目3：字母表字典"></a>题目3：字母表字典</h2><p>分别定义 numlist()和 charlist()函数，numlist()功能是生成由数字1-26 构成的列表,charlist()功能是生成由字符 A-Z 构成的列表。在此基础上编写程序实现生成一个字典，具体如下：<br>{1: ‘a’, 2: ‘b’, 3: ‘c’, 4: ‘d’, 5: ‘e’, 6: ‘f’, 7: ‘g’, 8: ‘h’, 9: ‘i’, 10: ‘j’, 11: ‘k’, 12: ‘l’, 13: ‘m’, 14: ‘n’, 15: ‘o’, 16: ‘p’, 17: ‘q’, 18: ‘r’, 19: ‘s’, 20: ‘t’, 21: ‘u’, 22: ‘v’, 23: ‘w’, 24: ‘x’, 25: ‘y’, 26: ‘z’}<br>遍历字典，输出所有键值为偶数的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_list</span><span class="params">()</span>:</span></span><br><span class="line">    numbers = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">27</span>)]</span><br><span class="line">    <span class="keyword">return</span> numbers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char_list</span><span class="params">()</span>:</span></span><br><span class="line">    chars = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>)+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> chars</span><br><span class="line"></span><br><span class="line">english_list = dict(zip(num_list(),char_list()))</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> english_list.items():</span><br><span class="line">    <span class="keyword">if</span> key % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(value,end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><div class="note success">字典的循环，需要使用english_list.items()迭代遍历。</div><h1 id="实验八-文件与数据格式化"><a href="#实验八-文件与数据格式化" class="headerlink" title="实验八 文件与数据格式化"></a>实验八 文件与数据格式化</h1><h2 id="题目1：csv转json"><a href="#题目1：csv转json" class="headerlink" title="题目1：csv转json"></a>题目1：csv转json</h2><p>将提供的 test.csv 文件，具体内容如下：</p><p>编程读入该文件，转换成 JSON 格式文件，并以文件名 out.json 输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">lines = open(<span class="string">'test.csv'</span>,<span class="string">'r'</span>).readlines()</span><br><span class="line">lines = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line">key = lines[<span class="number">0</span>].split(<span class="string">','</span>)</span><br><span class="line">data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(lines)):</span><br><span class="line">    value = lines[i].split(<span class="string">','</span>)</span><br><span class="line">    data.append(dict(zip(key,value)))</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(data,ensure_ascii=<span class="keyword">False</span>,indent=len(lines))</span><br><span class="line">jsonfile = open(<span class="string">'out1.json'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">jsonfile.write(json_str)</span><br><span class="line">jsonfile.close()</span><br></pre></td></tr></table></figure><div class="note success">csv.DictReader(csvfile)这个函数可以直接将CSV文档读取为字典的形式。<br><br>json.dump(row,jsonfile,ensure_ascii=False)这个函数用于将python对象编码成JSON字符串，第一个参数是python对象，第二个是编码格式，必须要使用ensure_ascii=False，否则会有乱码。<br><br>indent参数可以加也可以不加，加了之后更加美观，否则就是一排。</div><h2 id="扩展：json转csv"><a href="#扩展：json转csv" class="headerlink" title="扩展：json转csv"></a>扩展：json转csv</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">jsonfile = open(<span class="string">'out1.json'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">data = json.loads(jsonfile.read())</span><br><span class="line">csvfile = open(<span class="string">'outcsv.csv'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">dw = csv.DictWriter(csvfile, data[<span class="number">0</span>].keys())</span><br><span class="line">dw.writeheader()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">    dw.writerow(row)</span><br></pre></td></tr></table></figure><div class="note success">文件读写最需要注意的问题就是编码格式！最好统一加上utf-8的编码格式。<br><br>json.dumps()用于写数据，json.loads()用于读取数据。<br><br>csv.DictWriter()用于把字典格式的数据写入csv。</div><h2 id="题目2：制作英文学习字典"><a href="#题目2：制作英文学习字典" class="headerlink" title="题目2：制作英文学习字典"></a>题目2：制作英文学习字典</h2><p>编写程序制作英文学习字典，词典基本功能如下：<br>(1) 程序读取源文件路径下的 txt 格式词典文件，若没有就创建一个。 词典文件存储方式为 “英文单词 中文单词”,每行仅有一对中英文释义。<br>(2) 程序有添加功能，输入英文单词，如果没有可以添加中文释义，如果有就显示”已经存在，不能添加”<br>(3) 程序有查询功能，如果存在，则显示其中文释义，不存在就显示不存在<br>(4) 程序有正常退出的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkWords</span><span class="params">(file,word)</span>:</span></span><br><span class="line">    <span class="comment"># file = open('dict.txt','r+')</span></span><br><span class="line">    flag = <span class="keyword">True</span></span><br><span class="line">    line = file.readline()</span><br><span class="line">    <span class="keyword">while</span> line:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> line:</span><br><span class="line">            flag = <span class="keyword">False</span></span><br><span class="line">            print(<span class="string">"该单词的释义是："</span>,line.split(<span class="string">' '</span>)[<span class="number">1</span>])</span><br><span class="line">        line = file.readline()</span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        print(<span class="string">"找不到该单词哦！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addWords</span><span class="params">(file,word,explain)</span>:</span></span><br><span class="line">    flag = <span class="keyword">True</span></span><br><span class="line">    <span class="comment"># file = open('dict.txt','r+')</span></span><br><span class="line">    line = file.readline()</span><br><span class="line">    <span class="keyword">while</span> line:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> line:</span><br><span class="line">            flag = <span class="keyword">False</span></span><br><span class="line">            print(<span class="string">"该单词已经存在啦！"</span>)</span><br><span class="line">        line = file.readline()</span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        file.write(<span class="string">"\n"</span> + word + <span class="string">" "</span> + explain)</span><br><span class="line">        print(<span class="string">"添加成功！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"单词本功能如下：\n1.查询单词\n2.添加单词及解释\n3.退出单词本"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        op = input(<span class="string">"请输入你的选择："</span>)</span><br><span class="line">        <span class="keyword">if</span> eval(op) == <span class="number">1</span>:</span><br><span class="line">            file = open(<span class="string">'dict.txt'</span>,<span class="string">'r+'</span>)</span><br><span class="line">            word = input(<span class="string">"请输入你想查找的单词："</span>)</span><br><span class="line">            checkWords(file,word)</span><br><span class="line">            file.close()</span><br><span class="line">        <span class="keyword">elif</span> eval(op) == <span class="number">2</span>:</span><br><span class="line">            file = open(<span class="string">'dict.txt'</span>,<span class="string">'r+'</span>)</span><br><span class="line">            word = input(<span class="string">"请输入你想添加的单词："</span>)</span><br><span class="line">            explain = input(<span class="string">"请输入释义："</span>)</span><br><span class="line">            addWords(file,word,explain)</span><br><span class="line">            file.close()</span><br><span class="line">        <span class="keyword">elif</span> eval(op) == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"请输入正确的选择！"</span>)</span><br></pre></td></tr></table></figure><div class="note success">file = open(‘dict.txt’,’r+’)这个函数用于读取txt文件，“r+”模式是读写模式，既可以读也可以写。<br><br>核心是line = file.readline()然后whlie line:循环使用line = file.readline()即可遍历到每一行。<br><br></div><h1 id="大作业"><a href="#大作业" class="headerlink" title="大作业"></a>大作业</h1><h2 id="题目1：打地鼠"><a href="#题目1：打地鼠" class="headerlink" title="题目1：打地鼠"></a>题目1：打地鼠</h2><p>编写程序，模拟打地鼠游戏。假设一共 8 个洞口，地鼠最开始的时候随机出现在其中一个洞口，然后玩家随机打开一个洞口。其中每轮打地鼠结果描述如下：</p><p>（1） 如果里面有地鼠就打到了，游戏结束。</p><p>（2） 如果洞口里没有地鼠就计算离打到地鼠还距离几个洞口，如果相差 1 个洞口，就提示“很遗憾，就差一点”，然后开始第二轮打地鼠；如果相差 2 个及以上洞口的话，就再给一次打的机会，打到游戏结束，没打到则开始第下一轮打地鼠。</p><p>（3） 下一轮再打时， 地鼠会在玩家再次打之前随机跳到某个洞口里。</p><p> 其它要求：</p><p>（1） 游戏总共提供 10 次机会，编写进度条展示游戏进行的情况。</p><p>（2） 每轮初始输入洞口号需要进行合法性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">()</span>:</span></span><br><span class="line">    right = random.randint(<span class="number">1</span>,<span class="number">8</span>)</span><br><span class="line">    print(<span class="string">"地鼠现在在&#123;&#125;号洞口"</span>.format(right))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        guess = input(<span class="string">"请输入洞口号："</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> eval(guess) == right:</span><br><span class="line">                print(<span class="string">"恭喜你打到地鼠了！游戏结束！"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> eval(guess) - right == <span class="number">1</span> <span class="keyword">or</span> right - eval(guess) == <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">"很遗憾，就差一点了！即将进入下一局！"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"没打到哦，再给你一次机会吧！"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"你输入的数据不合法！请重新输入"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    scale = <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        a = <span class="string">'*'</span> * i</span><br><span class="line">        b = <span class="string">'-'</span> * (scale - i)</span><br><span class="line">        c = i/(scale) * <span class="number">100</span></span><br><span class="line">        print(<span class="string">"[&#123;&#125;-&gt;&#123;&#125;]&#123;&#125;%"</span>.format(a,b,c))</span><br><span class="line">        print(<span class="string">"这是第&#123;&#125;次游戏"</span>.format(i).center(<span class="number">20</span>,<span class="string">'-'</span>))</span><br><span class="line">        game()</span><br><span class="line">        print(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><h2 id="题目2：打印杨辉三角形"><a href="#题目2：打印杨辉三角形" class="headerlink" title="题目2：打印杨辉三角形"></a>题目2：打印杨辉三角形</h2><p>杨辉三角形通常从第 0 行开始枚举，并且每一行的数字是上一行相邻两个数字的和。简单的杨辉三角形可以由以下方式产生：在第 0 行只写一个数字 1，然后构造下一行的元素。将上一行中数字左侧上方和右侧上方的数值相加。如果左侧上方或右侧上方数字不存在，用 0代替。例如，第一行的第一个数字是 0+1=1，而第三行的数字 1 和 3 相加得到在第 4 行的数字 4，下面给出 6 行的杨辉三角形。</p><p>1</p><p>1 1</p><p>1 2 1</p><p>1 3 3 1</p><p>1 4 6 4 1</p><p>1 5 10 10 5 1</p><p>编写程序：提示输入杨辉三角形的高度，然后生成和上面例子一样风格的三角形并打印输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span><span class="params">()</span>:</span></span><br><span class="line">    a = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a=[sum(i) <span class="keyword">for</span> i <span class="keyword">in</span> zip([<span class="number">0</span>] + a,a + [<span class="number">0</span>])]</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">            print(x,end=<span class="string">' '</span>) <span class="comment"># 每个数中间用空格隔开</span></span><br><span class="line">        print(<span class="string">""</span>)<span class="comment"># 换行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    g=triangles()</span><br><span class="line">    number = eval(input(<span class="string">"请输入杨辉三角形的高度:"</span>))</span><br><span class="line">    <span class="keyword">if</span> number &gt; <span class="number">1</span>:</span><br><span class="line">        print(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(number):</span><br><span class="line">        next(g)</span><br></pre></td></tr></table></figure><h2 id="题目3：密码"><a href="#题目3：密码" class="headerlink" title="题目3：密码"></a>题目3：密码</h2><p>编写程序模拟验证码的验证过程，具体要求如下：</p><p>（1）程序从 26 个大小写英文字母和 10 个数字中随机生成长度为 4 的验证码。</p><p>（2）显示当前的验证码，并请用户输入；如果输入正确，则提示验证成功，退出程序；否则重新生成验证码，提示用户重新输入。如果验证错误次数大于等于 3 次，则提示用户验证失败，退出程序。</p><p>要求：随机验证码的生成用函数实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">code</span><span class="params">()</span>:</span></span><br><span class="line">    code1 = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'a'</span>),ord(<span class="string">'z'</span>))]</span><br><span class="line">    code2 = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'A'</span>),ord(<span class="string">'Z'</span>))]</span><br><span class="line">    code3 = [chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(ord(<span class="string">'0'</span>),ord(<span class="string">'9'</span>))]</span><br><span class="line">    codes = code1 + code2 + code3</span><br><span class="line">    p = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        j = random.randint(<span class="number">0</span>,len(codes)<span class="number">-1</span>)</span><br><span class="line">        p = p + codes[j]</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    right = code()</span><br><span class="line">    print(<span class="string">"验证码为[&#123;&#125;]"</span>.format(right))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        answer = input(<span class="string">"请输入验证码："</span>)</span><br><span class="line">        <span class="keyword">if</span> answer == right:</span><br><span class="line">            print(<span class="string">"验证成功！"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> answer != right:</span><br><span class="line">            print(<span class="string">"验证失败，请重新输入！"</span>)</span><br></pre></td></tr></table></figure><h2 id="题目4：西游记"><a href="#题目4：西游记" class="headerlink" title="题目4：西游记"></a>题目4：西游记</h2><p>编程读取文件“西游记.txt”，统计人物出场次数，并输出结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">file = open(<span class="string">'西游记.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'gbk'</span>).read()</span><br><span class="line">words = jieba.lcut(file)</span><br><span class="line">counts = &#123;&#125;</span><br><span class="line">exclude = &#123;<span class="string">"我们"</span>,<span class="string">"来到"</span>,<span class="string">"一个"</span>,<span class="string">"国王"</span>,<span class="string">"小妖"</span>,<span class="string">"什么"</span>,<span class="string">"变成"</span>,<span class="string">"菩萨"</span>,</span><br><span class="line">           <span class="string">"你们"</span>,<span class="string">"和尚"</span>,<span class="string">"怎么"</span>,<span class="string">"那怪"</span>,<span class="string">"二人"</span>,<span class="string">"就是"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> len(word) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        counts[word] = counts.get(word,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> exclude:</span><br><span class="line">    <span class="keyword">del</span>(counts[word])</span><br><span class="line">items = list(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    word,count = items[i]</span><br><span class="line">    print(word,count)</span><br></pre></td></tr></table></figure><h2 id="题目5：凯撒密码升级完整版"><a href="#题目5：凯撒密码升级完整版" class="headerlink" title="题目5：凯撒密码升级完整版"></a>题目5：凯撒密码升级完整版</h2><p>分别定义解码和编码的函数，增加移位数的选择，增加退出功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">incoding</span><span class="params">(origin,k)</span>:</span></span><br><span class="line">    code = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> origin:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'a'</span> &lt;= word &lt;= <span class="string">'z'</span>:</span><br><span class="line">            word = chr((ord(word) - ord(<span class="string">'a'</span>) + k) % <span class="number">26</span> + ord(<span class="string">'a'</span>))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'A'</span> &lt;= word &lt;= <span class="string">'Z'</span>:</span><br><span class="line">            word = chr((ord(word) - ord(<span class="string">'A'</span>) + k) % <span class="number">26</span> + ord(<span class="string">'A'</span>))</span><br><span class="line">        code = code + word</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decoding</span><span class="params">(code,k)</span>:</span></span><br><span class="line">    origin = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> code:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'a'</span> &lt;= word &lt;= <span class="string">'z'</span>:</span><br><span class="line">            word = chr((ord(word) - ord(<span class="string">'a'</span>) - k) % <span class="number">26</span> + ord(<span class="string">'a'</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'A'</span> &lt;= word &lt;= <span class="string">'Z'</span>:</span><br><span class="line">            word = chr((ord(word) - ord(<span class="string">'A'</span>) - k) % <span class="number">26</span> + ord(<span class="string">'A'</span>))</span><br><span class="line">        origin = origin + word</span><br><span class="line">    <span class="keyword">return</span> origin</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"1.加密\n2.解密\n3.退出"</span>)</span><br><span class="line">        op = eval(input(<span class="string">"请选择："</span>))</span><br><span class="line">        <span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">            origin = input(<span class="string">"请输入待加密的字符串："</span>)</span><br><span class="line">            k = eval(input(<span class="string">"请输入移位的个数："</span>))</span><br><span class="line">            print(<span class="string">"加密后的密文是：&#123;&#125;"</span>.format(incoding(origin,k)))</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">2</span>:</span><br><span class="line">            code = input(<span class="string">"请输入密文："</span>)</span><br><span class="line">            k = eval(input(<span class="string">"请输入移位的个数："</span>))</span><br><span class="line">            print(<span class="string">"解密后的原文是：&#123;&#125;"</span>.format(decoding(code,k)))</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="number">3</span>:</span><br><span class="line">            print(<span class="string">"再见！"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"请选择正确的编号！"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JMeter 压力测试教程</title>
      <link href="/2018/08/21/JMeter-%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%95%99%E7%A8%8B/"/>
      <url>/2018/08/21/JMeter-%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>用badboy录制脚本，在JMeter上对服务器进行压力测试的基本教程。</p><a id="more"></a><h1 id="安装和环境配置"><a href="#安装和环境配置" class="headerlink" title="安装和环境配置"></a>安装和环境配置</h1><p>JMeter需要 java 环境，所以首先安装 JDK，配置 java 的环境变量。</p><p>然后在 JMeter 官网下载压缩包 <a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">JMeter官网链接</a>：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrREz6.png" alt="JrREz6.png"></p><p>修改环境变量，在【我的电脑】- &gt; 右键【属性】 -&gt; 【高级系统设置】 -&gt; 【高级】 -&gt; 【环境变量】</p><p>在系统变量中新建一个变量</p><p>变量名：【JMETER_HOME】</p><p>变量值：【D:\apache-jmeter-4.0\】（自己jmeter文件的解压路径）</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrxqyN.png" alt="JrxqyN.png"></p><p>变量名：【CLASSPATH】</p><p>变量值：【%JMETER_HOME\lib\ext\ApacheJMeter_core.jar;%JMETER_HOME%\lib\jorphan.jar;%JMETER_HOME%\lib\logkit-2.0.jar;】</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrxX2J.png" alt="JrxX2J.png"></p><p>这样就把 JMeter 的环境变量配置好了，在 JMeter 文件夹的 bin 目录下，找到<span class="label danger">jmeter.bat</span>，双击运行就可以打开 jmeter 的GUI界面。</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrUEMX.png" alt="JrUEMX.png"></p><p>接下来需要下载 badboy （用来录制脚本），直接在官网下载，<a href="http://www.badboy.com.au/download/index" target="_blank" rel="noopener">badboy官网下载地址</a>，然后安装好就可以使用了。</p><h1 id="用badboy录制脚本"><a href="#用badboy录制脚本" class="headerlink" title="用badboy录制脚本"></a>用badboy录制脚本</h1><p>打开badboy，在上方搜索框中输入网址，我这里输入的是搜狐的官网地址，按下回车，就可以进入网页中，左侧的测试套件文件夹中，有个test1文件夹，里面的 step1 对应的就是打开搜狐官网这个操作。</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrUKPG.png" alt="JrUKPG.png"></p><p>接下来在搜索框中输入搜索信息，点击打开搜索信息页，这些步骤都会在badboy 的左侧文件结构中自动添加，最后效果如下：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrsGRu.png" alt="JrsGRu.png"></p><p>把“+”号点开以后，可以看到每个请求低下还包含很多子请求，在badboy中，会自动把主请求和子请求分开，但是在JMeter中所有的请求都会堆在一起，为了便于区分，我们先在badboy中添加自步骤（<span class="label danger">Add Child Step</span>）：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrsrgD.png" alt="JrsrgD.png"></p><p>最后左侧的结果效果大概是这样：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/Jrs80i.png" alt="Jrs80i.png"></p><p>录制脚本基本就是这个流程，可以回放（<span class="label danger">Play Whole Test</span>）查看录制的响应内容，然后保存，直接Export To Jmeter。文件名的后缀是<span class="label danger">“.jmx”</span>，也可以把这个录制好的脚本直接保存下来，文件名的后缀是<span class="label danger">“.bx”</span>。</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrsAdL.png" alt="JrsAdL.png"></p><h1 id="在JMeter上进行压力测试"><a href="#在JMeter上进行压力测试" class="headerlink" title="在JMeter上进行压力测试"></a>在JMeter上进行压力测试</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>打开jmeter，点击左上角的【文件】- &gt; 【打开】 ，找到刚刚保存的 ”.jmx”文件，打开。</p><p>可以看到<span class="label danger">线程组</span>，名称可以自己修改，改变线程组数，比如我填写的10，就会模拟10次访问操作（即给服务器施加压力），也可以修改间隔时间、循环次数。</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrsWNw.png" alt="JrsWNw.png"></p><p>再添加一个<span class="label danger">“查看结果树”</span>便于查看运行结果：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrsqsR.png" alt="JrsqsR.png"></p><p>接下来，点击上方绿色的“运行”之后，结果树里就会将子请求的访问信息增添到里面，绿色表示通过。选择<span class="label danger">HTML</span>，查看<span class="label danger">“相应数据”</span>即可看到一些网页的响应效果。</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/JrshI8.png" alt="JrshI8.png"></p><h2 id="参数化设置"><a href="#参数化设置" class="headerlink" title="参数化设置"></a>参数化设置</h2><p>参数化的压力测试运用场景：模拟多次搜索，每次搜索不同的内容时，就可以对搜索内容进行参数化自动模拟。</p><p>首先，找到搜索对应的链接，点击鼠标右键，<span class="label danger">“添加CSV数据文件设置”</span>：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5JwDD.png" alt="J5JwDD.png"></p><p>然后打开CSV数据文件设置页，需要修改一些内容：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5JxeD.png" alt="J5JxeD.png"></p><p>注意要记住CSV数据文件的位置，还有变量名称右面还要用上。</p><p>在文件路径下，创建一个data.dat的文件，用 <span class="label danger">notepad++</span>编辑，在里面输入想要搜索的参数：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5JThv.png" alt="J5JThv.png"></p><p>然后在搜素的那个页面中，可以找到搜索的关键词，将变量值改为<span class="label danger">${query}</span>，大括号内就是刚刚输入的变量名称：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5Vgfc.png" alt="J5Vgfc.png"></p><p>再次运行，在结果树，选择<span class="label danger">HTML</span>，查看<span class="label danger">响应数据</span>，就可以看到参数化的搜索信息：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J58iLD.png" alt="J58iLD.png"></p><h2 id="事务设置"><a href="#事务设置" class="headerlink" title="事务设置"></a>事务设置</h2><p>运用场景：在JMeter中，所有的请求都列在一起，生成的报告就不方面我们查看效果，所以我们用事务进行分类。</p><p>依然是点击鼠标右键，添加<span class="label danger">事务控制器</span></p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5ZIkF.png" alt="J5ZIkF.png"></p><p>然后可以把相关的请求全部拖到一个事务中，给事务修改名称。</p><h2 id="检查点设置"><a href="#检查点设置" class="headerlink" title="检查点设置"></a>检查点设置</h2><p>应用场景：刚刚对搜索内容进行了参数化的设置，那么我们怎么知道jmeter的确搜索到了这些参数内容呢？那么就需要增加检查点，检查搜索到的内容是不是包含我们的搜索参数。</p><p>依然在搜索页面下，添加<span class="label danger">响应断言</span>。</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5tJLD.png" alt="J5tJLD.png"></p><p>在响应断言的页面中修改相关内容，增加要测试的模式，即是前面增加的搜索参数，写法和参数化中的写法完全一样，这样就设置好了响应断言。</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5tgfv.png" alt="J5tgfv.png"></p><p>再次运行，在结果树中，如果都是绿色的，就表示断言都通过了，搜索到的内容的确就是输入的搜索参数。</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5Zfxt.png" alt="ss.png"></p><h2 id="集合点设置"><a href="#集合点设置" class="headerlink" title="集合点设置"></a>集合点设置</h2><p>运用场景：修改同时操作的用户数。</p><p>点击鼠标右键，添加<span class="label danger">Synchronize Timer</span></p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5ZnSJ.png" alt="J5ZnSJ.png"></p><p>修改对应的设置：</p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5Zeo0.png" alt="J5Zeo0.png"></p><h1 id="压力测试结果查看"><a href="#压力测试结果查看" class="headerlink" title="压力测试结果查看"></a>压力测试结果查看</h1><p>添加<span class="label danger">聚合报告</span></p><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5ZOcR.png" alt="J5ZOcR.png"></p><p>运行完后，聚合报告会显示压测的结果。主要观察Samples、Average、error、Throughput。</p><ol><li>Samples:表示一共发出的请求数</li><li>Average：平均响应时间，默认情况下是单个Request 的平均响应时间（ms）</li><li>Error%:测试出现的错误请求数量百分比。若出现错误就要看服务端的日志，配合开发查找<br>定位原因</li><li>Throughput:简称tps,吞吐量，默认情况下表示每秒处理的请求数，也就是指服务器处理<br>能力，tps 越高说明服务器处理能力越好。</li></ol><p><img src="https://t1.picb.cc/uploads/2018/08/21/J5wJ8i.png" alt="J5wJ8i.png"></p>]]></content>
      
      <categories>
          
          <category> 软件测试 </category>
          
          <category> JMeter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/2018/07/24/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/24/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>新手学习SpringMVC，笔记持续更新……</p><a id="more"></a><h1 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h1><h2 id="controller-java"><a href="#controller-java" class="headerlink" title="controller.java"></a>controller.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/page/&#123;name&#125;/&#123;age&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(ModelMap map, @PathVariable(<span class="string">"name"</span>)</span> String name, @<span class="title">PathVariable</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>&#123;</span><br><span class="line">        map.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        map.addAttribute(<span class="string">"age"</span>, age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>RequestMapping中的value代表页面的url路径，{name}和{age}是两个动态参数。</p><p>在getName函数中，需要声明这两个变量的变量类型（IDEA中可以用alt+enter自动补全）。</p><p>返回值是”name”，所以接下来需要创建、编辑name.jsp文件。</p><h2 id="name-jsp"><a href="#name-jsp" class="headerlink" title="name.jsp"></a>name.jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    名字：$&#123;name&#125;&lt;br&gt;</span><br><span class="line">    年龄：$&#123;age&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>通过 <span class="label danger">\${name}</span> 和 <span class="label danger">${age}</span> 来获取主函数中的参数。</p><h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><p>运行项目，在浏览器中打开：localhost:8080/page/xiaoming/12，效果如下：</p><p><img src="https://i.loli.net/2018/07/24/5b56fa475ea95.png" alt="3.png"></p><p>更改一下url中的内容，网页内容也会随之改变：</p><p><img src="https://i.loli.net/2018/07/24/5b56fa475ea95.png" alt="2.png"></p><h1 id="url参数"><a href="#url参数" class="headerlink" title="url参数"></a>url参数</h1><h2 id="controller-java-1"><a href="#controller-java-1" class="headerlink" title="controller.java"></a>controller.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/result"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">result</span><span class="params">(ModelMap map, @RequestParam String name,@RequestParam <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        map.addAttribute(<span class="string">"name"</span>,name);</span><br><span class="line">        map.addAttribute(<span class="string">"age"</span>,age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数中同样传入两个参数：name和age。用的是<span class="label danger">RequestParam</span>的传参方式。</p><p>返回值是result，所以需要新增、编辑一个result.jsp文件。</p><h2 id="result-jsp"><a href="#result-jsp" class="headerlink" title="result.jsp"></a>result.jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    名字：$&#123;name&#125;&lt;br&gt;</span><br><span class="line">    年龄：$&#123;age&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="访问页面-1"><a href="#访问页面-1" class="headerlink" title="访问页面"></a>访问页面</h2><p>运行项目，在浏览器中打开localhost:8080/result，结果如下：</p><p><img src="https://i.loli.net/2018/07/24/5b573dc4b2207.png" alt="4.png"></p><p>显示没有name参数。</p><p>这个是需要从url中传参的，传参方式是在浏览器中输入链接地址：localhost:8080/result?name=xiaoming&amp;age=12，效果如图：</p><p><img src="https://i.loli.net/2018/07/24/5b573e6b06db6.png" alt="5.png"></p><p>这种在url中添加<span class="label danger">?参数=参数名</span>的方式，就是url传参的方法。如果有多个参数，就用<span class="label danger"> &</span>符号连接即可。</p><h1 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h1><h2 id="controller-java-2"><a href="#controller-java-2" class="headerlink" title="controller.java"></a>controller.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/adduser"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(ModelMap map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//html表单</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"add_user"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数里面暂时没有指令，返回值是“add_user”，所以接下来新建、编辑add_user.jsp。</p><h2 id="add-user-jsp"><a href="#add-user-jsp" class="headerlink" title="add_user.jsp"></a>add_user.jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;添加用户&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"result"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    姓名：&lt;label&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    年龄：&lt;label&gt;</span><br><span class="line">    &lt;input type=<span class="string">"number"</span> name=<span class="string">"age"</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="访问页面-2"><a href="#访问页面-2" class="headerlink" title="访问页面"></a>访问页面</h2><p>运行项目，在浏览器中打开localhost:8080/adduser，结果如下：</p><p><img src="https://i.loli.net/2018/07/25/5b57cd3be9cf7.png" alt="6.png"></p><p>可以输入内容后点击提交，就会跳转到前面编辑过的result页面：</p><p><img src="https://i.loli.net/2018/07/25/5b57cd9464b6d.png" alt="7.png"></p><span class="label danger">这时get方式的效果，如果是post方式，参数就不会在url中显现。</span><p>现在改为post方式，需要把add_user.jsp中form标签中的method改为post，同时把controller.java中的result函数改为post方式：</p><p>↓ add_user.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"result"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    姓名：&lt;label&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    年龄：&lt;label&gt;</span><br><span class="line">    &lt;input type=<span class="string">"number"</span> name=<span class="string">"age"</span>&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>↓ controller.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/result"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">result</span><span class="params">(ModelMap map, @RequestParam String name,@RequestParam <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="comment">//url参数</span></span><br><span class="line">        map.addAttribute(<span class="string">"name"</span>,name);</span><br><span class="line">        map.addAttribute(<span class="string">"age"</span>,age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>页面效果如下，url中不会有参数回显：</p><p><img src="https://i.loli.net/2018/07/25/5b57cfd4cf9bc.png" alt="8.png"></p><h1 id="使用Spring-MVC的表单"><a href="#使用Spring-MVC的表单" class="headerlink" title="使用Spring MVC的表单"></a>使用Spring MVC的表单</h1><div class="note success">使用SpringMVC的表单比HTML表单有什么优势呢？<br><br>如果想创建一个表单，并且给它提供一个默认值时，使用SpringMVC的表单非常方便。可以先从数据库里面查询出特定的值，然后填充到表单里。</div><h2 id="add-user-jsp-1"><a href="#add-user-jsp-1" class="headerlink" title="add_user.jsp"></a>add_user.jsp</h2><p>先把刚刚写的HTML那一段form标签里面的内容注释掉，然后改写为调用SpringMVC的form：</p><p><img src="https://i.loli.net/2018/07/25/5b57d2cef1781.png" alt="9.png"></p><p>代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form action=<span class="string">"result"</span> method=<span class="string">"post"</span> modelAttribute=<span class="string">"user"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><p>这里相当于是从ModelMap中取值，名称为user。user值我们还没有创建，所以现在需要先创建一个user对象。在src/com.spring.mvc目录下新建一个Java Class，命名为User。</p><h2 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h2><p>设置两个参数变量：String类型的name变量，和 int 类型的age变量。然后写上初始化函数和传参函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//两个默认参数对应的值</span></span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age=<span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化和传参函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller-java-3"><a href="#controller-java-3" class="headerlink" title="controller.java"></a>controller.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/adduser"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(ModelMap map)</span></span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setName(<span class="string">"cici"</span>);</span><br><span class="line">        map.addAttribute(<span class="string">"user"</span>,u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"add_user"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>new一个user对象，setName为cici，然后通过addAttribute传入参数。目前user对应的两个变量应该是：name被改为cici了，age没有被修改，即是默认值20。（默认值定义在User.java中）</p><span class="label danger">这里的user参数和add_user.jsp的form标签里写的modelAttribute=user相对应。</span><p>现在继续完成add_user.jsp：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form:form action=<span class="string">"result"</span> method=<span class="string">"post"</span> modelAttribute=<span class="string">"user"</span>&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">"name"</span>/&gt;&lt;br&gt;</span><br><span class="line">    &lt;form:input path=<span class="string">"age"</span>/&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>/&gt;</span><br><span class="line">&lt;/form:form&gt;</span><br></pre></td></tr></table></figure><p>这时表单会先进行默认的数据填充。</p><h2 id="访问页面-3"><a href="#访问页面-3" class="headerlink" title="访问页面"></a>访问页面</h2><p>重新部署后，访问页面localhost:8080/adduser，可以看到表单已经按照默认数据进行了填充。</p><p><img src="https://i.loli.net/2018/07/25/5b57d670d5163.png" alt="10.png"></p><h1 id="使用Hibernate连接数据库"><a href="#使用Hibernate连接数据库" class="headerlink" title="使用Hibernate连接数据库"></a>使用Hibernate连接数据库</h1><h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p>我使用的数据库是xampp这个集成环境，运行xampp后，在浏览器中打开localhost/dashboard，再进入phpmyadmin，就可以进入到编辑数据库的地方。</p><p><img src="https://i.loli.net/2018/07/25/5b57e0ac83c49.png" alt="11.png"></p><p><img src="https://i.loli.net/2018/07/25/5b57e0acd43b4.png" alt="12.png"></p><p>现在，在phpmyadmin中新建一个数据库，数据库名为<span class="label danger">mydb</span>，编码方式是<span class="label danger"> utf8_general_ci</span>。</p><p>接下来创建一个数据库表，表名为<span class="label danger">users</span>，字段数<span class="label danger"> 3</span>。</p><p>第一列的名字为 id ，类型为BIGINT，勾选自增长组建。</p><p>第二列的名字为name，类型为VARCHAR，不超过100个字符长度。</p><p>第三列的名字为age，类型为TINYINT。</p><p><img src="https://i.loli.net/2018/07/25/5b57e346ccf46.png" alt="14.png"></p><p>保存后，就会创建这样一个mydb数据库，users表。</p><p>然后插入一条数据，name=admin，age=5：</p><p><img src="https://i.loli.net/2018/07/25/5b57e3eda4bb0.png" alt="15.png"></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>在IDEA中打开database，添加一个数据库，选择类型为mysql：</p><p><img src="https://i.loli.net/2018/07/25/5b57e48d23c0d.png" alt="16.png"></p><p>然后填写数据库信息，xampp默认的用户名是root，密码为空：</p><p><img src="https://t1.picb.cc/uploads/2018/07/25/JflTVt.png" alt="JflTVt.png"></p><p>连接成功后，就可以看到数据库的情况了：</p><p><img src="https://i.loli.net/2018/07/25/5b57ecdd97a4d.png" alt="20.png"></p><h2 id="使用Hibernate框架"><a href="#使用Hibernate框架" class="headerlink" title="使用Hibernate框架"></a>使用Hibernate框架</h2><p>在项目上点右键，选择“add Framework Support”：</p><p><img src="https://i.loli.net/2018/07/25/5b57ecdd9dfb4.png" alt="18.png"></p><p>勾选对应的，然后download：</p><p><img src="https://i.loli.net/2018/07/25/5b57ecdda751a.png" alt="19.png"></p><p>然后，添加一个包名，勾选users：</p><p><img src="https://t1.picb.cc/uploads/2018/07/25/Jflzl0.png" alt="Jflzl0.png"></p><p>点击OK，就会全自动的生成对应的文件。</p><p>在这个配置文件下，可以看到引用了一个包com.mysql.jdbc.Driver，我们的项目中并没有这个包，所以需要先下载这个包。</p><p>可以在mysql官网下载mysql-connector-java 的jar包：</p><p><img src="https://i.loli.net/2018/07/25/5b57f52133fd1.png" alt="22.png"></p><p>然后在IDEA中导入mysql-connector-java.jar，在项目文件夹的lib中，拷贝这个jar文件。</p><p>然后在File –&gt; Project Structure，在左侧找到Libraries，添加这个jar文件。</p><p><img src="https://t1.picb.cc/uploads/2018/07/25/JflDv1.png" alt="JflDv1.png"></p><p>然后发现problems里面有几个问题，都是没有添加的问题，点击【fix】就可以自动修复。</p><p>再回到配置代码中，可以看到这个包已经可以正常调用了：</p><p><img src="https://i.loli.net/2018/07/25/5b57f792ebc0b.png" alt="24.png"></p><h1 id="获取数据库中的数据"><a href="#获取数据库中的数据" class="headerlink" title="获取数据库中的数据"></a>获取数据库中的数据</h1><p>在 com.spring.mvc 包目录下新建一个包，命名为db，把Entities包移动到 com.spring.mvc 包目录下，然后把main函数移动到db包中，把main函数改名为DbConnection，其中的主函数暂时不需要，可以注释掉。</p><p>最终的目录结构以及DbConnection.java的内容如图：</p><p><img src="https://i.loli.net/2018/07/25/5b58130754e87.png" alt="25.png"></p><p>在 com.spring.mvc包中，再创建一个controller包，并把Controller.java移动进去。</p><p>在 WEB-INF文件下，新建一个classes目录，并把hibernate的配置文件移动进去。</p><h2 id="hibernate-cfg-xml"><a href="#hibernate-cfg-xml" class="headerlink" title="hibernate.cfg.xml"></a>hibernate.cfg.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/mydb?serverTimezone=UTC<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.spring.mvc.db.Entities.UsersEntity"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- DB schema will be updated if needed --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="hbm2ddl.auto"&gt;update&lt;/property&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.mvc.controllers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.spring.mvc.db.DbConnection;</span><br><span class="line"><span class="keyword">import</span> com.spring.mvc.db.Entities.UsersEntity;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">listUsers</span><span class="params">(ModelMap map)</span></span>&#123;</span><br><span class="line">        Session session = DbConnection.getSession();</span><br><span class="line">        List&lt;UsersEntity&gt; list=session.createCriteria(UsersEntity.class).list();</span><br><span class="line">        map.addAttribute(<span class="string">"users"</span>,list);</span><br><span class="line">        session.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"users"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="users-jsp"><a href="#users-jsp" class="headerlink" title="users.jsp"></a>users.jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.spring.mvc.db.Entities.UsersEntity"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;%<span class="keyword">for</span> (UsersEntity e:(List&lt;UsersEntity&gt;)request.getAttribute(<span class="string">"users"</span>))&#123; %&gt;</span><br><span class="line">    &lt;li&gt;名字：&lt;%out.print(e.getName());%&gt;,年龄：&lt;%out.print(e.getAge());%&gt;&lt;/li&gt;</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="访问页面-4"><a href="#访问页面-4" class="headerlink" title="访问页面"></a>访问页面</h2><p>localhost:8080/users页面效果如下：</p><p><img src="https://i.loli.net/2018/07/25/5b58286694252.png" alt="26.png"></p><p>成功从数据库中获取到了数据并呈现出来。</p><h1 id="实现添加用户的函数"><a href="#实现添加用户的函数" class="headerlink" title="实现添加用户的函数"></a>实现添加用户的函数</h1><p>为了使代码更合理，先把<span class="label danger">adduser函数和result函数</span>从最初的HelloMVCController中，移动到UserController中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/adduser"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(ModelMap map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//表单</span></span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setName(<span class="string">"cici"</span>);</span><br><span class="line">        map.addAttribute(<span class="string">"user"</span>,u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"add_user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/result"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">result</span><span class="params">(ModelMap map, @RequestParam String name,@RequestParam <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="comment">//url参数</span></span><br><span class="line">        map.addAttribute(<span class="string">"name"</span>,name);</span><br><span class="line">        map.addAttribute(<span class="string">"age"</span>,age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在需要修改result函数，把获取到的参数保存到服务器，而不仅仅是ModelMap map，修改后的result函数如下，其中新传入了一个参数HttpServletRequest request和HttpServletResponse response，需要增加相关的包：<span class="label danger">import javax.servlet.http.HttpServletRequest;</span>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/result"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">result</span><span class="params">(ModelMap map, @RequestParam String name, @RequestParam <span class="keyword">int</span> age,</span></span></span><br><span class="line"><span class="function"><span class="params">                         HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        <span class="comment">//url参数</span></span><br><span class="line">        map.addAttribute(<span class="string">"name"</span>,name);</span><br><span class="line">        map.addAttribute(<span class="string">"age"</span>,age);</span><br><span class="line"></span><br><span class="line">        Session session = DbConnection.getSession();</span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line">        UsersEntity ue = <span class="keyword">new</span> UsersEntity();</span><br><span class="line">        ue.setName(name);</span><br><span class="line">        ue.setAge((<span class="keyword">byte</span>)age);</span><br><span class="line">        session.save(ue);</span><br><span class="line"></span><br><span class="line">        transaction.commit();</span><br><span class="line">        session.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后在result.jsp中引入一段程序，进行跳转：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    response.sendRedirect(<span class="string">"users"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    名字：$&#123;name&#125;&lt;br&gt;</span><br><span class="line">    年龄：$&#123;age&#125;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        response.sendRedirect(<span class="string">"users"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>现在在users.jsp中，加入一个跳转链接：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="adduser"&gt;添加用户&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.spring.mvc.db.Entities.UsersEntity"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;%<span class="keyword">for</span> (UsersEntity e:(List&lt;UsersEntity&gt;)request.getAttribute(<span class="string">"users"</span>))&#123; %&gt;</span><br><span class="line">    &lt;li&gt;名字：&lt;%out.print(e.getName());%&gt;,年龄：&lt;%out.print(e.getAge());%&gt;&lt;/li&gt;</span><br><span class="line">    &lt;%&#125;%&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;a href="adduser"&gt;添加用户&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行项目，打开localhost:8080/users，页面效果如下：</p><p><img src="https://i.loli.net/2018/07/25/5b588c7ca25f2.png" alt="27.png"></p><p>点击链接，进入到adduser界面，添加用户信息，点击提交：</p><p><img src="https://i.loli.net/2018/07/25/5b588c7cd38a3.png" alt="28.png"></p><p>回到了users页面，并且这条数据已经加入到用户列表中了！神奇！</p><p><img src="https://i.loli.net/2018/07/25/5b588c7d0f6a4.png" alt="29.png"></p><p>登到phpmyadmin中看一看，神奇！已经写入了mydb的数据库，users表中：</p><p><img src="https://i.loli.net/2018/07/25/5b588ce61beb9.png" alt="30.png"></p>]]></content>
      
      <categories>
          
          <category> spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于SpringMVC的url-pattern</title>
      <link href="/2018/07/24/%E5%85%B3%E4%BA%8ESpringMVC%E7%9A%84url-pattern/"/>
      <url>/2018/07/24/%E5%85%B3%E4%BA%8ESpringMVC%E7%9A%84url-pattern/</url>
      <content type="html"><![CDATA[<p>记录在学习spring MVC中遇到的一个坑：controller里面定义的内容无法访问，报错404。最后发现是web.xml配置文件里面的一个小错误，在这里做一个记录。</p><a id="more"></a><p>在Intelli IDEA中初始化一个springMVC项目以后，web.xml的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在controller中定义了一个页面跳转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMVCController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printWelcome</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Spring MVC Hello World"</span>);</span><br><span class="line">        model.put(<span class="string">"content"</span>, <span class="string">"This is my first spring mvc web!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>servlet.xml中也定义了文件位置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对应src下的包名，需要自己新建--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.mvc"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 这个配置是配置JSP页面的位置，按照你自己的配置来配 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然而每次只能访问到 localhost:8080,显示的内容是WEB-INF目录下的index.jsp，手动在url中加上“/hello”,就报错404，十分绝望。</p><p>其实是在web.xml中的 <span class="label danger">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span> 出了问题，改为  <span class="label danger">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span> 就可以了！</p><div class="note info">①：&lt;url-pattern&gt;/&lt;/url-pattern&gt;  会匹配到/login这样的路径型url，不会匹配到模式为*.jsp这样的后缀型url<br><br>②：&lt;url-pattern&gt;/*&lt;/url-pattern&gt; 会匹配所有url：路径型的和后缀型的url(包括/login,*.jsp,*.js和*.html等) </div><p>①：地址为 localhost:8080/login , /login 返回login.jsp  访问去Controller下的/login 跳转到相应的视图login.jsp </p><p>②：访问的地址为 localhost:8080/login/ ，/login 返回login.jsp  访问去Controller下的/login,跳转到login.jsp ，然后进过dispatchservlet的时候，由于是/* ，又会以localhost:8088/login/login.jsp 去请求Controller ,那么如果Controller没有 /login/login.jsp 的Mapping映射，则会报404 错误！ </p>]]></content>
      
      <categories>
          
          <category> spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++ SLT学习笔记</title>
      <link href="/2018/07/19/C-SLT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/19/C-SLT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/coder.jpg" width="600" height="300" alt="git" align="center"> </p><p>感觉自己敲了很久的C++，每次做算法题目的时候，依然还停留在C的水平，这次系统的学习一下C++ STL 中的数据结构和容器。</p><a id="more"></a><h1 id="什么是STL？"><a href="#什么是STL？" class="headerlink" title="什么是STL？"></a>什么是STL？</h1><p>STL（Standard Template Library），即标准模板库，是一个具有工业强度的，高效的C++程序库。它被容纳于C++标准程序库（C++ Standard Library）中，是ANSI/ISO C++标准中最新的也是极具革命性的一部分。该库包含了诸多在计算机科学领域里所常用的基本数据结构和基本算法。为广大C++程序员们提供了一个可扩展的应用框架，高度体现了软件的可复用性。 </p><p>STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但这种分离确实使得STL变得非常通用。例如，由于STL的sort()函数是完全通用的，你可以用它来操作几乎任何数据集合，包括链表，容器和数组； </p><p>STL另一个重要特性是它不是面向对象的。为了具有足够通用性，STL主要依赖于模板而不是封装，继承和虚函数（多态性）——OOP的三个要素。你在STL中找不到任何明显的类继承关系。这好像是一种倒退，但这正好是使得STL的组件具有广泛通用性的底层特征。另外，由于STL是基于模板，内联函数的使用使得生成的代码短小高效；</p><p> 从逻辑层次来看，在STL中体现了泛型化程序设计的思想，引入了诸多新的名词，比如像需求（requirements），概念（concept），模型（model），容器（container），算法（algorithmn），迭代子（iterator）等。与OOP（object-oriented programming）中的多态（polymorphism）一样，泛型也是一种软件的复用技术；从实现层次看，整个STL是以一种类型参数化的方式实现的，这种方式基于一个在早先C++标准中没有出现的语言特性–模板（template）。 </p><div class="note info">总之，C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</div><p>C++ 标准模板库的核心包括以下三个组件：</p><table><thead><tr><th style="text-align:left">组件</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">容器（Containers）</td><td style="text-align:left">容器是用来管理某一类对象的集合。C++ 提供了各种不同类型的容器，比如 deque、list、vector、map 等。</td></tr><tr><td style="text-align:left">算法（Algorithms）</td><td style="text-align:left">算法作用于容器。它们提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作。</td></tr><tr><td style="text-align:left">迭代器（iterators）</td><td style="text-align:left">迭代器用于遍历对象集合的元素。这些集合可能是容器，也可能是容器的子集。</td></tr></tbody></table><p>这三个组件都带有丰富的预定义函数，帮助我们通过简单的方式处理复杂的任务。 </p><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><div class="note warning">C++ 标准库中的string表示可变长的字符串，它在头文件string里面。 比C语言中的char用起来要方便很多！</div><p>常用函数汇总：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">getline(<span class="built_in">cin</span>,s) <span class="comment">//读取一行字符串赋给s，（可以带空格），返回字符串s</span></span><br><span class="line">s.empty()      <span class="comment">//s为空返回true，否则返回false</span></span><br><span class="line">s.size()       <span class="comment">//返回s中字符的个数</span></span><br><span class="line">s[n]           <span class="comment">//返回s中第n个字符的值，位置从0开始计数</span></span><br><span class="line">s1 + s2        <span class="comment">//返回s1和s2连接后的结果</span></span><br><span class="line">s1 = s2        <span class="comment">//用s2的副本代替s1中原来的字符</span></span><br><span class="line">s1 == s2       <span class="comment">//判断s1和s2是否完全相等（对大小写敏感）</span></span><br><span class="line">s1 != s2       <span class="comment">//不相等</span></span><br><span class="line">&lt;,&lt;=,&gt;,&gt;=      <span class="comment">//利用字符在字典中的顺序进行比较，且对字母的大小写敏感</span></span><br><span class="line">str.find(<span class="string">"ab"</span>);  <span class="comment">//返回字符串ab在str的位置</span></span><br><span class="line">str.substr(<span class="number">3</span>);  <span class="comment">//返回str[3]及以后的子串</span></span><br><span class="line">str.substr(<span class="number">2</span>,<span class="number">4</span>);  <span class="comment">//返回str[2]~str[2+(4-1)]子串(即从[2]开始4个字符组成的字符串)</span></span><br><span class="line">str.replace(<span class="number">2</span>, <span class="number">4</span>, <span class="string">"ab"</span>);  <span class="comment">//返回把 [2]~[2+(4-1)] 的内容替换为 "ab" 后的新字符串</span></span><br><span class="line">str.replace(<span class="number">2</span>, <span class="number">4</span>, <span class="string">"abcd"</span>, <span class="number">3</span>);  <span class="comment">//返回把 [2]~[2+(4-1)] 的内容替换为 "abcd" 的前3个字符后的新字符串</span></span><br><span class="line">str.insert(<span class="number">2</span>, <span class="string">"ab"</span>);  <span class="comment">//从 [2] 位置开始添加字符串 "ab"，并返回形成的新字符串</span></span><br><span class="line">str.insert(<span class="number">2</span>, <span class="string">"abcd"</span>, <span class="number">3</span>);  <span class="comment">//从 [2] 位置开始添加字符串 "abcd" 的前 3 个字符，并返回形成的新字符串</span></span><br><span class="line">str.insert(<span class="number">2</span>, <span class="string">"abcd"</span>, <span class="number">1</span>, <span class="number">3</span>);  <span class="comment">//从 [2] 位置开始添加字符串 "abcd" 的前 [2]~[2+(3-1)] 个字符，并返回形成的新字符串</span></span><br><span class="line">str.erase(<span class="number">3</span>);  <span class="comment">//删除 [3] 及以后的字符，并返回新字符串</span></span><br><span class="line">str.erase(<span class="number">3</span>, <span class="number">5</span>);  <span class="comment">//删除从 [3] 开始的 5 个字符，并返回新字符串</span></span><br><span class="line">str1.swap(str2);  <span class="comment">//把 str1 与 str2 交换</span></span><br><span class="line">transform(str.begin(),str.end(),str.begin(),::<span class="built_in">tolower</span>);  <span class="comment">//把字符串全部转换为小写字母</span></span><br><span class="line">transfrom(str.begin(),str.end(),str.begin(),::<span class="built_in">toupper</span>);  <span class="comment">//把字符串全部转换为大写字母</span></span><br></pre></td></tr></table></figure><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>需要引入头文件&lt; string &gt; ,既然是C++，就还要引入头文件&lt; iostream &gt; 和using namespace std;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;<span class="comment">//声明一个string 对象</span></span><br><span class="line"><span class="built_in">string</span> ss[<span class="number">10</span>];<span class="comment">//声明一个string对象的数组</span></span><br></pre></td></tr></table></figure><h2 id="string的io操作"><a href="#string的io操作" class="headerlink" title="string的io操作"></a>string的io操作</h2><p>使用cin读入字符串时，遇到空白就停止读取。也就是说一句话只能读到空格前面的内容。怎么读入一个句子呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str；</span><br><span class="line">getline(<span class="built_in">cin</span>,str);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="string的比较（字典顺序）"><a href="#string的比较（字典顺序）" class="headerlink" title="string的比较（字典顺序）"></a>string的比较（字典顺序）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> PPAP[] = &#123;<span class="string">"I"</span>, <span class="string">"have"</span>, <span class="string">"a"</span>, <span class="string">"pen"</span>, <span class="string">"an"</span>, <span class="string">"apple"</span>, <span class="string">"um"</span>, <span class="string">"apple-pen"</span>&#125;;</span><br><span class="line">sort(PPAP, PPAP + <span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; PPAP[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">I</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">an</span></span><br><span class="line"><span class="comment">apple</span></span><br><span class="line"><span class="comment">apple-pen</span></span><br><span class="line"><span class="comment">have</span></span><br><span class="line"><span class="comment">pen</span></span><br><span class="line"><span class="comment">um</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h2><p>在C语言中我都是用下标或者指针来访问数组元素，而在C++里，有个新奇的东西叫做迭代器iterator，我们可以使用它来访问容器元素。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"hello world"</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::iterator it=str.begin();it!=str.end();it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">h</span></span><br><span class="line"><span class="comment">e</span></span><br><span class="line"><span class="comment">l</span></span><br><span class="line"><span class="comment">l</span></span><br><span class="line"><span class="comment">o</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">w</span></span><br><span class="line"><span class="comment">o</span></span><br><span class="line"><span class="comment">r</span></span><br><span class="line"><span class="comment">l</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="查找子字符串问题"><a href="#查找子字符串问题" class="headerlink" title="查找子字符串问题"></a>查找子字符串问题</h2><p>string提供了一系列find查找子字符串的函数。最好用的还是find( )函数，返回在字符串中第一次出现的位置，位置变量的定义方式是 string::size_type ,如果没有找到，函数的返回值是string::npos，对应的位置变量是一个很大的常数。 </p><p>如果用int 定义位置变量，也可以正常使用。如果没有找到，用int定义的位置变量为-1。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span>::size_type position;<span class="comment">//教程里面都是这样定义变量，但是我试过用int也可以正常使用</span></span><br><span class="line">    <span class="comment">//int position;</span></span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    position = a.find(b);<span class="comment">//在a中查找b</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;position&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.find(b)==<span class="built_in">string</span>::npos)<span class="comment">//没有找到，返回string::npos</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"不存在！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个字母转换的函数，把所有的大写字母都转换为小写字母：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform(str.begin(),str.end(),str.begin(),::<span class="built_in">tolower</span>);</span><br></pre></td></tr></table></figure><p>把所有字母转换成大写字母：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform(s.begin(), s.end(), s.begin(), ::<span class="built_in">toupper</span>);</span><br></pre></td></tr></table></figure><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><div class="note warning">C++ STL中的verctor好比是C语言中的数组，但是vector又具有数组没有的一些高级功能。与数组相比，vector就是一个可以不用再初始化就必须制定大小的边长数组，当然了，它还有许多高级功能。</div><p>要想用vector首先得包含头文件vector。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>如果vector的元素类型是int，默认初始化为0；如果vector元素类型为string，则默认初始化为空字符串。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1(<span class="number">10</span>, <span class="number">12</span>); <span class="comment">//10个元素，每个元素值都是12</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2(<span class="number">10</span>); <span class="comment">//10个元素，每个元素值都是0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3; <span class="comment">//0个元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v4(<span class="number">10</span>, <span class="string">"hi"</span>); <span class="comment">//10个元素，每个元素值都是“hi”</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v5&#123;<span class="number">10</span>, <span class="string">"hi"</span>&#125;; <span class="comment">//10个元素，每个元素值都是“hi”</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v6&#123;<span class="number">10</span>&#125;; <span class="comment">//10个元素，每个元素值都是“”</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;;  <span class="comment">//注意空格。这里相当于二维数组int a[n][n];</span></span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p>使用push_back加入元素，并且这个元素是被加在数组尾部的。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    v.push_back(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：只能对已存在的元素进行赋值或者修改操作，如果是要加入新元素，务必使用push_back。push_back的作用有两个：告诉编译器为新元素开辟空间、将新元素存入新空间里。</p><p>比如下面的代码是错误的，但是编译器不会报错，就像是数组越界：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">vec[<span class="number">0</span>] = <span class="number">1</span>;  <span class="comment">//错误！</span></span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v.empty();  <span class="comment">//v为空返回true</span></span><br><span class="line">v.size();  <span class="comment">//v中元素个数</span></span><br><span class="line">v[n];  <span class="comment">//返回v中位置为n的元素</span></span><br><span class="line">v1 =  v2;  <span class="comment">//把v1中的元素替换为v2中元素的副本。</span></span><br><span class="line">v.resize(n);  <span class="comment">//重新调整vector容量大小为n</span></span><br><span class="line">v.push_back(t);  <span class="comment">//将t插入到v的末尾</span></span><br><span class="line">v.pop_back(t);  <span class="comment">//删除vector尾部的对象</span></span><br><span class="line">v.erase();  <span class="comment">//删除一个或多个元素</span></span><br><span class="line">v.clear();  <span class="comment">//删除所有的元素</span></span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>使用迭代器来访问元素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v6 = &#123; <span class="string">"hi"</span>,<span class="string">"my"</span>,<span class="string">"name"</span>,<span class="string">"is"</span>,<span class="string">"lee"</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator iter = v6.begin(); iter != v6.end(); iter++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">hi</span></span><br><span class="line"><span class="comment">my</span></span><br><span class="line"><span class="comment">name</span></span><br><span class="line"><span class="comment">is</span></span><br><span class="line"><span class="comment">lee</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>其实set的大部分操作是与vector类似的，不过set不支持随机访问，必须要使用迭代器去访问。由于set放入一个元素就会调整这个元素的位置，把它放到合适的位置，所以set中只有一个insert插入操作。</p><div class="note warning"><p>set输出的集合中的元素是按字母大小顺序排列的，而且每个值都不重复。如果cin重复值，并不会真正存入。</p></div><p>输出时，必须用迭代器遍历输出每一个元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; strset;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator iter;</span><br><span class="line">    strset.insert(<span class="string">"apple"</span>);</span><br><span class="line">    strset.insert(<span class="string">"orange"</span>);</span><br><span class="line">    strset.insert(<span class="string">"grapes"</span>);</span><br><span class="line">    strset.insert(<span class="string">"grapes"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(iter=strset.begin();iter!=strset.end();iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*iter&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><div class="note warning">list就是链表，list是一个双向链表，双向链表的优点是插入和删除元素都比较快捷，缺点是不能随机访问元素。</div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>list的排序方式和algorithm的略有不同：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.sort();</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IntelliJ IDEA 搭建Spring MVC环境</title>
      <link href="/2018/07/17/IntelliJ-IDEA-%E6%90%AD%E5%BB%BASpring-MVC%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/07/17/IntelliJ-IDEA-%E6%90%AD%E5%BB%BASpring-MVC%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/springmvc.jpg" width="450" height="200" alt="git" align="center"> </p><p>记录在IntelliJ IDEA中创建Spring MVC的web项目的全过程，与Maven项目的方法不同，这个需要手动导入jar包。</p><a id="more"></a><div class="note info"><p>这种普通的方法比Maven的使用要稍微简单一些，但是熟练之后，还是Maven比较方便。</p></div><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><p>File –&gt; New –&gt; Project，最上面是填java JDK安装路径的，如果以前使用Idea编辑器，就会自动帮你选上。选择Spring MVC，下面有两个选项可以选，“use library”就是需要选择本地的依赖包，而“download”就是在生成项目的时候就下载Spring MVC的包，如果是初次创建Spring MVC的项目，就选择“download”。</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f83350f2.png" alt="1.png"></p><p>填写项目名称和项目存储的位置：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f832aa54.png" alt="2.png"></p><p>点击Finsh，项目就创建完成了。</p><p>创建好后的项目目录如下图，lib中已经自动导入了java的包和Spring MVC的包：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f8320f9f.png" alt="3.png"></p><h1 id="修改代码文件"><a href="#修改代码文件" class="headerlink" title="修改代码文件"></a>修改代码文件</h1><h2 id="修改index-jsp文件"><a href="#修改index-jsp文件" class="headerlink" title="修改index.jsp文件"></a>修改index.jsp文件</h2><p>index.jsp文件就是等会运行时，显示在浏览器中的界面，初始代码如下：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82d0c9f.png" alt="4.png"></p><p>上面一部分是注释，包含项目的基本信息，中间是空的，可以把&lt; title &gt; 中间改为你想要的文字，例如“SpringMVC”，&lt; body &gt;中间的内容就是正文内容，也可以随意添加，例如改为“Hello World!”,最后的代码如下图：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82d3982.png" alt="5.png"></p><h2 id="新增一个控制器HelloMVCController-java"><a href="#新增一个控制器HelloMVCController-java" class="headerlink" title="新增一个控制器HelloMVCController.java"></a>新增一个控制器HelloMVCController.java</h2><p>首先在src目录下新建一个包，我这里把它命名为  com.spring.mvc ：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82e0d0e.png" alt="6.png"></p><p>然后在这个包下，新增一个类，命名为HelloMVCController ：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82e32fe.png" alt="7.png"></p><p>文件结构如下：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82af0d7.png" alt="8.png"></p><p>编辑HelloMVCController.java，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMVCController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printWelcome</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Spring 3 MVC Hello World"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改-dispatcher-servlet-xml-文件"><a href="#修改-dispatcher-servlet-xml-文件" class="headerlink" title="修改 dispatcher-servlet.xml 文件"></a>修改 dispatcher-servlet.xml 文件</h2><p>dispatcher-servlet.xml文件在web/WEB-INF文件夹下，打开替换为一下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对应src下的报名，需要自己新建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.mvc"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个配置是配置JSP页面的位置，按照你自己的配置来配 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/WEB-INF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>.jsp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>在上方菜单栏Run-&gt;Edit Configurations ：</p><p><img src="https://i.loli.net/2018/07/17/5b4df70795b66.png" alt="10.png"></p><p>点击左上角的”+”号，选择Tomcat Server，(如果没有请选择最下方的33 items more，找到Tomcat Server)，再选择Local，点击 Application server 右边的 Configure，导入Tomcat 目录： </p><p><img src="https://i.loli.net/2018/07/18/5b4e9f832c589.png" alt="9.png"></p><p>切换到Deployment标签，再点击右边的”+”号，添加一个Artifact.</p><p>选择第二个：war exploded，点击OK，这样，该项目就已经部署到了Tomcat中.</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f830135a.png" alt="10.png"></p><p>点击OK，这时整个Tomcat就配置好了。点击右上角的运行符号：</p><p><img src="https://i.loli.net/2018/07/17/5b4df8f5a8b17.png" alt="13.png"></p><p>这时，发现Artifact报错了：</p><p><img src="https://i.loli.net/2018/07/18/5b4ea0283afc5.png" alt="11.png"></p><p>先暂停运行：</p><p><img src="https://i.loli.net/2018/07/18/5b4ea02838d84.png" alt="12.png"></p><h2 id="修正错误"><a href="#修正错误" class="headerlink" title="修正错误"></a>修正错误</h2><p>打开 Project Structure：</p><p><img src="https://i.loli.net/2018/07/18/5b4ea02817e0b.png" alt="13.png"></p><p>选择 Artifacts–&gt;Output Layout ，看到右边有两个包，点击右键，选择第一个Put into/WEB-INF/lib，两个包都要这样操作。</p><p><img src="https://i.loli.net/2018/07/18/5b4ea02857001.png" alt="14.png"></p><p>完成后，应该是这样的页面：</p><p><img src="https://i.loli.net/2018/07/18/5b4ea02866328.png" alt="15.png"></p><p>点击OK，再次运行，就可以成功部署了，浏览器会自动打开并跳转到 localhost:8080，内容就是index.jsp中所写的。</p><p><img src="https://i.loli.net/2018/07/18/5b4ea027ecd3b.png" alt="16.png"></p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> maven </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IntelliJ IDEA创建Spring MVC的Maven项目</title>
      <link href="/2018/07/17/MVC%E7%9A%84Maven%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/07/17/MVC%E7%9A%84Maven%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/springmvc.jpg" width="450" height="200" alt="git" align="center"> </p><p>记录在IntelliJ IDEA中创建Spring MVC的Maven项目。</p><a id="more"></a><h1 id="创建Maven-Web项目"><a href="#创建Maven-Web项目" class="headerlink" title="创建Maven Web项目"></a>创建Maven Web项目</h1><p>菜单File-&gt;New Project可进入如图界面，首先选择左边栏Maven，再配置JDK的路径(如果之前添加了JDK的话会自动填充，如未添加点击旁边的New将JDK目录导入即可)。勾选”Create from archetype”，然后选中maven-archetype-webapp，点Next，进入如下界面： </p><p><img src="https://i.loli.net/2018/07/17/5b4dbd2a0434f.png" width="800" height="300" alt="git" align="center"></p><p>点击next，需要输入GroupID，ArtifactID，Version是自带的版本，暂时不用改。</p><p><img src="https://i.loli.net/2018/07/17/5b4dbdc983934.png" width="800" height="300" alt="git" align="center"></p><p>点击next，填写Maven的配置，配置文件和本地仓库都可以不填。</p><p><img src="https://i.loli.net/2018/07/17/5b4dbe1016978.png" alt="mvc3.png"></p><p>点击next，填写项目名称和项目保存位置，点击Finsh。</p><p>maven会在后台生成web项目，这需要等待一定的时间，视网络环境而定。</p><p>选择右边红框的Enable-Auto- Import，这样就可以在每次修改pom.xml后，自动的下载并导入jar包。</p><p><img src="https://i.loli.net/2018/07/17/5b4dbf4f493c1.png" alt="mvc4.png"></p><p>下图展示了初始的文件结构：</p><p><img src="https://i.loli.net/2018/07/17/5b4ded4c41b67.png" alt="mvc5.png"></p><p>我们可以看到，目录结构并不是严格的maven格式,因为少了java源码文件夹 。</p><p>首先在main文件夹下创建一个文件夹，名称为java ：</p><p><img src="https://i.loli.net/2018/07/17/5b4dee2936a9c.png" alt="1.png"></p><p>将java文件夹标识为Source Root，之后文件夹会变成蓝色，就表明设置成功了 ：</p><p><img src="https://i.loli.net/2018/07/17/5b4dee7088ece.png" alt="2.png"></p><p>再在main文件夹下创建一个文件夹，名称为recources ，将recources 文件夹标识为recources Root，文件图标也会更换：</p><p><img src="https://i.loli.net/2018/07/17/5b4def7425bb4.png" alt="3.png"></p><h1 id="Maven自动导入jar包"><a href="#Maven自动导入jar包" class="headerlink" title="Maven自动导入jar包"></a>Maven自动导入jar包</h1><p>现在已经创建好了一个Maven项目，但是还需要给Maven添加依赖。</p><p>Maven所做的工作就是自动把你需要的jar包下载到本地，然后关联到项目中来。maven的所有jar包都是保存在几个中央仓库里面的，其中一个最常用的是<a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository</a>，即，你需要什么jar包，它就会从仓库中拿给你。那么如何告诉maven需要什么jar包呢？我们看看工程目录，能找到一个pom.xml文件（这个文件在刚创建好项目时就已经展现在了大家面前），maven就是靠它来定义需求的，初始时是这样子的： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cici<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_mvc_test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven_mvc_test Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven_mvc_test<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，这里面已经自动生成了我们之前定义的本项目的groupId等信息，这些信息是该项目的标识，我们不要去改动它们。重点看 &lt;  dependencies &gt;标签，翻译过来是”依赖”的意思，也就是说把对每个包的需求都称为一个依赖&lt;  depedency &gt;，定义在&lt;  dependencies &gt;中。在每个&lt;  depedency &gt;中，你需要提供的是所需jar包的groupId、artifactId、version(g,a,v)这三个必要信息(坐标)。比如上面我们看到引入可一个junit包，格式如下： </p><p><img src="https://i.loli.net/2018/07/17/5b4df0d924552.png" alt="4.png"></p><p>Junit是单元测试包，提供了三个基本信息，第4个scope对其他包来说是非必需的。所有jar包的引入都要满足这个格式。</p><p>现在我们需要把Spring MVC的包加入依赖项，怎么查看这些jar包的3个信息呢？这就需要查阅仓库，打开<a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository</a>，搜索spring-webmvc，进入如下界面： </p><p><img src="https://i.loli.net/2018/07/17/5b4df19fa025e.png" alt="5.png"></p><p>点击打开后，可以看到很多版本，选择一个比较新的版本：</p><p><img src="https://i.loli.net/2018/07/17/5b4df1e39d425.png" alt="6.png"></p><p>很方便，仓库里面已经写好了Maven的依赖代码，直接复制就可以了。</p><p><img src="https://i.loli.net/2018/07/17/5b4df23327700.png" alt="7.png"></p><p>现在，把这段代码复制到pox.xml中的&lt; dependencies &gt;中： </p><p><img src="https://i.loli.net/2018/07/17/5b4df2b016d9d.png" alt="8.png"></p><p>这时，Maven就会自动把对应的jar包移植到本地项目里：</p><p><img src="https://i.loli.net/2018/07/17/5b4df35a0ef00.png" alt="9.png"></p><p>可以发现，虽然我们只写了一个依赖，但是会把与它密切相关的jar包同时导入进来。 自此演示一个简单的maven项目所需的jar包其实已经够了~ </p><h1 id="SpringMVC框架设置"><a href="#SpringMVC框架设置" class="headerlink" title="SpringMVC框架设置"></a>SpringMVC框架设置</h1><p>现在进行项目的配置。</p><h2 id="web-xml-配置"><a href="#web-xml-配置" class="headerlink" title="web.xml 配置"></a>web.xml 配置</h2><p>默认代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在需要创建一个创建Spring MVC的中央控制器 ，还有一个servlet名为mvc-dispatcher(名称可修改)，用于拦截请求（url-pattern为*.do），并交由Spring MVC的后台控制器来处理。这一项配置是必须的。为了能够处理中文的post请求，再配置一个encodingFilter，以避免post请求中文出现乱码情况，最终web.xml的完整代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>winner-test Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc-dispatcher.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mvc-dispatcher-xml配置"><a href="#mvc-dispatcher-xml配置" class="headerlink" title="mvc-dispatcher.xml配置"></a>mvc-dispatcher.xml配置</h2><p>在resources文件夹下创建mvc-dispatcher.xml ,代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置包扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.winner.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MainController配置"><a href="#MainController配置" class="headerlink" title="MainController配置"></a>MainController配置</h2><p>在java文件夹下创建一个class，名为MainController，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test.do"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>–@Controller注解：采用注解的方式，可以明确地定义该类为处理请求的Controller类；<br><br>–@RequestMapping()注解：用于定义一个请求映射，value为请求的url；<br><br>–return “index”：处理完该请求后返回的逻辑视图。 </p></div><h1 id="配置Tomcat来运行项目"><a href="#配置Tomcat来运行项目" class="headerlink" title="配置Tomcat来运行项目"></a>配置Tomcat来运行项目</h1><p>在上方菜单栏Run-&gt;Edit Configurations ：</p><p><img src="https://i.loli.net/2018/07/17/5b4df70795b66.png" alt="10.png"></p><p>点击左上角的”+”号，选择Tomcat Server，(如果没有请选择最下方的33 items more，找到Tomcat Server)，再选择Local，点击 Application server 右边的 Configure，导入Tomcat 目录： </p><p><img src="https://i.loli.net/2018/07/17/5b4df83046d3c.png" alt="11.png"></p><p>切换到Deployment标签，再点击右边的”+”号，添加一个Artifact.</p><p>选择第二个：war exploded，点击OK，这样，该项目就已经部署到了Tomcat中.</p><p><img src="https://i.loli.net/2018/07/17/5b4df869b5651.png" alt="12.png"></p><p>点击OK，这时整个Tomcat就配置好了。点击右上角的运行符号：</p><p><img src="https://i.loli.net/2018/07/17/5b4df8f5a8b17.png" alt="13.png"></p><p>这时，浏览器会自动打开，输出文字：</p><p><img src="https://i.loli.net/2018/07/17/5b4df983c634b.png" alt="14.png"></p><p>这样就算成功完成了最基本的设置。</p><p>这段话是写在哪里的呢？在index.jsp里面！</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">    Hello World!</span><br><span class="line">    Hello Spring MVC!</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> maven </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCF历届真题</title>
      <link href="/2018/07/16/CCF%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98/"/>
      <url>/2018/07/16/CCF%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/coder.jpg" width="600" height="300" alt="git" align="center"> </p><p>CCF历届真题汇总笔记，持续更新中……</p><a id="more"></a><p>[TOC]</p><div class="note info">更新于2018.9.20： 9月参加了CCF，得分210分，终于过了200（达到我们学院的毕业要求了 <img id="github-emoji" alt="expressionless" src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" height="20" width="20"> ​ ）不过学习算法的脚步还不能停，所以或许以后还会更新，练习后面的图论题和动态规划的题。加油鸭！</div><h1 id="201312-1出现次数最多的数"><a href="#201312-1出现次数最多的数" class="headerlink" title="201312-1出现次数最多的数"></a>201312-1出现次数最多的数</h1><p><strong>问题描述</strong></p><p>　　给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。</p><p><strong>输入格式</strong></p><p>　　输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。<br>　　输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。</p><p><strong>样例输入</strong></p><p>​    6<br>    10 1 10 20 30 20</p><p><strong>样例输出</strong></p><p>​    10</p><div class="note success">很简单，直接用一个数组a[] 存放所有的数，用数组b[] 存放每个元素出现的次数，b数组的下标就是a[i]的值，然后找出b数组中最大数的下标就可以了。需要注意的是<span class="label danger">数据范围是1 ≤ n ≤ 1000 ，1 ≤ si ≤ 10000，所以 a数组的范围可以是1000，而 b数组的范围必须是10000！</span></div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>],b[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        b[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max=b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">10000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]&gt;max)</span><br><span class="line">        &#123;</span><br><span class="line">            max=b[i];</span><br><span class="line">            flag=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;flag&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201312-2-ISBN号码"><a href="#201312-2-ISBN号码" class="headerlink" title="201312-2 ISBN号码"></a>201312-2 ISBN号码</h1><p><strong>问题描述</strong></p><p>　　每一本正式出版的图书都有一个ISBN号码与之对应，ISBN码包括9位数字、1位识别码和3位分隔        符，其规定格式如“x-xxx-xxxxx-x”，其中符号“-”是分隔符（键盘上的减号），最后一位是识别码，例如0-670-82162-4就是一个标准的ISBN码。ISBN码的首位数字表示书籍的出版语言，例如0代表英语；第一个分隔符“-”之后的三位数字代表出版社，例如670代表维京出版社；第二个分隔之后的五位数字代表该书在出版社的编号；最后一位为识别码。<br>　　识别码的计算方法如下：<br>　　首位数字乘以1加上次位数字乘以2……以此类推，用所得的结果mod 11，所得的余数即为识别码，如果余数为10，则识别码为大写字母X。例如ISBN号码0-670-82162-4中的识别码4是这样得到的：对067082162这9个数字，从左至右，分别乘以1，2，…，9，再求和，即0×1+6×2+……+2×9=158，然后取158 mod 11的结果4作为识别码。<br>　　编写程序判断输入的ISBN号码中识别码是否正确，如果正确，则仅输出“Right”；如果错误，则输出是正确的ISBN号码。</p><p><strong>输入格式</strong></p><p>　　输入只有一行，是一个字符序列，表示一本书的ISBN号码（保证输入符合ISBN号码的格式要求）。</p><p><strong>输出格式</strong></p><p>　　输出一行，假如输入的ISBN号码的识别码正确，那么输出“Right”，否则，按照规定的格式，输出正确的ISBN号码（包括分隔符“-”）。</p><p><strong>样例输入</strong></p><p>​    0-670-82162-4</p><p><strong>样例输出</strong></p><p>​    Right</p><p><strong>样例输入</strong></p><p>​    0-670-82162-0</p><p><strong>样例输出</strong></p><p>​    0-670-82162-4</p><div class="note success">定位到每一个数字，进行运算模11进行比较判断。不用纠结循环取数，判断是否是“-”的问题，<span class="label danger">直接一个数一个数的取，因为数据格式是固定的。</span><br><br>运算完后的总和模11之后，要转换为字符型变量，与给定的数字进行比较。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> i,j,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    a[<span class="number">0</span>]=s[<span class="number">0</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">1</span>]=s[<span class="number">2</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">2</span>]=s[<span class="number">3</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">3</span>]=s[<span class="number">4</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">4</span>]=s[<span class="number">6</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">5</span>]=s[<span class="number">7</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">6</span>]=s[<span class="number">8</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">7</span>]=s[<span class="number">9</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">8</span>]=s[<span class="number">10</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">9</span>]=s[<span class="number">12</span>]-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=a[i]*j;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=sum%<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">char</span> c=sum==<span class="number">10</span>?<span class="string">'X'</span>:sum+<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[<span class="number">12</span>]==c)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Right"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s[<span class="number">12</span>]=c;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201312-3-最大的矩形"><a href="#201312-3-最大的矩形" class="headerlink" title="201312-3 最大的矩形"></a>201312-3 最大的矩形</h1><p><strong>问题描述</strong></p><p>　　在横轴上放了n个相邻的矩形，每个矩形的宽度是1，而第i（1 ≤ i ≤ n）个矩形的高度是hi。这n个矩形构成了一个直方图。例如，下图中六个矩形的高度就分别是3, 1, 6, 5, 2, 3。<br><img src="http://118.190.20.162/RequireFile.do?fid=Fmhrjgtb" alt="img"><br>　　请找出能放在给定直方图里面积最大的矩形，它的边要与坐标轴平行。对于上面给出的例子，最大矩形如下图所示的阴影部分，面积是10。<br><img src="http://118.190.20.162/RequireFile.do?fid=gNe4DHhD" alt="img"></p><p><strong>输入格式</strong></p><p>　　第一行包含一个整数n，即矩形的数量(1 ≤ n ≤ 1000)。<br>　　第二行包含n 个整数h1, h2, … , hn，相邻的数之间由空格分隔。(1 ≤ hi ≤ 10000)。hi是第i个矩形的高度。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，即给定直方图内的最大矩形的面积。</p><p><strong>样例输入</strong></p><p>​    6<br>    3 1 6 5 2 3</p><p><strong>样例输出</strong></p><p>​    10</p><div class="note success"><p>一开始感觉是动态规划问题，看了答案之后发现其实就是暴力法，遍历每一条条形，如果它后面出现高度小于它的条形，就找到当前这个条形所能得到的最大矩形面积。然后每次遍历时都检验这个面积是不是最大的面积。</p></div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,a[<span class="number">1005</span>],ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> h=a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;h)</span><br><span class="line">                h=a[j];</span><br><span class="line">            <span class="keyword">int</span> s=(j-i+<span class="number">1</span>)*h;</span><br><span class="line">            <span class="keyword">if</span>(s&gt;ans)   ans=s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201403-1-相反数"><a href="#201403-1-相反数" class="headerlink" title="201403-1 相反数"></a>201403-1 相反数</h1><p><strong>问题描述</strong>　　</p><p>​    有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。</p><p><strong>输入格式</strong></p><p>​    第一行包含一个正整数 N。(1 ≤ N ≤ 500)。 　　</p><p>​    第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。</p><p><strong>输出格式</strong></p><p>​    只输出一个整数,即这 N 个数中包含多少对相反数。</p><p><strong>样例输入</strong></p><p>5 1 2 3 -1 -2</p><p><strong>样例输出</strong></p><p>2  </p><div class="note success"><p>题目中很重要的一句话是，有 N 个非零且各不相同的整数 ，所以不用考虑有多组相同的相反数，也没有0干扰判断。直接双重循环，如果2个数相加等于0，就计数，最后计数除以2就是相反数的对数。</p></div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,sum=<span class="number">0</span>,a[<span class="number">505</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]+a[j]==<span class="number">0</span>)    sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201403-2-窗口"><a href="#201403-2-窗口" class="headerlink" title="201403-2 窗口"></a>201403-2 窗口</h1><p><strong>问题描述</strong></p><p>　　在某图形操作系统中,有 N 个窗口,每个窗口都是一个两边与坐标轴分别平行的矩形区域。窗口的边界上的点也属于该窗口。窗口之间有层次的区别,在多于一个窗口重叠的区域里,只会显示位于顶层的窗口里的内容。<br>　　当你点击屏幕上一个点的时候,你就选择了处于被点击位置的最顶层窗口,并且这个窗口就会被移到所有窗口的最顶层,而剩余的窗口的层次顺序不变。如果你点击的位置不属于任何窗口,则系统会忽略你这次点击。<br>　　现在我们希望你写一个程序模拟点击窗口的过程。</p><p><strong>输入格式</strong></p><p>　　输入的第一行有两个正整数,即 N 和 M。(1 ≤ N ≤ 10,1 ≤ M ≤ 10)<br>　　接下来 N 行按照从最下层到最顶层的顺序给出 N 个窗口的位置。 每行包含四个非负整数 x1, y1, x2, y2,表示该窗口的一对顶点坐标分别为 (x1, y1) 和 (x2, y2)。保证 x1 &lt; x2,y1 2。<br>　　接下来 M 行每行包含两个非负整数 x, y,表示一次鼠标点击的坐标。<br>　　题目中涉及到的所有点和矩形的顶点的 x, y 坐标分别不超过 2559 和　　1439。</p><p><strong>输出格式</strong></p><p>　　输出包括 M 行,每一行表示一次鼠标点击的结果。如果该次鼠标点击选择了一个窗口,则输出这个窗口的编号(窗口按照输入中的顺序从 1 编号到 N);如果没有,则输出”IGNORED”(不含双引号)。</p><p><strong>样例输入</strong></p><p>3 4<br>0 0 4 4<br>1 1 5 5<br>2 2 6 6<br>1 1<br>0 0<br>4 4<br>0 5</p><p><strong>样例输出</strong></p><p>2<br>1<br>1<br>IGNORED</p><p><strong>样例说明</strong></p><p>　　第一次点击的位置同时属于第 1 和第 2 个窗口,但是由于第 2 个窗口在上面,它被选择并且被置于顶层。<br>　　第二次点击的位置只属于第 1 个窗口,因此该次点击选择了此窗口并将其置于顶层。现在的三个窗口的层次关系与初始状态恰好相反了。<br>　　第三次点击的位置同时属于三个窗口的范围,但是由于现在第 1 个窗口处于顶层,它被选择。<br>　　最后点击的 (0, 5) 不属于任何窗口。</p><div class="note success"><p>CCF的第2道题很喜欢出这类型的题目，首先第一个难点就是怎么存每一个窗口的坐标和次序，答案就是<span class="label danger">用结构体进行存储</span>。第二个难点是查找点击的坐标属于哪个窗口并重新排序。</p></div>  <p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1;</span><br><span class="line">    <span class="keyword">int</span> x2;</span><br><span class="line">    <span class="keyword">int</span> y1;</span><br><span class="line">    <span class="keyword">int</span> y2;</span><br><span class="line">    <span class="keyword">int</span> order;</span><br><span class="line">&#125;a[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j,k,x,y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].order=i;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i].x1&gt;&gt;a[i].y1&gt;&gt;a[i].x2&gt;&gt;a[i].y2;</span><br><span class="line">    &#125;</span><br><span class="line">    Windows b;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">for</span>(j=n;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=a[j].x1 &amp;&amp; x&lt;=a[j].x2 &amp;&amp; y&gt;=a[j].y1 &amp;&amp; y&lt;=a[j].y2)</span><br><span class="line">            &#123;</span><br><span class="line">                b=a[j];</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a[j].order&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">for</span>(k=j;k&lt;n;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[k]=a[k+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                a[n]=b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"IGNORED"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201409-1-相邻数对"><a href="#201409-1-相邻数对" class="headerlink" title="201409-1 相邻数对"></a>201409-1 相邻数对</h1><p><strong>问题描述</strong></p><p>　　给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示给定整数的个数。<br>　　第二行包含所给定的n个整数。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示值正好相差1的数对的个数。</p><p><strong>样例输入</strong></p><p>6<br>10 2 6 3 7 8</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例说明</strong></p><p>　　值正好相差1的数对包括(2, 3), (6, 7), (7, 8)。</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=1000，给定的整数为不超过10000的非负整数。</p><div class="note success">排个序，判断一下上一个数和下一个数是否相差为1即可。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]+<span class="number">1</span>==a[i+<span class="number">1</span>])</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201409-2-画图"><a href="#201409-2-画图" class="headerlink" title="201409-2 画图"></a>201409-2 画图</h1><p><strong>问题描述</strong></p><p>　　在一个定义了直角坐标系的纸上，画一个(x1,y1)到(x2,y2)的矩形指将横坐标范围从x1到x2，纵坐标范围从y1到y2之间的区域涂上颜色。<br>　　下图给出了一个画了两个矩形的例子。第一个矩形是(1,1) 到(4, 4)，用绿色和紫色表示。第二个矩形是(2, 3)到(6, 5)，用蓝色和紫色表示。图中，一共有15个单位的面积被涂上颜色，其中紫色部分被涂了两次，但在计算面积时只计算一次。在实际的涂色过程中，所有的矩形都涂成统一的颜色，图中显示不同颜色仅为说明方便。<br><img src="http://118.190.20.162/RequireFile.do?fid=qMtgAT3j" alt="img"><br>　　给出所有要画的矩形，请问总共有多少个单位的面积被涂上颜色。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示要画的矩形的个数。<br>　　接下来n行，每行4个非负整数，分别表示要画的矩形的左下角的横坐标与纵坐标，以及右上角的横坐标与纵坐标。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示有多少个单位的面积被涂上颜色。</p><p><strong>样例输入</strong></p><p>2<br>1 1 4 4<br>2 3 6 5</p><p><strong>样例输出</strong></p><p>15</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=100，0&lt;=横坐标、纵坐标&lt;=100。</p><div class="note success">这个题目比较简单，不需要用结构体，直接建一个二维数组保存标记，一组一组的读入坐标，再把对应二维数组标记为1就可以了。最后统计标记了多少个格子即可。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,k,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">        <span class="keyword">for</span>(i=x1;i&lt;x2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=y1;j&lt;y2;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">105</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">105</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==<span class="number">1</span>)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用结构体一样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1;</span><br><span class="line">    <span class="keyword">int</span> y1;</span><br><span class="line">    <span class="keyword">int</span> x2;</span><br><span class="line">    <span class="keyword">int</span> y2;</span><br><span class="line">&#125;a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,k,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[k].x1&gt;&gt;a[k].y1&gt;&gt;a[k].x2&gt;&gt;a[k].y2;</span><br><span class="line">        <span class="keyword">for</span>(i=a[k].x1;i&lt;a[k].x2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=a[k].y1;j&lt;a[k].y2;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                flag[i][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">105</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">105</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i][j]==<span class="number">1</span>)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201409-3-字符串匹配"><a href="#201409-3-字符串匹配" class="headerlink" title="201409-3  字符串匹配"></a>201409-3  字符串匹配</h1><p><strong>问题描述</strong></p><p>　　给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个字符串S，由大小写英文字母组成。<br>　　第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。<br>　　第三行包含一个整数n，表示给出的文字的行数。<br>　　接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。</p><p><strong>输出格式</strong></p><p>　　输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。</p><p><strong>样例输入</strong></p><p>Hello<br>1<br>5<br>HelloWorld<br>HiHiHelloHiHi<br>GrepIsAGreatTool<br>HELLO<br>HELLOisNOTHello</p><p><strong>样例输出</strong></p><p>HelloWorld<br>HiHiHelloHiHi<br>HELLOisNOTHello</p><p><strong>样例说明</strong></p><p>　　在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=100，每个字符串的长度不超过100。</p><div class="note success">字符串操作的问题，对于大小写敏感的查找，就使用C++中的string类，find函数，可以查找子字符串；对于大小写不敏感的查找，需要先把所有的字符串转换为小写的，再用find函数进行查找！</div><p>string大法好！函数大法好！</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">    <span class="keyword">int</span> flag,n,i;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;flag&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            <span class="keyword">if</span>(s.find(str)!=<span class="built_in">string</span>::npos)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        transform(str.begin(), str.end(), str.begin(),::<span class="built_in">tolower</span>);</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            <span class="built_in">string</span> p=s;</span><br><span class="line">            transform(p.begin(), p.end(), p.begin(),::<span class="built_in">tolower</span>);</span><br><span class="line">            <span class="keyword">if</span>(p.find(str)!=<span class="built_in">string</span>::npos)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201412-1-门禁系统"><a href="#201412-1-门禁系统" class="headerlink" title="201412-1 门禁系统"></a>201412-1 门禁系统</h1><p><strong>问题描述</strong></p><p>　　涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示涛涛的记录条数。<br>　　第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。</p><p><strong>样例输入</strong></p><p>5<br>1 2 1 1 3</p><p><strong>样例输出</strong></p><p>1 1 2 3 1</p><p><strong>评测用例规模与约定</strong></p><p>　　1≤n≤1,000，读者的编号为不超过n的正整数。</p><div class="note success">用另外一个字符串记录每个数出现的次数，读入一个数，输出计数值一次。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>],b[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        b[a[i]]++;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b[a[i]]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201412-2-Z字形扫描"><a href="#201412-2-Z字形扫描" class="headerlink" title="201412-2 Z字形扫描"></a>201412-2 Z字形扫描</h1><p><strong>问题描述</strong></p><p>　　在图像编码的算法中，需要将一个给定的方形矩阵进行Z字形扫描(Zigzag Scan)。给定一个n×n的矩阵，Z字形扫描的过程如下图所示：<br><img src="http://118.190.20.162/RequireFile.do?fid=Nad2EgMG" alt="img"><br>　　对于下面的4×4的矩阵，<br>　　1 5 3 9<br>　　3 7 5 6<br>　　9 4 6 4<br>　　7 3 1 3<br>　　对其进行Z字形扫描后得到长度为16的序列：<br>　　1 5 3 9 7 3 9 5 4 7 3 6 6 4 1 3<br>　　请实现一个Z字形扫描的程序，给定一个n×n的矩阵，输出对这个矩阵进行Z字形扫描的结果。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示矩阵的大小。<br>　　输入的第二行到第n+1行每行包含n个正整数，由空格分隔，表示给定的矩阵。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含n×n个整数，由空格分隔，表示输入的矩阵经过Z字形扫描后的结果。</p><p><strong>样例输入</strong></p><p>4<br>1 5 3 9<br>3 7 5 6<br>9 4 6 4<br>7 3 1 3</p><p><strong>样例输出</strong></p><p>1 5 3 9 7 3 9 5 4 7 3 6 6 4 1 3</p><p><strong>评测用例规模与约定</strong></p><p>　　1≤n≤500，矩阵元素为不超过1000的正整数。</p><div class="note success">模拟的逻辑不是很复杂，关键是循环条件一开始没想清楚怎么写，后来借鉴了网上的代码。还有一个很坑的地方就是转弯时，要先判断角落，再判断边界。一开始我也没有注意else if 的条件顺序，一直只有60分，后来才发现这个问题。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line">    <span class="keyword">int</span> n,i,j;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">    <span class="keyword">int</span> up=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> down;</span><br><span class="line">    i=<span class="number">0</span>;j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((i!=n<span class="number">-1</span>) || (j!=n<span class="number">-1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(up)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; j!=n<span class="number">-1</span>)</span><br><span class="line">            &#123;<span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;i--;j++;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==n<span class="number">-1</span>)</span><br><span class="line">            &#123;<span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;i++;down=<span class="number">1</span>;up=<span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">            &#123;<span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;j++;down=<span class="number">1</span>;up=<span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(down)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=n<span class="number">-1</span> &amp;&amp; j!=<span class="number">0</span>)</span><br><span class="line">            &#123;<span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;i++;j--;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i==n<span class="number">-1</span>)</span><br><span class="line">            &#123;<span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;j++;up=<span class="number">1</span>;down=<span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">            &#123;<span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;i++;up=<span class="number">1</span>;down=<span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a[i][j];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201503-1-图像旋转"><a href="#201503-1-图像旋转" class="headerlink" title="201503-1 图像旋转"></a>201503-1 图像旋转</h1><p><strong>问题描述</strong></p><p>　　旋转是图像处理的基本操作，在这个问题中，你需要将一个图像逆时针旋转90度。<br>　　计算机中的图像表示可以用一个矩阵来表示，为了旋转一个图像，只需要将对应的矩阵旋转即可。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，分别表示图像矩阵的行数和列数。<br>　　接下来<em>n</em>行每行包含<em>m</em>个整数，表示输入的图像。</p><p><strong>输出格式</strong></p><p>　　输出<em>m</em>行，每行包含<em>n</em>个整数，表示原始矩阵逆时针旋转90度后的矩阵。</p><p><strong>样例输入</strong></p><p>2 3<br>1 5 3<br>3 2 4</p><p><strong>样例输出</strong></p><p>3 4<br>5 2<br>1 3</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>n</em>, <em>m</em> ≤ 1,000，矩阵中的数都是不超过1000的非负整数。</p><div class="note success">矩阵的转置，没有什么难度…</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201503-2-数字排序"><a href="#201503-2-数字排序" class="headerlink" title="201503-2 数字排序"></a>201503-2 数字排序</h1><p><strong>问题描述</strong></p><p>　　给定<em>n</em>个整数，请统计出每个整数出现的次数，按出现次数从多到少的顺序输出。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示给定数字的个数。<br>　　第二行包含<em>n</em>个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。</p><p><strong>输出格式</strong></p><p>　　输出多行，每行包含两个整数，分别表示一个给定的整数和它出现的次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多，则先输出值较小的，然后输出值较大的。</p><p><strong>样例输入</strong></p><p>12<br>5 2 3 3 1 3 4 2 5 2 3 5</p><p><strong>样例输出</strong></p><p>3 4<br>2 3<br>5 3<br>1 1<br>4 1</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>n</em> ≤ 1000，给出的数都是不超过1000的非负整数。</p><div class="note success">如果就是记录出现的次数并排序，就十分简单，但是这个要输出对应的元素值，一开始想到用结构体存储，但是好像一排序顺序也打乱了…结果暴力的双重循环，遇到a[i]==j 的就把 j 和a[j]都输出来。</div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,num,i,j;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        a[num]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1004</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">1005</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]==i)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="string">" "</span>&lt;&lt;a[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201503-3-节日"><a href="#201503-3-节日" class="headerlink" title="201503-3 节日"></a>201503-3 节日</h1><p><strong>问题描述</strong></p><p>　　有一类节日的日期并不是固定的，而是以“<em>a</em>月的第<em>b</em>个星期<em>c</em>”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。<br>　　现在，给你<em>a</em>，<em>b</em>，<em>c</em>和<em>y</em>1, <em>y</em>2(1850 ≤ <em>y</em>1, <em>y</em>2 ≤ 2050)，希望你输出从公元<em>y</em>1年到公元<em>y</em>2年间的每年的<em>a</em>月的第<em>b</em>个星期<em>c</em>的日期。<br>　　提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。<br>　　为了方便你推算，已知1850年1月1日是星期二。</p><p><strong>输入格式</strong></p><p>　　输入包含恰好一行，有五个整数<em>a</em>, <em>b</em>, <em>c</em>, <em>y</em>1, <em>y</em>2。其中<em>c</em>=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。</p><p><strong>输出格式</strong></p><p>　　对于<em>y</em>1和<em>y</em>2之间的每一个年份，包括<em>y</em>1和<em>y</em>2，按照年份从小到大的顺序输出一行。<br>　　如果该年的<em>a</em>月第<em>b</em>个星期<em>c</em>确实存在，则以”yyyy/mm/dd”的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。<br>　　如果该年的<em>a</em>月第<em>b</em>个星期<em>c</em>并不存在，则输出”none”（不包含双引号)。</p><p><strong>样例输入</strong></p><p>5 2 7 2014 2015</p><p><strong>样例输出</strong></p><p>2014/05/11<br>2015/05/10</p><p><strong>评测用例规模与约定</strong></p><p>　　所有评测用例都满足：1 ≤ <em>a</em> ≤ 12，1 ≤ <em>b</em> ≤ 5，1 ≤ <em>c</em> ≤ 7，1850 ≤ <em>y</em>1, <em>y</em>2 ≤ 2050。</p><div class="note success">CCF就喜欢出这种骚题目，看起来很简单，改来改去就是a不了。<br><br>刚开始觉得很简单，先计算出a月1号是周几，再计算a月第一个星期c是几号，日期加上（b - 1）*7，就是最终的日期。<br><br>需要注意几个问题：第一个问题是，如果按照题目中所说从1850年开始推算日子的话，1850年1月1号是周二，不好惯性思维……也可以不管题目，直接从1年1月1日开始计算，1年1月1日是周日！第二个问题是，是打印y1~y2年间的每一个日期，不是只打印y1年和y2年的……题目中的样例正好y1和y2是连着的，我就一直以为只输出这两个年份，害我改了一早上，读题目啊！！！</div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> month_day[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算year年month月day日是星期几</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">weeks</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span> || (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line">        month_day[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        month_day[<span class="number">2</span>]=<span class="number">28</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;year;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">400</span>==<span class="number">0</span> || (i%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line">            sum+=<span class="number">366</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum+=<span class="number">365</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;month;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=month_day[j];</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=day;</span><br><span class="line">    <span class="keyword">int</span> k=sum%<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">2</span>)    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">3</span>)    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">4</span>)    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">5</span>)    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">6</span>)    <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,y1,y2;</span><br><span class="line">    <span class="keyword">int</span> y[<span class="number">3005</span>],first_date[<span class="number">3005</span>],day[<span class="number">3005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;y1&gt;&gt;y2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y1;i&lt;=y2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        y[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y1;i&lt;=y2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//计算y年a月1号是周几</span></span><br><span class="line">        first_date[i]=weeks(y[i],a,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//计算周c距离a月1日有几天</span></span><br><span class="line">        <span class="keyword">if</span>(c&lt;first_date[i])</span><br><span class="line">        &#123;</span><br><span class="line">            day[i]=first_date[i]-c;</span><br><span class="line">            day[i]=<span class="number">7</span>-day[i]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=first_date[i])</span><br><span class="line">        &#123;</span><br><span class="line">            day[i]=c-first_date[i]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        day[i]=day[i]+(b<span class="number">-1</span>)*<span class="number">7</span>;</span><br><span class="line">        <span class="comment">//骚的不行的输出</span></span><br><span class="line">        <span class="keyword">if</span>(day[i]&gt;month_day[a])</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"none"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;y[i]&lt;&lt;<span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">10</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;a&lt;&lt;<span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">if</span>(day[i]&lt;<span class="number">10</span>)   <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;day[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;day[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201509-1-数字分段"><a href="#201509-1-数字分段" class="headerlink" title="201509-1 数字分段"></a>201509-1 数字分段</h1><p><strong>问题描述</strong></p><p>　　给定一个整数数列，数列中连续相同的最长整数序列算成一段，问数列中共有多少段？</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示数列中整数的个数。<br>　　第二行包含<em>n</em>个整数<em>a</em>1, <em>a</em>2, …, <em>an</em>，表示给定的数列，相邻的整数之间用一个空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示给定的数列有多个段。</p><p><strong>样例输入</strong></p><p>8<br>8 8 8 0 12 12 8 0</p><p><strong>样例输出</strong></p><p>5</p><p><strong>样例说明</strong></p><p>　　8 8 8是第一段，0是第二段，12 12是第三段，倒数第二个整数8是第四段，最后一个0是第五段。</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>n</em> ≤ 1000，0 ≤ <em>ai</em> ≤ 1000。</p><div class="note success">检查目前输入进来的数和上一个数相不相同，不相同就计数加一。<br><br>我感觉a[0]不赋值并没有关系啊，然而不赋值就90分，赋了值就满分了…</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=a[i<span class="number">-1</span>])</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201509-2-日期计算"><a href="#201509-2-日期计算" class="headerlink" title="201509-2 日期计算"></a>201509-2 日期计算</h1><p><strong>问题描述</strong></p><p>　　给定一个年份<em>y</em>和一个整数<em>d</em>，问这一年的第<em>d</em>天是几月几日？<br>　　注意闰年的2月有29天。满足下面条件之一的是闰年：<br>　　1） 年份是4的整数倍，而且不是100的整数倍；<br>　　2） 年份是400的整数倍。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>y</em>，表示年份，年份在1900到2015之间（包含1900和2015）。<br>　　输入的第二行包含一个整数<em>d</em>，<em>d</em>在1至365之间。</p><p><strong>输出格式</strong></p><p>　　输出两行，每行一个整数，分别表示答案的月份和日期。</p><p><strong>样例输入</strong></p><p>2015<br>80</p><p><strong>样例输出</strong></p><p>3<br>21</p><p><strong>样例输入</strong></p><p>2000<br>40</p><p><strong>样例输出</strong></p><p>2<br>9</p><div class="note success">不是很难，关键是细心。先把12个月份每个月多少天存在数组里，如果是闰年就把2月改为29天。再一个月一个月的减，直到d小于下个月的天数，就可以输出月份和d了。<br><br>容易忽视的是：1月根本就不能进入循环，直接输出1月d号！</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year,d,i;</span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;year&gt;&gt;d;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span> || (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line">        month[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=month[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            d-=month[i];</span><br><span class="line">            <span class="keyword">if</span>(d&lt;=month[i+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201512-1-位数之和"><a href="#201512-1-位数之和" class="headerlink" title="201512-1 位数之和"></a>201512-1 位数之和</h1><p><strong>问题描述</strong></p><p>　　给定一个十进制整数<em>n</em>，输出<em>n</em>的各位数字之和。</p><p><strong>输入格式</strong></p><p>　　输入一个整数<em>n</em>。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示答案。</p><p><strong>样例输入</strong></p><p>20151220</p><p><strong>样例输出</strong></p><p>13</p><p><strong>样例说明</strong></p><p>　　20151220的各位数字之和为2+0+1+5+1+2+2+0=13。</p><p><strong>评测用例规模与约定</strong></p><p>　　所有评测用例满足：0 ≤ <em>n</em> ≤ 1000000000。</p><div class="note success">最好的方法就是把输入当做一个字符串输入，然后遍历每个字符减去48后累加求和。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;a.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=a[i]<span class="number">-48</span>;</span><br><span class="line">        sum+=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201512-2-消除类游戏"><a href="#201512-2-消除类游戏" class="headerlink" title="201512-2 消除类游戏"></a>201512-2 消除类游戏</h1><p><strong>问题描述</strong></p><p>　　消除类游戏是深受大众欢迎的一种游戏，游戏在一个包含有<em>n</em>行<em>m</em>列的游戏棋盘上进行，棋盘的每一行每一列的方格上放着一个有颜色的棋子，当一行或一列上有连续三个或更多的相同颜色的棋子时，这些棋子都被消除。当有多处可以被消除时，这些地方的棋子将同时被消除。<br>　　现在给你一个<em>n</em>行<em>m</em>列的棋盘，棋盘中的每一个方格上有一个棋子，请给出经过一次消除后的棋盘。<br>　　请注意：一个棋子可能在某一行和某一列同时被消除。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，用空格分隔，分别表示棋盘的行数和列数。<br>　　接下来<em>n</em>行，每行<em>m</em>个整数，用空格分隔，分别表示每一个方格中的棋子的颜色。颜色使用1至9编号。</p><p><strong>输出格式</strong></p><p>　　输出<em>n</em>行，每行<em>m</em>个整数，相邻的整数之间使用一个空格分隔，表示经过一次消除后的棋盘。如果一个方格中的棋子被消除，则对应的方格输出0，否则输出棋子的颜色编号。</p><p><strong>样例输入</strong></p><p>4 5<br>2 2 3 1 2<br>3 4 5 1 4<br>2 3 2 1 3<br>2 2 2 4 4</p><p><strong>样例输出</strong></p><p>2 2 3 0 2<br>3 4 5 0 4<br>2 3 2 0 3<br>0 0 0 4 4</p><p><strong>样例说明</strong></p><p>　　棋盘中第4列的1和第4行的2可以被消除，其他的方格中的棋子均保留。</p><p><strong>样例输入</strong></p><p>4 5<br>2 2 3 1 2<br>3 1 1 1 1<br>2 3 2 1 3<br>2 2 3 3 3</p><p><strong>样例输出</strong></p><p>2 2 3 0 2<br>3 0 0 0 0<br>2 3 2 0 3<br>2 2 0 0 0</p><p><strong>样例说明</strong></p><p>　　棋盘中所有的1以及最后一行的3可以被同时消除，其他的方格中的棋子均保留。</p><p><strong>评测用例规模与约定</strong></p><p>　　所有的评测用例满足：1 ≤ <em>n</em>, <em>m</em> ≤ 30。</p><div class="note success">不算很难，一个二维数组a存储数据，另外一个二维数组b改写0，这样就可以先一排一排的检查，再一列一列的检查。感觉有点啰嗦，但是a了就好。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">35</span>][<span class="number">35</span>],b[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">            b[i][j]=a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;m<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==a[i][j<span class="number">-1</span>] &amp;&amp; a[i][j]==a[i][j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                b[i][j<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">                b[i][j]=<span class="number">0</span>;</span><br><span class="line">                b[i][j+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==a[i<span class="number">-1</span>][j] &amp;&amp; a[i][j]==a[i+<span class="number">1</span>][j])</span><br><span class="line">            &#123;</span><br><span class="line">                b[i<span class="number">-1</span>][j]=<span class="number">0</span>;</span><br><span class="line">                b[i][j]=<span class="number">0</span>;</span><br><span class="line">                b[i+<span class="number">1</span>][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201604-1-折点计数"><a href="#201604-1-折点计数" class="headerlink" title="201604-1 折点计数"></a>201604-1 折点计数</h1><p><strong>问题描述</strong></p><p>　　给定<em>n</em>个整数表示一个商店连续<em>n</em>天的销售量。如果某天之前销售量在增长，而后一天销售量减少，则称这一天为折点，反过来如果之前销售量减少而后一天销售量增长，也称这一天为折点。其他的天都不是折点。如下图中，第3天和第6天是折点。<br><img src="http://118.190.20.162/RequireFile.do?fid=gbLRbhR7" alt="img"><br>　　给定<em>n</em>个整数<em>a</em>1, <em>a</em>2, …, <em>an</em>表示销售量，请计算出这些天总共有多少个折点。<br>　　为了减少歧义，我们给定的数据保证：在这<em>n</em>天中相邻两天的销售量总是不同的，即<em>ai</em>-1≠<em>ai</em>。注意，如果两天不相邻，销售量可能相同。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>。<br>　　第二行包含<em>n</em>个整数，用空格分隔，分别表示<em>a</em>1, <em>a</em>2, …, <em>an</em>。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示折点出现的数量。</p><p><strong>样例输入</strong></p><p>7<br>5 4 1 2 3 6 4</p><p><strong>样例输出</strong></p><p>2</p><p><strong>评测用例规模与约定</strong></p><p>　　所有评测用例满足：1 ≤ <em>n</em> ≤ 1000，每天的销售量是不超过10000的非负整数。</p><div class="note success">只要三个连续的数不是连续递增或者递减就计数增加。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((a[i]-a[i<span class="number">-1</span>])*(a[i+<span class="number">1</span>]-a[i])&lt;<span class="number">0</span>)</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201604-2-俄罗斯方块"><a href="#201604-2-俄罗斯方块" class="headerlink" title="201604-2 俄罗斯方块"></a>201604-2 俄罗斯方块</h1><p><strong>问题描述</strong></p><p>　　俄罗斯方块是俄罗斯人阿列克谢·帕基特诺夫发明的一款休闲游戏。<br>　　游戏在一个15行10列的方格图上进行，方格图上的每一个格子可能已经放置了方块，或者没有放置方块。每一轮，都会有一个新的由4个小方块组成的板块从方格图的上方落下，玩家可以操作板块左右移动放到合适的位置，当板块中某一个方块的下边缘与方格图上的方块上边缘重合或者达到下边界时，板块不再移动，如果此时方格图的某一行全放满了方块，则该行被消除并得分。<br>　　在这个问题中，你需要写一个程序来模拟板块下落，你不需要处理玩家的操作，也不需要处理消行和得分。<br>　　具体的，给定一个初始的方格图，以及一个板块的形状和它下落的初始位置，你要给出最终的方格图。</p><p><strong>输入格式</strong></p><p>　　输入的前15行包含初始的方格图，每行包含10个数字，相邻的数字用空格分隔。如果一个数字是0，表示对应的方格中没有方块，如果数字是1，则表示初始的时候有方块。输入保证前4行中的数字都是0。<br>　　输入的第16至第19行包含新加入的板块的形状，每行包含4个数字，组成了板块图案，同样0表示没方块，1表示有方块。输入保证板块的图案中正好包含4个方块，且4个方块是连在一起的（准确的说，4个方块是四连通的，即给定的板块是俄罗斯方块的标准板块）。<br>　　第20行包含一个1到7之间的整数，表示板块图案最左边开始的时候是在方格图的哪一列中。注意，这里的板块图案指的是16至19行所输入的板块图案，如果板块图案的最左边一列全是0，则它的左边和实际所表示的板块的左边是不一致的（见样例）</p><p><strong>输出格式</strong></p><p>　　输出15行，每行10个数字，相邻的数字之间用一个空格分隔，表示板块下落后的方格图。注意，你不需要处理最终的消行。</p><p><strong>样例输入</strong></p><p>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 1 0 0<br>0 0 0 0 0 0 1 0 0 0<br>0 0 0 0 0 0 1 0 0 0<br>1 1 1 0 0 0 1 1 1 1<br>0 0 0 0 1 0 0 0 0 0<br>0 0 0 0<br>0 1 1 1<br>0 0 0 1<br>0 0 0 0<br>3</p><p><strong>样例输出</strong></p><p>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 1 0 0<br>0 0 0 0 0 0 1 0 0 0<br>0 0 0 0 0 0 1 0 0 0<br>1 1 1 1 1 1 1 1 1 1<br>0 0 0 0 1 1 0 0 0 0</p><div class="note success">模拟的思想，找到方块能够下降的位置，然后重新赋值后输出。提示好坑人啊，什么左边是不是0的问题，一开始被误导了…底板的边界从1开始计数，而不是0。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> board[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> block[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> i,j,k,a,b,pos;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;board[i][j];</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">        board[<span class="number">16</span>][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;block[i][j];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;pos;</span><br><span class="line">    <span class="keyword">bool</span> over=<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//模拟，找到下降的位置</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">4</span>;a++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(b=<span class="number">0</span>;b&lt;<span class="number">4</span>;b++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(block[a][b]==<span class="number">1</span> &amp;&amp; board[i+a][pos+b]==<span class="number">1</span>)</span><br><span class="line">                    over = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(over==<span class="literal">true</span>)  <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//改变值</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">4</span>;a++)</span><br><span class="line">        <span class="keyword">for</span>(b=<span class="number">0</span>;b&lt;<span class="number">4</span>;b++)</span><br><span class="line">            board[i+a<span class="number">-1</span>][pos+b]+=block[a][b];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;board[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201609-1-最大波动"><a href="#201609-1-最大波动" class="headerlink" title="201609-1 最大波动"></a>201609-1 最大波动</h1><p><strong>问题描述</strong></p><p>　　小明正在利用股票的波动程度来研究股票。小明拿到了一只股票每天收盘时的价格，他想知道，这只股票连续几天的最大波动值是多少，即在这几天中某天收盘价格与前一天收盘价格之差的绝对值最大是多少。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含了一个整数<em>n</em>，表示小明拿到的收盘价格的连续天数。<br>　　第二行包含<em>n</em>个正整数，依次表示每天的收盘价格。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示这只股票这<em>n</em>天中的最大波动值。</p><p><strong>样例输入</strong></p><p>6<br>2 5 5 7 3 5</p><p><strong>样例输出</strong></p><p>4</p><p><strong>样例说明</strong></p><p>　　第四天和第五天之间的波动最大，波动值为|3-7|=4。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，2 ≤ <em>n</em> ≤ 1000。股票每一天的价格为1到10000之间的整数。</p><div class="note success">送分题==</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10005</span>],b[<span class="number">10005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i<span class="number">-1</span>]=<span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="comment">//if(b[i-1]&lt;0)    b[i-1]=-b[i-1];</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(b,b+n);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;b[n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201609-2-火车购票"><a href="#201609-2-火车购票" class="headerlink" title="201609-2 火车购票"></a>201609-2 火车购票</h1><p><strong>问题描述</strong></p><p>　　请实现一个铁路购票系统的简单座位分配算法，来处理一节车厢的座位分配。<br>　　假设一节车厢有20排、每一排5个座位。为方便起见，我们用1到100来给所有的座位编号，第一排是1到5号，第二排是6到10号，依次类推，第20排是96到100号。<br>　　购票时，一个人可能购一张或多张票，最多不超过5张。如果这几张票可以安排在同一排编号相邻的座位，则应该安排在编号最小的相邻座位。否则应该安排在编号最小的几个空座位中（不考虑是否相邻）。<br>　　假设初始时车票全部未被购买，现在给了一些购票指令，请你处理这些指令。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示购票指令的数量。<br>　　第二行包含<em>n</em>个整数，每个整数<em>p</em>在1到5之间，表示要购入的票数，相邻的两个数之间使用一个空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出<em>n</em>行，每行对应一条指令的处理结果。<br>　　对于购票指令<em>p</em>，输出<em>p</em>张车票的编号，按从小到大排序。</p><p><strong>样例输入</strong></p><p>4<br>2 5 4 2</p><p><strong>样例输出</strong></p><p>1 2<br>6 7 8 9 10<br>11 12 13 14<br>3 4</p><p><strong>样例说明</strong></p><p>　　1) 购2张票，得到座位1、2。<br>　　2) 购5张票，得到座位6至10。<br>　　3) 购4张票，得到座位11至14。<br>　　4) 购2张票，得到座位3、4。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 100，所有购票数量之和不超过100。</p><div class="note success">我就直接暴力模拟，对1~5这五种情况全部列举一遍，得了90分，有一个问题就是如果前20次都是4个座位，第21次再买4个座位时，应该输出：5 10 15 20，中间是空格而不是换行，所以需要手动输出空格和换行。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">101</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">99</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">98</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">2</span>]==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>&lt;=<span class="number">3</span> &amp;&amp; i%<span class="number">5</span>!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">97</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">2</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">3</span>]==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>&lt;=<span class="number">2</span> &amp;&amp; i%<span class="number">5</span>!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">2</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">96</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">2</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">3</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">4</span>]==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">2</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">3</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">4</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,op;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        buy(op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201612-1-中间数"><a href="#201612-1-中间数" class="headerlink" title="201612-1 中间数"></a>201612-1 中间数</h1><p><strong>问题描述</strong></p><p>　　在一个整数序列<em>a</em>1, <em>a</em>2, …, <em>an</em>中，如果存在某个数，大于它的整数数量等于小于它的整数数量，则称其为中间数。在一个序列中，可能存在多个下标不相同的中间数，这些中间数的值是相同的。<br>　　给定一个整数序列，请找出这个整数序列的中间数的值。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含了一个整数<em>n</em>，表示整数序列中数的个数。<br>　　第二行包含<em>n</em>个正整数，依次表示<em>a</em>1, <em>a</em>2, …, <em>an</em>。</p><p><strong>输出格式</strong></p><p>　　如果约定序列的中间数存在，则输出中间数的值，否则输出-1表示不存在中间数。</p><p><strong>样例输入</strong></p><p>6<br>2 6 5 6 3 5</p><p><strong>样例输出</strong></p><p>5</p><p><strong>样例说明</strong></p><p>　　比5小的数有2个，比5大的数也有2个。</p><p><strong>样例输入</strong></p><p>4<br>3 4 6 7</p><p><strong>样例输出</strong></p><p>-1</p><p><strong>样例说明</strong></p><p>　　在序列中的4个数都不满足中间数的定义。</p><p><strong>样例输入</strong></p><p>5<br>3 4 6 6 7</p><p><strong>样例输出</strong></p><p>-1</p><p><strong>样例说明</strong></p><p>　　在序列中的5个数都不满足中间数的定义。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>ai</em> ≤ 1000。</p><div class="note success">就是遍历每一个数，统计比它大和小的数各有多少个。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> t=a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[i])   s1++;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[i])   s2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s1==s2)</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201612-2-工资计算"><a href="#201612-2-工资计算" class="headerlink" title="201612-2 工资计算"></a>201612-2 工资计算</h1><p><strong>问题描述</strong></p><p>　　小明的公司每个月给小明发工资，而小明拿到的工资为交完个人所得税之后的工资。假设他一个月的税前工资（扣除五险一金后、未扣税前的工资）为<em>S</em>元，则他应交的个人所得税按如下公式计算：<br>　　1） 个人所得税起征点为3500元，若<em>S</em>不超过3500，则不交税，3500元以上的部分才计算个人所得税，令<em>A</em>=<em>S</em>-3500元；<br>　　2） <em>A</em>中不超过1500元的部分，税率3%；<br>　　3） <em>A</em>中超过1500元未超过4500元的部分，税率10%；<br>　　4） <em>A</em>中超过4500元未超过9000元的部分，税率20%；<br>　　5） <em>A</em>中超过9000元未超过35000元的部分，税率25%；<br>　　6） <em>A</em>中超过35000元未超过55000元的部分，税率30%；<br>　　7） <em>A</em>中超过55000元未超过80000元的部分，税率35%；<br>　　8） <em>A</em>中超过80000元的部分，税率45%；<br>　　例如，如果小明的税前工资为10000元，则<em>A</em>=10000-3500=6500元，其中不超过1500元部分应缴税1500×3%=45元，超过1500元不超过4500元部分应缴税(4500-1500)×10%=300元，超过4500元部分应缴税(6500-4500)×20%=400元。总共缴税745元，税后所得为9255元。<br>　　已知小明这个月税后所得为<em>T</em>元，请问他的税前工资<em>S</em>是多少元。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>T</em>，表示小明的税后所得。所有评测数据保证小明的税前工资为一个整百的数。</p><p><strong>输出格式</strong></p><p>　　输出一个整数<em>S</em>，表示小明的税前工资。</p><p><strong>样例输入</strong></p><p>9255</p><p><strong>样例输出</strong></p><p>10000</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>T</em> ≤ 100000。</p><div class="note success">不算很难，关键是细心，反解方程需要思路非常清晰，循环一个个检验比较保险点。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,s,a,x;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;=<span class="number">3500</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    s=<span class="number">200000</span>;</span><br><span class="line">    a=s<span class="number">-3500</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;=<span class="number">1500</span>)</span><br><span class="line">            x=a*<span class="number">0.03</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;=<span class="number">4500</span>)</span><br><span class="line">            x=<span class="number">45</span>+(a<span class="number">-1500</span>)*<span class="number">0.1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;=<span class="number">9000</span>)</span><br><span class="line">            x=<span class="number">45</span>+<span class="number">300</span>+(a<span class="number">-4500</span>)*<span class="number">0.2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;=<span class="number">35000</span>)</span><br><span class="line">            x=<span class="number">45</span>+<span class="number">300</span>+<span class="number">900</span>+(a<span class="number">-9000</span>)*<span class="number">0.25</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;=<span class="number">55000</span>)</span><br><span class="line">            x=<span class="number">45</span>+<span class="number">300</span>+<span class="number">900</span>+<span class="number">6500</span>+(a<span class="number">-35000</span>)*<span class="number">0.3</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;=<span class="number">80000</span>)</span><br><span class="line">            x=<span class="number">45</span>+<span class="number">300</span>+<span class="number">900</span>+<span class="number">6500</span>+<span class="number">6000</span>+(a<span class="number">-55000</span>)*<span class="number">0.35</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x=<span class="number">45</span>+<span class="number">300</span>+<span class="number">900</span>+<span class="number">6500</span>+<span class="number">6000</span>+<span class="number">8750</span>+(a<span class="number">-80000</span>)*<span class="number">0.45</span>;</span><br><span class="line">        <span class="keyword">if</span>(s==x+t)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        s-=<span class="number">100</span>;</span><br><span class="line">        a=s<span class="number">-3500</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201703-1-分蛋糕"><a href="#201703-1-分蛋糕" class="headerlink" title="201703-1 分蛋糕"></a>201703-1 分蛋糕</h1><p><strong>问题描述</strong></p><p>　　小明今天生日，他有<em>n</em>块蛋糕要分给朋友们吃，这<em>n</em>块蛋糕（编号为1到<em>n</em>）的重量分别为<em>a</em>1, <em>a</em>2, …, <em>an</em>。小明想分给每个朋友至少重量为<em>k</em>的蛋糕。小明的朋友们已经排好队准备领蛋糕，对于每个朋友，小明总是先将自己手中编号最小的蛋糕分给他，当这个朋友所分得蛋糕的重量不到<em>k</em>时，再继续将剩下的蛋糕中编号最小的给他，直到小明的蛋糕分完或者这个朋友分到的蛋糕的总重量大于等于<em>k</em>。<br>　　请问当小明的蛋糕分完时，总共有多少个朋友分到了蛋糕。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含了两个整数<em>n</em>, <em>k</em>，意义如上所述。<br>　　第二行包含<em>n</em>个正整数，依次表示<em>a</em>1, <em>a</em>2, …, <em>an</em>。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示有多少个朋友分到了蛋糕。</p><p><strong>样例输入</strong></p><p>6 9<br>2 6 5 6 3 5</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例说明</strong></p><p>　　第一个朋友分到了前3块蛋糕，第二个朋友分到了第4、5块蛋糕，第三个朋友分到了最后一块蛋糕。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>k</em> ≤ 10000，1 ≤ <em>ai</em> ≤ 1000。</p><div class="note success">一开始用数组循环，越写越晕，不知道哪里没有考虑到，只有70分，然后改用while循环，一个数一个数的加，大于等于k时就计数。最后再判断一下最后一次的累加值是否为0，不为0就代表最后剩下的蛋糕不够k，但是还可以再分给一个人。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,a,s=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        s+=a;</span><br><span class="line">        <span class="keyword">if</span>(s&gt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            s=<span class="number">0</span>;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s!=<span class="number">0</span>)   sum++;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201703-2-学生排队"><a href="#201703-2-学生排队" class="headerlink" title="201703-2 学生排队"></a>201703-2 学生排队</h1><p><strong>问题描述</strong></p><p>　　体育老师小明要将自己班上的学生按顺序排队。他首先让学生按学号从小到大的顺序排成一排，学号小的排在前面，然后进行多次调整。一次调整小明可能让一位同学出队，向前或者向后移动一段距离后再插入队列。<br>　　例如，下面给出了一组移动的例子，例子中学生的人数为8人。<br>　　0）初始队列中学生的学号依次为1, 2, 3, 4, 5, 6, 7, 8；<br>　　1）第一次调整，命令为“3号同学向后移动2”，表示3号同学出队，向后移动2名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 5, 3, 6, 7, 8；<br>　　2）第二次调整，命令为“8号同学向前移动3”，表示8号同学出队，向前移动3名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 5, 8, 3, 6, 7；<br>　　3）第三次调整，命令为“3号同学向前移动2”，表示3号同学出队，向前移动2名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 3, 5, 8, 6, 7。<br>　　小明记录了所有调整的过程，请问，最终从前向后所有学生的学号依次是多少？<br>　　请特别注意，上述移动过程中所涉及的号码指的是学号，而不是在队伍中的位置。在向后移动时，移动的距离不超过对应同学后面的人数，如果向后移动的距离正好等于对应同学后面的人数则该同学会移动到队列的最后面。在向前移动时，移动的距离不超过对应同学前面的人数，如果向前移动的距离正好等于对应同学前面的人数则该同学会移动到队列的最前面。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示学生的数量，学生的学号由1到<em>n</em>编号。<br>　　第二行包含一个整数<em>m</em>，表示调整的次数。<br>　　接下来m行，每行两个整数p, q，如果q为正，表示学号为p的同学向后移动q，如果q为负，表示学号为p的同学向前移动-q。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含n个整数，相邻两个整数之间由一个空格分隔，表示最终从前向后所有学生的学号。</p><p><strong>样例输入</strong></p><p>8<br>3<br>3 2<br>8 -3<br>3 -2</p><p><strong>样例输出</strong></p><p>1 2 4 3 5 8 6 7</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>m</em> ≤ 1000，所有移动均合法。</p><div class="note success">不算很难，就是模拟。需要注意的是向前移动的时候，需要从后往前修改数组里的元素。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,k,x,y,pos;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)   a[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[k]==x)</span><br><span class="line">                pos=k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;<span class="number">0</span>)<span class="comment">//back</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=pos;j&lt;pos+y;j++)</span><br><span class="line">                a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">            a[pos+y]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y&lt;<span class="number">0</span>)<span class="comment">//front</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=pos;j&gt;pos+y;j--)</span><br><span class="line">                a[j]=a[j<span class="number">-1</span>];</span><br><span class="line">            a[pos+y]=x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)   <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201709-1-打酱油"><a href="#201709-1-打酱油" class="headerlink" title="201709-1 打酱油"></a>201709-1 打酱油</h1><p><strong>问题描述</strong></p><p>　　小明带着<em>N</em>元钱去买酱油。酱油10块钱一瓶，商家进行促销，每买3瓶送1瓶，或者每买5瓶送2瓶。请问小明最多可以得到多少瓶酱油。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>N</em>，表示小明可用于买酱油的钱数。<em>N</em>是10的整数倍，<em>N</em>不超过300。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示小明最多可以得到多少瓶酱油。</p><p><strong>样例输入</strong></p><p>40</p><p><strong>样例输出</strong></p><p>5</p><p><strong>样例说明</strong></p><p>　　把40元分成30元和10元，分别买3瓶和1瓶，其中3瓶送1瓶，共得到5瓶。</p><p><strong>样例输入</strong></p><p>80</p><p><strong>样例输出</strong></p><p>11</p><p><strong>样例说明</strong></p><p>　　把80元分成30元和50元，分别买3瓶和5瓶，其中3瓶送1瓶，5瓶送2瓶，共得到11瓶。</p><div class="note success">优先买5瓶送2瓶的，50块钱；再买3瓶送1瓶的，30块钱；剩下的钱就只能一瓶一瓶的买。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> k1=n/<span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> s1=k1*<span class="number">7</span>;</span><br><span class="line">    n-=k1*<span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> k2=n/<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">int</span> s2=k2*<span class="number">4</span>;</span><br><span class="line">    n-=k2*<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">int</span> s3=n/<span class="number">10</span>;</span><br><span class="line">    s=s1+s2+s3;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201709-2-公共钥匙盒"><a href="#201709-2-公共钥匙盒" class="headerlink" title="201709-2 公共钥匙盒"></a>201709-2 公共钥匙盒</h1><p><strong>问题描述</strong></p><p>　　有一个学校的老师共用<em>N</em>个教室，按照规定，所有的钥匙都必须放在公共钥匙盒里，老师不能带钥匙回家。每次老师上课前，都从公共钥匙盒里找到自己上课的教室的钥匙去开门，上完课后，再将钥匙放回到钥匙盒中。<br>　　钥匙盒一共有<em>N</em>个挂钩，从左到右排成一排，用来挂<em>N</em>个教室的钥匙。一串钥匙没有固定的悬挂位置，但钥匙上有标识，所以老师们不会弄混钥匙。<br>　　每次取钥匙的时候，老师们都会找到自己所需要的钥匙将其取走，而不会移动其他钥匙。每次还钥匙的时候，还钥匙的老师会找到最左边的空的挂钩，将钥匙挂在这个挂钩上。如果有多位老师还钥匙，则他们按钥匙编号从小到大的顺序还。如果同一时刻既有老师还钥匙又有老师取钥匙，则老师们会先将钥匙全还回去再取出。<br>　　今天开始的时候钥匙是按编号从小到大的顺序放在钥匙盒里的。有<em>K</em>位老师要上课，给出每位老师所需要的钥匙、开始上课的时间和上课的时长，假设下课时间就是还钥匙时间，请问最终钥匙盒里面钥匙的顺序是怎样的？</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>N</em>, <em>K</em>。<br>　　接下来<em>K</em>行，每行三个整数<em>w</em>, <em>s</em>, <em>c</em>，分别表示一位老师要使用的钥匙编号、开始上课的时间和上课的时长。可能有多位老师使用同一把钥匙，但是老师使用钥匙的时间不会重叠。<br>　　保证输入数据满足输入格式，你不用检查数据合法性。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含<em>N</em>个整数，相邻整数间用一个空格分隔，依次表示每个挂钩上挂的钥匙编号。</p><p><strong>样例输入</strong></p><p>5 2<br>4 3 3<br>2 2 7</p><p><strong>样例输出</strong></p><p>1 4 3 2 5</p><p><strong>样例说明</strong></p><p>　　第一位老师从时刻3开始使用4号教室的钥匙，使用3单位时间，所以在时刻6还钥匙。第二位老师从时刻2开始使用钥匙，使用7单位时间，所以在时刻9还钥匙。<br>　　每个关键时刻后的钥匙状态如下（X表示空）：<br>　　时刻2后为1X345；<br>　　时刻3后为1X3X5；<br>　　时刻6后为143X5；<br>　　时刻9后为14325。</p><p><strong>样例输入</strong></p><p>5 7<br>1 1 14<br>3 3 12<br>1 15 12<br>2 7 20<br>3 18 12<br>4 21 19<br>5 30 9</p><p><strong>样例输出</strong></p><p>1 2 3 5 4</p><p><strong>评测用例规模与约定</strong></p><p>　　对于30%的评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 10, 1 ≤ <em>w</em> ≤ <em>N</em>, 1 ≤ <em>s</em>, <em>c</em> ≤ 30；<br>　　对于60%的评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 50，1 ≤ <em>w</em> ≤ <em>N</em>，1 ≤ <em>s</em> ≤ 300，1 ≤ <em>c</em> ≤ 50；<br>　　对于所有评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 1000，1 ≤ <em>w</em> ≤ <em>N</em>，1 ≤ <em>s</em> ≤ 10000，1 ≤ <em>c</em> ≤ 100。</p><div class="note success">这一次的CCF，我报名参加了，然而这一题完全没有做出来……用结构体的排序就系统报错，思路也不清晰。（这题最为第二题确实难了点……）<br><br>这次做也废了很大功夫才拿到满分，用的结构体 + vector，关于结构体排序的问题又反复弄了半天，一开始单独定义了一个函数，但是只有30分，把排序函数写在struct的定义里面就是满分了，到现在也不知道为什么！</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">action</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> keyid;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    <span class="keyword">int</span> type; <span class="comment">//0:put,1:get</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> action &amp;other) <span class="keyword">const</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(time&lt;other.time) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(time==other.time &amp;&amp; type&lt;other.type) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(time==other.time &amp;&amp; type==other.type &amp;&amp; keyid&lt;other.keyid) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,K,w,s,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;K;</span><br><span class="line">    <span class="built_in">vector</span>&lt;action&gt; actions;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; states(N+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=N;n++)   states[n]=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;K;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        action p1,p2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;w&gt;&gt;s&gt;&gt;c;</span><br><span class="line">        p1.keyid=w;p1.time=s;p1.type=<span class="number">1</span>;</span><br><span class="line">        actions.push_back(p1);</span><br><span class="line">        p2.keyid=w;p2.time=s+c;p2.type=<span class="number">0</span>;</span><br><span class="line">        actions.push_back(p2);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(actions.begin(),actions.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;actions.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        action temp=actions[i];</span><br><span class="line">        <span class="keyword">if</span>(temp.type==<span class="number">0</span>)<span class="comment">//put</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=N;n++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(states[n]==<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    states[n]=temp.keyid;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=N;n++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(states[n]==temp.keyid)</span><br><span class="line">                &#123;</span><br><span class="line">                    states[n]=<span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;n&lt;=N;n++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;states[n]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201712-1-最小差值"><a href="#201712-1-最小差值" class="headerlink" title="201712-1 最小差值"></a>201712-1 最小差值</h1><p><strong>问题描述</strong></p><p>　　给定<em>n</em>个数，请找出其中相差（差的绝对值）最小的两个数，输出它们的差值的绝对值。</p><p><strong>输入格式</strong></p><p>　　输入第一行包含一个整数<em>n</em>。<br>　　第二行包含<em>n</em>个正整数，相邻整数之间使用一个空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示答案。</p><p><strong>样例输入</strong></p><p>5<br>1 5 4 8 20</p><p><strong>样例输出</strong></p><p>1</p><p><strong>样例说明</strong></p><p>　　相差最小的两个数是5和4，它们之间的差值是1。</p><p><strong>样例输入</strong></p><p>5<br>9 3 6 1 3</p><p><strong>样例输出</strong></p><p>0</p><p><strong>样例说明</strong></p><p>　　有两个相同的数3，它们之间的差值是0.</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，2 ≤ <em>n</em> ≤ 1000，每个给定的整数都是不超过10000的正整数。</p><div class="note success">先排序，再遍历逐个比较差值。注意差值不能为负数，所以做减法时加绝对值比较保险（不加也可以，因为排过序了）</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,ans=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>])&lt;ans)</span><br><span class="line">            ans=<span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201712-2-游戏"><a href="#201712-2-游戏" class="headerlink" title="201712-2 游戏"></a>201712-2 游戏</h1><p><strong>问题描述</strong></p><p>　　有<em>n</em>个小朋友围成一圈玩游戏，小朋友从1至<em>n</em>编号，2号小朋友坐在1号小朋友的顺时针方向，3号小朋友坐在2号小朋友的顺时针方向，……，1号小朋友坐在<em>n</em>号小朋友的顺时针方向。<br>　　游戏开始，从1号小朋友开始顺时针报数，接下来每个小朋友的报数是上一个小朋友报的数加1。若一个小朋友报的数为<em>k</em>的倍数或其末位数（即数的个位）为<em>k</em>，则该小朋友被淘汰出局，不再参加以后的报数。当游戏中只剩下一个小朋友时，该小朋友获胜。<br>　　例如，当n=5, k=2时：<br>　　1号小朋友报数1；<br>　　2号小朋友报数2淘汰；<br>　　3号小朋友报数3；<br>　　4号小朋友报数4淘汰；<br>　　5号小朋友报数5；<br>　　1号小朋友报数6淘汰；<br>　　3号小朋友报数7；<br>　　5号小朋友报数8淘汰；<br>　　3号小朋友获胜。<br>　　给定<em>n</em>和<em>k</em>，请问最后获胜的小朋友编号为多少？</p><p><strong>输入格式</strong></p><p>　　输入一行，包括两个整数<em>n</em>和<em>k</em>，意义如题目所述。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，表示获胜的小朋友编号。</p><p><strong>样例输入</strong></p><p>5 2</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例输入</strong></p><p>7 3</p><p><strong>样例输出</strong></p><p>4</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>k</em> ≤ 9。</p><div class="note success">仔细读题目！不是约瑟夫环问题！报数要一直一直递增下去…模拟的思路。另外要注意n=1时，无论k为何值都应该是输出1。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,count=<span class="number">0</span>,index=<span class="number">0</span>,step=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[index]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((step%k==<span class="number">0</span>)||(step%<span class="number">10</span>==k))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(count==n<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;index+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                a[index]=<span class="number">1</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">        index%=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201803-1-跳一跳"><a href="#201803-1-跳一跳" class="headerlink" title="201803-1 跳一跳"></a>201803-1 跳一跳</h1><p><strong>问题描述</strong></p><p>　　近来，跳一跳这款小游戏风靡全国，受到不少玩家的喜爱。<br>　　简化后的跳一跳规则如下：玩家每次从当前方块跳到下一个方块，如果没有跳到下一个方块上则游戏结束。<br>　　如果跳到了方块上，但没有跳到方块的中心则获得1分；跳到方块中心时，若上一次的得分为1分或这是本局游戏的第一次跳跃则此次得分为2分，否则此次得分比上一次得分多两分（即连续跳到方块中心时，总得分将+2，+4，+6，+8…）。<br>　　现在给出一个人跳一跳的全过程，请你求出他本局游戏的得分（按照题目描述的规则）。</p><p><strong>输入格式</strong></p><p>　　输入包含多个数字，用空格分隔，每个数字都是1，2，0之一，1表示此次跳跃跳到了方块上但是没有跳到中心，2表示此次跳跃跳到了方块上并且跳到了方块中心，0表示此次跳跃没有跳到方块上（此时游戏结束）。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，为本局游戏的得分（在本题的规则下）。</p><p><strong>样例输入</strong></p><p>1 1 2 2 2 1 1 2 2 0</p><p><strong>样例输出</strong></p><p>22</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，输入的数字不超过30个，保证0正好出现一次且为最后一个数字。</p><div class="note success">就是统计2连续出现的次数。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,num=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x &amp;&amp; x!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=<span class="number">1</span>;</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">            sum+=<span class="number">2</span>*num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201803-2-碰撞的小球"><a href="#201803-2-碰撞的小球" class="headerlink" title="201803-2 碰撞的小球"></a>201803-2 碰撞的小球</h1><p><strong>问题描述</strong></p><p>　　数轴上有一条长度为L（L为偶数)的线段，左端点在原点，右端点在坐标L处。有n个不计体积的小球在线段上，开始时所有的小球都处在偶数坐标上，速度方向向右，速度大小为1单位长度每秒。<br>　　当小球到达线段的端点（左端点或右端点）的时候，会立即向相反的方向移动，速度大小仍然为原来大小。<br>　　当两个小球撞到一起的时候，两个小球会分别向与自己原来移动的方向相反的方向，以原来的速度大小继续移动。<br>　　现在，告诉你线段的长度L，小球数量n，以及n个小球的初始位置，请你计算t秒之后，各个小球的位置。</p><p><strong>提示</strong></p><p>　　因为所有小球的初始位置都为偶数，而且线段的长度为偶数，可以证明，不会有三个小球同时相撞，小球到达线段端点以及小球之间的碰撞时刻均为整数。<br>　　同时也可以证明两个小球发生碰撞的位置一定是整数（但不一定是偶数）。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含三个整数n, L, t，用空格分隔，分别表示小球的个数、线段长度和你需要计算t秒之后小球的位置。<br>　　第二行包含n个整数a1, a2, …, an，用空格分隔，表示初始时刻n个小球的位置。</p><p><strong>输出格式</strong></p><p>　　输出一行包含n个整数，用空格分隔，第i个整数代表初始时刻位于ai的小球，在t秒之后的位置。</p><p><strong>样例输入</strong></p><p>3 10 5<br>4 6 8</p><p><strong>样例输出</strong></p><p>7 9 9</p><p><strong>样例说明</strong></p><p>　　初始时，三个小球的位置分别为4, 6, 8。<br><img src="http://118.190.20.162/RequireFile.do?fid=b6beJN6e" alt="img"><br>　　一秒后，三个小球的位置分别为5, 7, 9。<br><img src="http://118.190.20.162/RequireFile.do?fid=Ab8QmfeR" alt="img"><br>　　两秒后，第三个小球碰到墙壁，速度反向，三个小球位置分别为6, 8, 10。<br><img src="http://118.190.20.162/RequireFile.do?fid=fgQLYbNn" alt="img"><br>　　三秒后，第二个小球与第三个小球在位置9发生碰撞，速度反向（注意碰撞位置不一定为偶数），三个小球位置分别为7, 9, 9。<br><img src="http://118.190.20.162/RequireFile.do?fid=erfyNJDT" alt="img"><br>　　四秒后，第一个小球与第二个小球在位置8发生碰撞，速度反向，第三个小球碰到墙壁，速度反向，三个小球位置分别为8, 8, 10。<br><img src="http://118.190.20.162/RequireFile.do?fid=m5EBf6q8" alt="img"><br>　　五秒后，三个小球的位置分别为7, 9, 9。<br><img src="http://118.190.20.162/RequireFile.do?fid=JRHaHt4T" alt="img"></p><p><strong>样例输入</strong></p><p>10 22 30<br>14 12 16 6 10 2 8 20 18 4</p><p><strong>样例输出</strong></p><p>6 6 8 2 4 0 4 12 10 2</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，1 ≤ n ≤ 100，1 ≤ t ≤ 100，2 ≤ L ≤ 1000，0 &lt; ai &lt; L。L为偶数。<br>　　保证所有小球的初始位置互不相同且均为偶数。</p><div class="note success">一开始想的太简单，以为给出的初始状态全部是排好序的，然后两个数组，一个表述位置，一个表示方向，碰撞检测就是检测pos[ i ] 和 pos[ i+1 ]，结果发现太天真，这样交上去是0分。如果先把pos排序，输出的结果也是被拍了序的（因为下标改变了），纠结了半天不知道怎么排序之后记录下标……<br><br>后来看了网上的代码，原来可以用双重循环进行碰撞检测……关键是要定义一个是否碰撞的数组，如果已经检测到了碰撞，就把对应的小球标记为检测过。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,L,t,i,j,k;</span><br><span class="line">    <span class="keyword">int</span> pos[<span class="number">1005</span>],dir[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;L&gt;&gt;t;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;pos[i];</span><br><span class="line">        dir[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> time=<span class="number">0</span>;time&lt;t;time++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pos[i]+=dir[i];</span><br><span class="line">            <span class="keyword">if</span>(pos[i]==L || pos[i]==<span class="number">0</span>)  dir[i]=-dir[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ischeck[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ischeck[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(pos[i]==pos[j] &amp;&amp; i!=j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        dir[i]=-dir[i];</span><br><span class="line">                        dir[j]=-dir[j];</span><br><span class="line">                        ischeck[i]=<span class="number">1</span>;</span><br><span class="line">                        ischeck[j]=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pos[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《图解算法》学习笔记9</title>
      <link href="/2018/06/11/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/"/>
      <url>/2018/06/11/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第九章的学习笔记</p><a id="more"></a><h1 id="第九章-动态规划"><a href="#第九章-动态规划" class="headerlink" title="第九章 动态规划"></a>第九章 动态规划</h1><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>经典的背包问题：</p><p>假设你是一个小偷，背着一个可以装4磅东西的背包。你可以盗取的物品有以下3样：</p><ul><li>音响  3000美元  4磅</li><li>笔记本电脑  2000美元  3磅</li><li>吉他  1500美元  1磅</li></ul><p>为了让盗窃的商品价值最高，应该怎么选择商品？</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>每一个动态规划问题都是从一个网格开始，背包问题的网格如下：</p><p><img src="https://i.loli.net/2018/06/11/5b1e94011aa87.png" alt="a.png"></p><p>网格的各行为商品，各列为不同容量（1~4磅）的背包。所有这些列都需要，因为他们帮助你计算子背包的价值。网格最初是空的，你将填充其中的每一个单元格，网格填满后，就可以得出答案。</p><p>现在开始填表：</p><ul><li><p>吉他行</p><p>这一行中，你能够拿的物品只有吉他。当背包容量为1时就可以拿吉他，因为吉他的重量就是1，这时最大价值为1500，接下来当背包容量为2，3，4时，依然只能拿吉他，所以第一行全部都是1500。</p><p><img src="https://i.loli.net/2018/06/11/5b1e94226bfa8.png" alt="b.png"></p></li><li><p>音响行</p><p>现在可以选择的物品有吉他和音响。当容量为1，2，3时，只能拿吉他，价值为1500；当容量为4时，可以拿音响，音响比吉他值钱，所以拿音响，价值为3000。</p><p>这时容量为4的背包最大价值更新为3000。</p><p><img src="https://i.loli.net/2018/06/11/5b1e94375e4c1.png" alt="c.png"></p></li><li><p>笔记本电脑行</p><p>现在可以选择的物品有吉他、音响、笔记本电脑。当容量为1，2时，只能拿吉他，价值1500；当容量为3时，可以拿笔记本电脑，更新价值为2000；当容量为4时，可以拿（容量为3时的最大值 + 余下的1磅物品）或者之前选择的音响。发现笔记本电脑+吉他更之前，更新价值为4500。</p><p><img src="https://i.loli.net/2018/06/11/5b1e944e4083f.png" alt="d.png"></p></li></ul><p>现在表填完了，最后一行的最后一列代表所有物品都可以选且容量为背包最大容量时能获得的最大价值，即为答案。</p><h3 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h3><p>在刚刚填表的过程中，其实是有一套规则的：<br>$$<br>cell\ [\ i\  ][\  j\  ]=<br>\begin{cases}  上一个单元格的值（即cell\ [\ i-1\ ][\ j-1\ ]的值）<br>\\当前商品的价值 + 剩余空间的价值（cell\ [\ i-1\ ][\ j- 当前商品的重量\ ]）<br>\end{cases}<br>$$<br><strong>背包问题FAQ</strong></p><ul><li><p>Q：再增加一个物品呢？</p><p>A：直接再加一行即可，表格中前面的值不变，只用填新加的这一行就可以了，依然遵循刚才的填表原则。</p></li><li><p>Q：行的排列顺序发生变化会如何？</p><p>A：无论行是什么顺序，都不影响最终结果。</p></li><li><p>Q：可以逐列而不是逐行填表吗？</p><p>A：背包问题可以，有些动态规划问题不行。</p></li><li><p>Q：增加一件更小的物品怎么办？</p><p>A：例如增加一个0.5磅的物品，子背包应该变为0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4。</p></li><li><p>Q：可以偷商品的一部分吗？</p><p>A：不行，动态规划不能解决只拿一部分的问题。需要用贪心算法每次选择价值最高的物品。</p></li><li><p>Q：最优解可能出现没装满的情况吗？</p><p>A：很有可能。</p></li></ul><h2 id="最长公共子串-amp-子序列"><a href="#最长公共子串-amp-子序列" class="headerlink" title="最长公共子串&amp;子序列"></a>最长公共子串&amp;子序列</h2><h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><p>最长公共子串问题描述：假如用户输入一个单词，但是拼错了，你的字典里根本没有这个单词，但是有几个类似的单词，怎么判断另一个单词和他输入的单词的有多少字母相同呢？</p><p>例如他输入hish，而你想计算fish和它的相似度。</p><p>填表：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">S</th><th style="text-align:center">H</th></tr></thead><tbody><tr><td style="text-align:center">F</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr></tbody></table><p>表格中最大的数为3，所以两个单词的最长公共子串的长度为3。</p><p>怎么填表的呢？</p><ul><li>如果两个字母不相同，则为0</li><li>如果两个字母相同，则为左上角邻居的值+1</li></ul><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">F</th><th style="text-align:center">O</th><th style="text-align:center">S</th><th style="text-align:center">H</th></tr></thead><tbody><tr><td style="text-align:center">F</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr></tbody></table><p>填表依据：</p><ul><li>如果两个字母不同，就选择上方和左方邻居中较大的那个</li><li>如果两个字母相同，就是左方单元格的值+1</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs_dp</span><span class="params">(input_x, input_y)</span>:</span></span><br><span class="line">    <span class="comment"># 建立一个dp二维数组</span></span><br><span class="line">    <span class="comment"># input_y as column, input_x as row</span></span><br><span class="line">    dp = [([<span class="number">0</span>] * (len(input_y) + <span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input_x) + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(input_x) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(input_y) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> j == <span class="number">0</span>:  <span class="comment"># 在边界上，自行+1</span></span><br><span class="line">                dp[i][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> input_x[i - <span class="number">1</span>] == input_y[j - <span class="number">1</span>]:  <span class="comment"># 不在边界上，相等就加一</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不相等</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_str</span><span class="params">(randomlength)</span>:</span></span><br><span class="line">    str = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(randomlength):</span><br><span class="line">        str += random.choice(list(string.ascii_letters))</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    str1 = random_str(<span class="number">10000</span>)</span><br><span class="line">    str2 = random_str(<span class="number">10000</span>)</span><br><span class="line">    print(<span class="string">"字符串1:"</span>, str1)</span><br><span class="line">    print(<span class="string">"字符串2:"</span>, str2)</span><br><span class="line">    print(<span class="string">"最长子序列的长度："</span>, lcs_dp(str1, str2))</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>动态规划可以解决的常见实际问题：</p><ul><li>生物学家根据最长公共子序列来确定DNA链的相似性，进而判断两种动物或疾病有多相似。</li><li>代码查重/论文查重也是查找最长公共子序列的问题。</li><li>计算编辑距离的问题，拼写检查、判断盗版都是用动态规划解决的。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《图解算法》学习笔记8</title>
      <link href="/2018/06/10/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/"/>
      <url>/2018/06/10/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第八章的学习笔记</p><a id="more"></a><h1 id="第八章-贪婪算法"><a href="#第八章-贪婪算法" class="headerlink" title="第八章 贪婪算法"></a>第八章 贪婪算法</h1><h2 id="教室调度问题"><a href="#教室调度问题" class="headerlink" title="教室调度问题"></a>教室调度问题</h2><p>假设有一张课表，你希望将尽可能多的课程安排在某间教室上。但是又本可能所有课都在这一间教室上，因为有些课的上课时间有冲突。</p><table><thead><tr><th style="text-align:center">美术</th><th style="text-align:center">9：00AM</th><th style="text-align:center">10:00AM</th></tr></thead><tbody><tr><td style="text-align:center">英语</td><td style="text-align:center">9：30AM</td><td style="text-align:center">10：30AM</td></tr><tr><td style="text-align:center">数学</td><td style="text-align:center">10：00AM</td><td style="text-align:center">11：00AM</td></tr><tr><td style="text-align:center">计算机</td><td style="text-align:center">10：30AM</td><td style="text-align:center">11：30AM</td></tr><tr><td style="text-align:center">音乐</td><td style="text-align:center">11：00AM</td><td style="text-align:center">12：00AM</td></tr></tbody></table><p>具体做法是：</p><p>1.选出结束最早的课，它就是要在这间教室上的第一堂课。</p><p>2.接下来，必须选择第一堂课结束后才开始的课。同样，你选择结束最早的课，这将是要在这间教室上的第二堂课。</p><p>重复这样做就能找到答案。</p><p>贪婪算法很简单：每一步都采取最优的做法。用专业术语说，每步都选择局部最优解，最终得到的就是全局最优解。</p><h2 id="集合覆盖问题"><a href="#集合覆盖问题" class="headerlink" title="集合覆盖问题"></a>集合覆盖问题</h2><p>假设需要让全美50个州都收到广播节目，不同的广播公司向不同的州广播，怎么选择最少的广播公司呢？</p><p>这就需要列举出所有可能的集合，在这个集合中选择覆盖全美50个州的最小集合。</p><p>这样的穷举需要耗费大量的时间，效率极低。为了解决这种问题，可以采用近似算法，使用贪婪算法可以得到非常接近的解，而时间可以大大缩短。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">states_needed = &#123;<span class="string">"mt"</span>, <span class="string">"wa"</span>, <span class="string">"or"</span>, <span class="string">"id"</span>, <span class="string">"nv"</span>, <span class="string">"ut"</span>, <span class="string">"ca"</span>, <span class="string">"az"</span>&#125;</span><br><span class="line">stations = &#123;<span class="string">"kone"</span>: &#123;<span class="string">"id"</span>, <span class="string">"nv"</span>, <span class="string">"ut"</span>&#125;,</span><br><span class="line">            <span class="string">"ktwo"</span>: &#123;<span class="string">"wa"</span>, <span class="string">"id"</span>, <span class="string">"mt"</span>&#125;,</span><br><span class="line">            <span class="string">"kthree"</span>: &#123;<span class="string">"or"</span>, <span class="string">"nv"</span>, <span class="string">"ca"</span>&#125;,</span><br><span class="line">            <span class="string">"kfour"</span>: &#123;<span class="string">"nv"</span>, <span class="string">"ut"</span>&#125;,</span><br><span class="line">            <span class="string">"kfive"</span>: &#123;<span class="string">"ca"</span>, <span class="string">"az"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">final_stations = set()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> states_needed:</span><br><span class="line">    best_station = <span class="keyword">None</span></span><br><span class="line">    states_covered = set()</span><br><span class="line">    <span class="keyword">for</span> station, states <span class="keyword">in</span> stations.items():</span><br><span class="line">        covered = states_needed &amp; states</span><br><span class="line">        <span class="keyword">if</span> len(covered) &gt; len(states_covered):</span><br><span class="line">            best_station = station</span><br><span class="line">            states_covered = covered</span><br><span class="line"></span><br><span class="line">    states_needed -= states_covered</span><br><span class="line">    final_stations.add(best_station)</span><br><span class="line"></span><br><span class="line">print(final_stations)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>旅行商问题和集合覆盖问题有一个共同之处：需要计算所有的解，并从中选出最小/最短的那个。这两个问题都属于NP完全问题。</li><li>元素较少时算法的运算速度非常快，但是随着元素数量的增加，速度会变得非常慢。</li><li>涉及“所有组合”的问题通常是NP完全问题。</li><li>不能将问题分成小问题，必须考虑各种情况的可能情况。这可能是NP完全问题。</li><li>贪婪算法寻找局部最优解，企图用这种方式获得全局最优解，贪婪算法易于实现、运算速度快，是不错的近似算法。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《图解算法》学习笔记7</title>
      <link href="/2018/06/04/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/"/>
      <url>/2018/06/04/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第七章的学习笔记</p><a id="more"></a><h1 id="第七章-Dijkstra算法"><a href="#第七章-Dijkstra算法" class="headerlink" title="第七章 Dijkstra算法"></a>第七章 Dijkstra算法</h1><h2 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h2><p>Dijkstra算法解决的是：在加权图中，一个点（源点）到其余各个顶点的最短路径问题，也叫做“单源最短路径”。例如下图所示的一个加权图中，从1到6有很多条路径，每一段的长度都不同，用Dijkstra算法可以选择一条长度最短的路径。</p><p>注意该算法要求图中不存在负权边。</p><p><img src="https://i.loli.net/2018/06/04/5b155238034c6.png" alt="dijkstra.png"></p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p>若对于顶点 s 存在能直接到达的边（s,m），则把d[m]设为w（s, m）,同时把所有其他（s不能直接到达的）顶点的路径长度设为无穷大，即表示我们不知道任何通向这些顶点的路径。当算法结束时，<em>d[v]</em> 中存储的便是从 <em>s</em> 到 <em>v</em>的最短路径，或者如果路径不存在的话是无穷大。 </p><p>边的拓展是Dijkstra 算法的基础操作：如果存在一条从 <em>u</em> 到 <em>v</em> 的边，那么从 <em>s</em> 到 <em>v</em> 的最短路径可以通过将边（<em>u</em>, <em>v</em>）添加到尾部来拓展一条从 s 到 v 的路径。这条路径的长度是 d[u] + w(u, v)。如果这个值比目前已知的 <em>d[v]</em> 的值要小，我们可以用新值来替代当前 <em>d[v]</em> 中的值。拓展边的操作一直运行到所有的 d[v] 都代表从 s 到 v 的最短路径的长度值。此算法的组织令 <em>d[u]</em> 达到其最终值时，每条边（<em>u</em>, <em>v</em>）都只被拓展一次。</p><p>算法维护两个顶点集合 S 和 Q。集合 S 保留所有已知最小 d[v] 值的顶点 v ，而集合 Q 则保留其他所有顶点。集合S初始状态为空，而后每一步都有一个顶点从 Q 移动到 S。这个被选择的顶点是 Q 中拥有最小的 d[u] 值的顶点。当一个顶点 u 从 Q 中转移到了 S 中，算法对 u 的每条外接边 (u, v) 进行拓展。</p><h2 id="换钢琴的实例"><a href="#换钢琴的实例" class="headerlink" title="换钢琴的实例"></a>换钢琴的实例</h2><p>这是交换物品的一张图，乐谱是起点（已经有的东西），现在需要花最少的钱来还到钢琴。</p><p><img src="https://i.loli.net/2018/06/04/5b1555e8e8a42.png" alt="tu.png"></p><p><strong>第一步</strong>：从起点（乐谱）出发，找到最便宜的节点。</p><p>这里只有两个节点，一个是唱片（权值为5），一个是海报（权值为0），所以选择海报这个节点。</p><p><strong>第二步</strong>：计算前往该节点（海报）的各个邻居的开销。</p><p>用一个表来记录：</p><table><thead><tr><th style="text-align:center">父节点</th><th style="text-align:center">节点</th><th style="text-align:center">开销</th></tr></thead><tbody><tr><td style="text-align:center">乐谱</td><td style="text-align:center">唱片</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">乐谱</td><td style="text-align:center">海报</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">海报</td><td style="text-align:center">吉他</td><td style="text-align:center">30</td></tr><tr><td style="text-align:center">海报</td><td style="text-align:center">架子鼓</td><td style="text-align:center">35</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">钢琴</td><td style="text-align:center">&infin;</td></tr></tbody></table><p><strong>第三步</strong>：再次执行第一步。下一个最便宜的节点为唱片。</p><p><strong>第四部</strong>：再次执行第二步。计算前往该节点（唱片）的各个邻居的开销。</p><p>用一个表来记录：</p><table><thead><tr><th style="text-align:center">父节点</th><th style="text-align:center">节点</th><th style="text-align:center">开销</th></tr></thead><tbody><tr><td style="text-align:center">乐谱</td><td style="text-align:center">唱片</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">乐谱</td><td style="text-align:center">海报</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">吉他</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">架子鼓</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">钢琴</td><td style="text-align:center">&infin;</td></tr></tbody></table><p><strong>第五步</strong>：更新开销。</p><p>发现通过唱片到吉他和通过唱片到架子鼓的开销更小。所以将架子鼓和吉他的父节点更新为唱片。</p><p><strong>第六步</strong>：重复第一步。现在起点变成了唱片。下一个最便宜的节点是吉他。</p><p><strong>第七步</strong>：重复第二步。计算前往该节点（吉他）的各个邻居的开销。</p><table><thead><tr><th style="text-align:center">父节点</th><th style="text-align:center">节点</th><th style="text-align:center">开销</th></tr></thead><tbody><tr><td style="text-align:center">乐谱</td><td style="text-align:center">唱片</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">乐谱</td><td style="text-align:center">海报</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">吉他</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">架子鼓</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">吉他</td><td style="text-align:center">钢琴</td><td style="text-align:center">40</td></tr></tbody></table><p><strong>第八步</strong>：重复第一步。起点是唱片，除了吉他，下一个最便宜的节点是架子鼓。</p><p><strong>第九步</strong>：重复第二步。计算前往该节点（架子鼓）的各个邻居的开销。</p><table><thead><tr><th style="text-align:center">父节点</th><th style="text-align:center">节点</th><th style="text-align:center">开销</th></tr></thead><tbody><tr><td style="text-align:center">乐谱</td><td style="text-align:center">唱片</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">乐谱</td><td style="text-align:center">海报</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">吉他</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">架子鼓</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">架子鼓</td><td style="text-align:center">钢琴</td><td style="text-align:center">35</td></tr></tbody></table><p><strong>第十步</strong>：更新开销。</p><p>通过架子鼓到钢琴更便宜，所以钢琴的父节点更新为架子鼓。</p><p>至此，就找到了从乐谱到各个节点的最便宜的方案，例如要还到钢琴，就需要35元。怎么确定路径呢？根据父节点向前推导就可以知道这条路径了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>题目如下图为例：</p><p><img src="https://i.loli.net/2018/06/05/5b160090bfb05.png" alt="未命名文件.png"></p><h3 id="定义散列表"><a href="#定义散列表" class="headerlink" title="定义散列表"></a>定义散列表</h3><p>一共需要三个散列表，一个是定义图，节点之间权值的散列表，一个是costs，一个是parents，也就是前文例子中的表格后两列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先定义一个散列表，起点分别是start，a，b，fin</span></span><br><span class="line">graph = &#123;<span class="string">"start"</span>: &#123;&#125;, <span class="string">"a"</span>: &#123;&#125;, <span class="string">"b"</span>: &#123;&#125;, <span class="string">"fin"</span>: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">graph[<span class="string">"start"</span>][<span class="string">"a"</span>] = <span class="number">4</span></span><br><span class="line">graph[<span class="string">"start"</span>][<span class="string">"b"</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">graph[<span class="string">"a"</span>][<span class="string">"fin"</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">graph[<span class="string">"b"</span>][<span class="string">"a"</span>] = <span class="number">3</span></span><br><span class="line">graph[<span class="string">"b"</span>][<span class="string">"fin"</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">infinity = float(<span class="string">"inf"</span>)</span><br><span class="line"><span class="comment"># 定义开销的散列表</span></span><br><span class="line">costs = &#123;&#125;</span><br><span class="line">costs[<span class="string">"a"</span>] = <span class="number">6</span></span><br><span class="line">costs[<span class="string">"b"</span>] = <span class="number">2</span></span><br><span class="line">costs[<span class="string">"fin"</span>] = infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义父节点的散列表</span></span><br><span class="line">parents = &#123;&#125;</span><br><span class="line">parents[<span class="string">"a"</span>] = <span class="string">"start"</span></span><br><span class="line">parents[<span class="string">"b"</span>] = <span class="string">"start"</span></span><br><span class="line">parents[<span class="string">"fin"</span>] = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="最小costs函数"><a href="#最小costs函数" class="headerlink" title="最小costs函数"></a>最小costs函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs)</span>:</span></span><br><span class="line">    lowest_cost = float(<span class="string">"inf"</span>)</span><br><span class="line">    lowest_cost_node = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> costs:</span><br><span class="line">        cost = costs[node]</span><br><span class="line">        <span class="keyword">if</span> cost &lt; lowest_cost <span class="keyword">and</span> node <span class="keyword">not</span> <span class="keyword">in</span> processed:</span><br><span class="line">            lowest_cost = cost</span><br><span class="line">            lowest_cost_node = node</span><br><span class="line">    <span class="keyword">return</span> lowest_cost_node</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">node = find_lowest_cost_node(costs)</span><br><span class="line"><span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">    cost = costs[node]</span><br><span class="line">    neighbors = graph[node]</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> neighbors.keys():</span><br><span class="line">        new_cost = cost + neighbors[n]</span><br><span class="line">        <span class="keyword">if</span> costs[n] &gt; new_cost:</span><br><span class="line">            costs[n] = new_cost</span><br><span class="line">            parents[n] = node</span><br><span class="line">    processed.append(node)</span><br><span class="line">    node = find_lowest_cost_node(costs)</span><br><span class="line">    print(node)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记6</title>
      <link href="/2018/06/02/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
      <url>/2018/06/02/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第六章的学习笔记</p><a id="more"></a><h1 id="第六章-广度优先搜索"><a href="#第六章-广度优先搜索" class="headerlink" title="第六章 广度优先搜索"></a>第六章 广度优先搜索</h1><h2 id="BFS的核心思想：层层递进"><a href="#BFS的核心思想：层层递进" class="headerlink" title="BFS的核心思想：层层递进"></a>BFS的核心思想：层层递进</h2><p>首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。 </p><p>BFS搜索是一种用于图的查找，可以帮助回答两类问题：</p><ul><li>从节点A出发，有前往节点B的路径吗？</li><li>从节点A出发，前往节点B的哪条路径最短？</li></ul><h2 id="芒果经销商的例子"><a href="#芒果经销商的例子" class="headerlink" title="芒果经销商的例子"></a>芒果经销商的例子</h2><ul><li>假设你经营着一个芒果农场，需要寻找芒果经销商，为此，你在朋友列表中查找</li><li>这种查找很简单，创建一个朋友名单，并依次遍历每一个朋友看她是不是芒果经销商</li><li>假设没有，这时就要在朋友的朋友中查找</li><li>这时对于每一个朋友，再将他们的朋友加入到列表中</li><li>再次遍历列表，看朋友的朋友是不是芒果经销商</li><li>如果依然没有，就把第三层关系人物加入到列表，在重复遍历查找的操作。</li></ul><p>广度优先搜索就是先查找一度关系，再查找二度关系、再查找三度关系，以此类推。在广度优先搜索的执行过程中，搜索范围从起点开始逐渐向外延伸，一层一层的向外查找。</p><p>注意，必须按照添加顺序查找时，才能实现这样的目的。如果不按照层次顺序查找，就无法找到最短路径。想要按照添加顺序进行检查，就需要使用一种数据结构，那就是队列（queue）。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种<strong>先进先出</strong>（First In First Out,FIFO）的数据结构，而栈是一种<strong>后进先出</strong>（Last In First Out,LIFO）的数据结构。</p><p>队列的工作原理与生活中的队列完全相同，不能随机访问队列中的元素，队列只支持两种操作：<strong>入队和出队</strong>。</p><h2 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h2><p><img src="https://i.loli.net/2018/06/04/5b14f09577b22.png" alt="bfs算法.png"></p><p>首先，创建一个队列。在python中，可以用deque来创建一个双端队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用散列表来生成图</span></span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[<span class="string">'you'</span>] = [<span class="string">'alice'</span>, <span class="string">'bob'</span>, <span class="string">'claire'</span>]</span><br><span class="line">graph[<span class="string">'bob'</span>] = [<span class="string">'anuj'</span>, <span class="string">'peggy'</span>]</span><br><span class="line">graph[<span class="string">'alice'</span>] = [<span class="string">'peggy'</span>]</span><br><span class="line">graph[<span class="string">'claire'</span>] = [<span class="string">'thom'</span>, <span class="string">'jonny'</span>]</span><br><span class="line">graph[<span class="string">'anuj'</span>] = []</span><br><span class="line">graph[<span class="string">'peggy'</span>] = []</span><br><span class="line">graph[<span class="string">'thom'</span>] = []</span><br><span class="line">graph[<span class="string">'jonny'</span>] = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_is_seller</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 自定义以m结尾的名字就是芒果经销商</span></span><br><span class="line">    <span class="keyword">return</span> name[<span class="number">-1</span>] == <span class="string">'m'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(name)</span>:</span></span><br><span class="line">    search_queue = deque()</span><br><span class="line">    search_queue += graph[name]</span><br><span class="line">    searched = []</span><br><span class="line">    <span class="keyword">while</span> search_queue:</span><br><span class="line">        person = search_queue.popleft()  <span class="comment"># 取出第一个人</span></span><br><span class="line">        <span class="keyword">if</span> person <span class="keyword">not</span> <span class="keyword">in</span> searched:</span><br><span class="line">            <span class="keyword">if</span> person_is_seller(person):</span><br><span class="line">                print(person + <span class="string">" is a mango seller!"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                search_queue += graph[person]</span><br><span class="line">                searched.append(person)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    search(<span class="string">'you'</span>)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>广度优先搜索指出是否有从A到B的路径。</li><li>如果有，广度优先搜索将找出最短路径。</li><li>有向图中的边为箭头，箭头方向指定了关系的方向。</li><li>无向图中的边不带箭头，其中的关系是双向的。</li><li>队列是先进先出（FIFO）的。</li><li>栈是后进先出（LIFO）的。</li><li>广度优先搜索需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必须是队列。</li><li>对于检查过的人，务必不要再检查，否则会导致无限循环。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记5</title>
      <link href="/2018/05/31/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
      <url>/2018/05/31/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第五章的学习笔记</p><a id="more"></a><h1 id="第五章-散列表"><a href="#第五章-散列表" class="headerlink" title="第五章 散列表"></a>第五章 散列表</h1><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>散列表（Hash table），也叫哈希表，是根据键（key）而直接访问在内存存储位置的<em>数据结构</em>，也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做<strong>散列表</strong>。</p><p>一个通俗的例子是，为了查找电话簿中某人的号码，可以创建一个按照人名首字母顺序排列的表（即建立人名 X 到首字母  F(X) 的一个函数关系，在首字母为W的表中查找“王”姓的电话号码，显然比直接查找就要快得多。这里使用人名作为关键字，“取首字母”是这个例子中散列函数的函数法则 F( )，存放首字母的表对应散列表。关键字和函数法则理论上可以任意确定。</p><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><p>散列函数（英文：Hash function）又称哈希函数。</p><ul><li>散列函数总是将同样的输入映射到相同的索引。</li><li>散列函数只带数组有多大，只返回有效的索引。</li><li>Python提供的散列表实现为字典，可以使用函数 dict 来创建散列表。</li></ul><h2 id="哈希查找"><a href="#哈希查找" class="headerlink" title="哈希查找"></a>哈希查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        self.elem = [<span class="keyword">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(size)]  <span class="comment"># 使用list数据结构作为哈希表元素保存方法</span></span><br><span class="line">        self.count = size  <span class="comment"># 最大表长</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key % self.count  <span class="comment"># 散列函数采用除留余数法</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_hash</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""插入关键字到哈希表内"""</span></span><br><span class="line">        address = self.hash(key)  <span class="comment"># 求散列地址</span></span><br><span class="line">        <span class="keyword">while</span> self.elem[address]:  <span class="comment"># 当前位置已经有数据了，发生冲突。</span></span><br><span class="line">            address = (address+<span class="number">1</span>) % self.count  <span class="comment"># 线性探测下一地址是否可用</span></span><br><span class="line">        self.elem[address] = key  <span class="comment"># 没有冲突则直接保存。</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_hash</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""查找关键字，返回布尔值"""</span></span><br><span class="line">        star = address = self.hash(key)</span><br><span class="line">        <span class="keyword">while</span> self.elem[address] != key:</span><br><span class="line">            address = (address + <span class="number">1</span>) % self.count</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.elem[address] <span class="keyword">or</span> address == star:  <span class="comment"># 说明没找到或者循环到了开始的位置</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list_a = [<span class="number">12</span>, <span class="number">67</span>, <span class="number">56</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">34</span>]</span><br><span class="line">    hash_table = HashTable(<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_a:</span><br><span class="line">        hash_table.insert_hash(i)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> hash_table.elem:</span><br><span class="line">        <span class="keyword">if</span> i:</span><br><span class="line">            print((i, hash_table.elem.index(i)), end=<span class="string">" "</span>)</span><br><span class="line">    print(<span class="string">"n"</span>)</span><br><span class="line"> </span><br><span class="line">    print(hash_table.search_hash(<span class="number">15</span>))</span><br><span class="line">    print(hash_table.search_hash(<span class="number">33</span>))</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>散链表常用于查找、防止重复。缓存。</li><li>散链表适用于映射关系、防止重复、缓存/记住数据。</li><li>冲突很糟糕，应该使用可以最大限度减小冲突的散列函数。</li><li>散列表的查找、插入、删除操作速度都非常快。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记4</title>
      <link href="/2018/05/30/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
      <url>/2018/05/30/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第四章的学习笔记</p><a id="more"></a><h1 id="第四章-快速排序"><a href="#第四章-快速排序" class="headerlink" title="第四章 快速排序"></a>第四章 快速排序</h1><h2 id="分治法——分而治之"><a href="#分治法——分而治之" class="headerlink" title="分治法——分而治之"></a>分治法——分而治之</h2><p><strong>总述</strong></p><p>分而治之（divide and conquer,D&amp;C）是一种著名的递归式问题解决方法。分治法提供了一种解决问题的思路，是另一种可供你使用的工具。分治法的核心思想就是用一种对解决某个问题通用而且尽可能简单的方法，不断缩小问题的规模，知道求解出问题为止。</p><p><strong>步骤</strong></p><ol><li>找出基线条件，这种条件必须尽可能简单</li><li>不断将问题分解（缩小规模），直到符合基线条件。</li></ol><h3 id="分治法：划分方块问题"><a href="#分治法：划分方块问题" class="headerlink" title="分治法：划分方块问题"></a>分治法：划分方块问题</h3><p><strong>题目要求</strong></p><p>现在有一个矩形，边长为1680 * 640，需要将这个矩形均匀地分成方块，且分出的方块要尽可能大。</p><p><strong>思路</strong></p><ol><li>找基线条件：当一条边长是另一条边长的整数倍时，就可以尽可能大的划分成方块。</li><li>分解问题：</li></ol><ul><li>首先找到这个矩形能容纳的最大方块：因为宽度是640，所以可以划分的最大方块的边长为640*640，一共可以划分出两个这样的方块。</li><li>剩下的矩形边长为640*400。</li><li>再对剩下的矩形进行相同的操作，找出这个矩形能容纳的最大方块：400*400。</li><li>剩下的矩形变成了400*240。</li><li>再对这个矩形进行同样的操作，找出最大能容纳的方块：240*240。</li><li>剩下的矩形变成了240*120。这时这个矩形可以划分成两个小方形（满足基线条件：一条边长是另一条边长的整数倍）结束。</li></ul><p>最后，对于最初的那个矩形，适用的最大方块为80*80。</p><p>这里用到了一个原理：适用于这小块地的最大方块，也是适用于整块地的最大方块。这个原理来源于欧几里得算法。</p><h3 id="分治法：求数组元素之和"><a href="#分治法：求数组元素之和" class="headerlink" title="分治法：求数组元素之和"></a>分治法：求数组元素之和</h3><p><strong>题目要求</strong></p><p>给出一个数组，数组中有一串数组，现在需要求这数组中数字元素之和。</p><p>最简单的方法就是直接循环求和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(arr)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">        total += x</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><p>但是怎么用递归函数来实现呢？这就需要不断的把问题规模缩小。</p><p>例如给出一个数组：[2,4,6],求和：</p><p><strong>第一步</strong>：找出基线条件：<br>$$<br>\begin{cases}空集不包含任何元素 ,&amp; \text{总和为0} \\ 只包含一个元素, &amp; \text {总和为该元素本身}<br>\end{cases}<br>$$<br><strong>第二步</strong>：缩小规模：</p><p><img src="https://i.loli.net/2018/05/30/5b0e8efacecfd.png" alt="未命名文件.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dc_sum</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arr == []:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>] + dc_sum(arr[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h3 id="分治法：快速排序"><a href="#分治法：快速排序" class="headerlink" title="分治法：快速排序"></a>分治法：快速排序</h3><p>快速排序的思想是：先选择一个元素值做为基准值，然后将数组中所有小于基准数的数放在这个数的左边，大于这个数的元素都放在右边。再在这两个子数组中做这种操作，各选择一个基准数，然后小的放一边，大的放一边……直到子数组为空或者只有一个元素（这两种情况下的子数组一定是有序的）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = arr[<span class="number">0</span>] <span class="comment">#这里直接把第一个元素当做基准值</span></span><br><span class="line">        less = [i <span class="keyword">for</span> i <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;= pivot]</span><br><span class="line">        more = [i <span class="keyword">for</span> i <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; pivot]</span><br><span class="line">        <span class="keyword">return</span> quick_sort(less) + [pivot] + quick_sort(more)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>分治法将问题逐步分解，划分成n个子问题。使用分治法处理列表时，基线条件很可能是空数组或者只包含一个元素。</li><li>实现快速排序时，基准值可以随机选择。</li><li>快速排序的平均运行时间为O(n logn)。</li><li>虽然快速排序和归并排序的时间效率都是O(n logn)，但是快速排序往往比归并排序要快很多。这是因为大O表示法中的常量事关重大。</li><li>快速查找比简单查找和二分查找的效率高很多。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法分析实验四</title>
      <link href="/2018/05/27/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E5%9B%9B/"/>
      <url>/2018/05/27/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E5%9B%9B/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/21/5b02124a8dd5f.jpg" width="600" height="300" alt="git" align="center"></p><p>SWUST OJ 算法分析A（卓越软件1601）实验四</p><a id="more"></a><h1 id="作业调度方案"><a href="#作业调度方案" class="headerlink" title="作业调度方案"></a>作业调度方案</h1><p>我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。</p><p> 每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。</p><p> 例如，当n=3，m=2时，“1-1，1-2，2-1，3-1，3-2，2-2”就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。</p><p> 一方面，每个操作的安排都要满足以下的两个约束条件。</p><p> (1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；</p><p> (2) 同一时刻每一台机器至多只能加工一个工件。</p><p>另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。 </p><p>由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为“1 1 2 3 3 2”。</p><p>还要注意，“安排顺序”只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。 </p><p>例如，取n=3,m=2，已知数据如下：  </p><p>工件号 机器号/加工时间</p><p>工序 11 工序 22</p><p>11 , 1/31/3 , 2/22/2</p><p>22 , 1/21/2 , 2/52/5</p><p>33 , 2/22/2 , 1/41/4</p><p>则对于安排顺序“1 1 2 3 3 2”，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 </p><p><img src="https://i.loli.net/2018/06/10/5b1cbe8662e84.jpg" alt="2010102423271740.jpg">　 </p><p>当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。 </p><p>显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第1行为两个正整数m和n（其中m（&lt;20）表示机器数，n（&lt;20）表示工件数），用一个空格隔开：第2行：个用空格隔开的数，为给定的安排顺序。接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。<br><br>其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。后n行依次表示每个工件的每个工序的加工时间。</p><p><strong>输出</strong></p><p id="div-border-left-blue">只有一个正整数，为最少的加工时间。</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">2 3<br><br>1 1 2 3 3 2<br><br>1 2<br><br>1 2<br><br>2 1<br><br>3 2<br><br>2 5<br><br>2 4</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">10</p><h2 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h2><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j,k,l,m,n,num[<span class="number">25</span>][<span class="number">25</span>],a[<span class="number">500</span>],t[<span class="number">25</span>][<span class="number">25</span>],sum[<span class="number">25</span>],f[<span class="number">25</span>][<span class="number">1000</span>],mx[<span class="number">25</span>],ans,mt[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m*n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; i++) <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; i++) <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m*n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        sum[a[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (j=mt[a[i]]; j&lt;=<span class="number">1000</span>; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pd=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (k=j; k&lt;=j+t[a[i]][sum[a[i]]]<span class="number">-1</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[num[a[i]][sum[a[i]]]][k]==<span class="number">1</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    pd=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pd==<span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j+t[a[i]][sum[a[i]]]&gt;mx[num[a[i]][sum[a[i]]]]) mx[num[a[i]][sum[a[i]]]]=j+t[a[i]][sum[a[i]]];</span><br><span class="line">                <span class="keyword">if</span> (j+t[a[i]][sum[a[i]]]&gt;mt[a[i]]) mt[a[i]]=j+t[a[i]][sum[a[i]]];</span><br><span class="line">                <span class="keyword">for</span> (k=j; k&lt;=j+t[a[i]][sum[a[i]]]<span class="number">-1</span>; k++) f[num[a[i]][sum[a[i]]]][k]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; i++) ans=max(mx[i],ans);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Maximum-Tape-Utilization-Ratio"><a href="#Maximum-Tape-Utilization-Ratio" class="headerlink" title="Maximum Tape Utilization Ratio"></a>Maximum Tape Utilization Ratio</h1><p>设有n 个程序{1,2,…, n }要存放在长度为L的磁带上。程序i存放在磁带上的长度是li ，1 &lt; = i &lt; = n。 程序存储问题要求确定这n 个程序在磁带上的一个存储方案，使得能够在磁带上存储尽可能多的程序。在保证存储最多程序的前提下还要求磁带的利用率达到最大。 对于给定的n个程序存放在磁带上的长度，编程计算磁带上最多可以存储的程序数和占用磁带的长度。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第一行是2 个正整数，分别表示文件个数n &lt;=600和磁带的长度L&lt;=6000。接下来的1 行中，有n个正整数，表示程序存放在磁带上的长度。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">第1 行输出最多可以存储的程序数和占用磁带的长度；第2行输出存放在磁带上的每个程序的长度。 </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">9 50<br>2 3 13 8 80 20 21 22 23</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">5 49<br>2 3 13 8 23</p><h2 id="题目解读-1"><a href="#题目解读-1" class="headerlink" title="题目解读"></a>题目解读</h2><p>动态规划，优先考虑尽可能多的程序个数，如果程序个数相同再考虑程序占据的长度。</p><p>dp[i][j][0]：代表前i个程序，占据j长度，存储程序<em>个数</em>最大值</p><p>dp[i][j][1]：代表前i个程序，占据j长度，存储程序<em>长度</em>最大值</p><p>注意输入时倒序输，因为最后要回溯判断选了哪些并按顺序输出。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">605</span>][<span class="number">6005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//dp[i][j][k]</span></span><br><span class="line"><span class="comment">//k=0，前i个程序，占据j长度，存储程序个数最大值</span></span><br><span class="line"><span class="comment">//k=1，前i个程序，占据j长度，存储程序长度最大值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,L,i,j,k;</span><br><span class="line">    <span class="keyword">int</span> w[<span class="number">605</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;L;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;w[n+<span class="number">1</span>-i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=L;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(w[i]&lt;=j &amp;&amp; dp[i<span class="number">-1</span>][j][<span class="number">0</span>] &lt; dp[i<span class="number">-1</span>][j-w[i]][<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>]=dp[i<span class="number">-1</span>][j-w[i]][<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=dp[i<span class="number">-1</span>][j-w[i]][<span class="number">1</span>]+w[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(w[i]&lt;=j &amp;&amp; dp[i<span class="number">-1</span>][j][<span class="number">0</span>] == dp[i<span class="number">-1</span>][j-w[i]][<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>]=dp[i<span class="number">-1</span>][j][<span class="number">0</span>];</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=max(dp[i<span class="number">-1</span>][j][<span class="number">1</span>],dp[i<span class="number">-1</span>][j-w[i]][<span class="number">1</span>]+w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>]=dp[i<span class="number">-1</span>][j][<span class="number">0</span>];</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=dp[i<span class="number">-1</span>][j][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n][L][<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;dp[n][L][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    i=n,j=dp[n][L][<span class="number">1</span>],k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][j][<span class="number">0</span>] == dp[i<span class="number">-1</span>][j-w[i]][<span class="number">0</span>]+<span class="number">1</span> &amp;&amp; dp[i][j][<span class="number">1</span>] == dp[i<span class="number">-1</span>][j-w[i]][<span class="number">1</span>]+w[i])</span><br><span class="line">        &#123;</span><br><span class="line">            j-=w[i];</span><br><span class="line">            <span class="keyword">if</span>(k++) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Soldiers"><a href="#Soldiers" class="headerlink" title="Soldiers"></a>Soldiers</h1><p>在一个划分成网格的操场上，n个士兵散乱地站在网格点上。网格点由整数坐标(x,y)表示。士兵们可以沿网格边上、下、左、右移动一步，但在同一时刻任一网格点上只能有一名士兵。按照军官的命令，士兵们要整齐地列成一个水平队列，即排列成(x,y),(x+1,y),…,(x+n-1,y)。如何选择x 和y的值才能使士兵们以最少的总移动步数排成一列。计算使所有士兵排成一行需要的最少移动步数。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第1 行是士兵数n，1&lt; =n&lt; =10000。接下来n 行是士兵的位置，每行2个整数x和y，-10000&lt; =x，y&lt; =10000。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">第1 行中的数是士兵排成一行需要的最少移动步数。 </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">5<br>1 2<br>2 2<br>1 3<br>3 -2<br>3 3</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">8</p><h2 id="题目解读-2"><a href="#题目解读-2" class="headerlink" title="题目解读"></a>题目解读</h2><p>因为是排成一排，所以y方向必须选择一个中间值，对y左边排序取中位数。如果n是奇数，则就是中位数，如果n是偶数，就是中间两个数中的任意一个。</p><p>下面考虑x方向，需要注意的是，排好队后x坐标必须是连续的。所以说先对x排序，然后 x[i]-i 就是x每个x需要移动的最小距离，再对这个新的数组求中位数就是最佳位置。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x[<span class="number">10005</span>],y[<span class="number">10005</span>],midx,midy,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">    sort(y,y+n);</span><br><span class="line">    midy=y[n/<span class="number">2</span>];</span><br><span class="line">    sort(x,x+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        x[i]-=i;</span><br><span class="line">    sort(x,x+n);</span><br><span class="line">    midx=x[n/<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        ans+=<span class="built_in">abs</span>(midx-x[i])+<span class="built_in">abs</span>(midy-y[i]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Edit-Distance"><a href="#Edit-Distance" class="headerlink" title="Edit Distance"></a>Edit Distance</h1><p>设A 和B 是2 个字符串。要用最少的字符操作将字符串A 转换为字符串B。这里所说的字符操作包括 (1)删除一个字符； (2)插入一个字符； (3)将一个字符改为另一个字符。 将字符串A变换为字符串B 所用的最少字符操作数称为字符串A到B 的编辑距离，记为d(A,B)。试设计一个有效算法，对任给的2 个字符串A和B，计算出它们的编辑距离d(A,B)。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第一行是字符串A，文件的第二行是字符串B。字符串长度不大于2000。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">输出距离d(A,B) </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">fxpimu<br>xwr</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">5</p><h2 id="题目解读-3"><a href="#题目解读-3" class="headerlink" title="题目解读"></a>题目解读</h2><p>此题常见的思路是动态规划，令dp[i][j] 表示原字符串S[0…i] 和目标串T[0…j] 的最短编辑距离，其边界：</p><p>dp[i][0] = i, dp[0][j] = j ,我们可以得到状态转移方程：<br>$$<br>dp[i][j]=min \begin{cases} dp[i-1][j]+1,&amp;\text{S[i]不在T[0…j]中}<br>\\ dp[i][j-1]+1，&amp;\text{S[i]在T[0…j-1]中}<br>\\ dp[i-1][j-1] + 0or1，&amp;\text{S[i]在T[j]中}\end{cases}<br>$$<br>下面解释这3个式子：</p><ul><li>S[i] 不在 T[0…j]中，说明目标串里面没有源字符串的这个字符，即在某一次操作中这个字符被删除了。因为删除操作没有前后相关性，不妨将其在第一次操作中删除，进行了一次删除操作后，后续编辑操作是将长度为i-1的字符串编辑为长度为 j 的字符串，即dp[i-1][j]。</li><li>S[i] 在 T[0…j-1]中说明，S[i] 出现在 T[0…j-1]中的某个位置，不妨认为是k，因为最小编辑步数的定义，那么，在k+1到j-1的字符，必然是通过插入新字符完成的。因为共插入了(j-k)个字符，故编辑次数为(j-k)次。而字符串S[1…i]经过编辑，得到了T[1…k]，编辑次数为dp[i][k]。故： dp[i][j] = dp[i][k] + (j-k)。<ul><li>由于最后的(j-k)次是插入操作，可以讲(j-k)逐次规约到dp[i][k]中。即：dp[i][k]+(j-k)=dp[i][k+1] + (j-k-1) 规约到插入操作为1次，得到 dp[i][k]+(j-k) =dp[i][k+1] + (j-k-1) =dp[i][k+2] + (j-k-2)=… =dp[i][k+(j-k-1)] + (j-k)-(j-k-1) =dp[i][j-1] + 1。</li></ul></li><li>关于dp[i-1][j-1] + 0/1,  s[i] 在T[j]的说明：s[i]经过编辑，最终落在T[j]的位置。<ul><li>则要么s[i] == t[j]，s[i]直接落在T[j]。这种情况，编辑操作实际上是将长度为i-1的S’串，编辑成长度为j-1的T’串：即dp[i-1][j-1]；</li><li>要么s[i] ≠ t[j]，s[i] 落在T[j]后，要将s[i]修改成T[j]，即在上一种情况的基础上，增加一次修改操作：即dp[i-1][j-1] + 1。</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">2005</span>],b[<span class="number">2005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> len1,len2,i,j,cost;</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=len1;i++)    dp[i][<span class="number">0</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=len2;j++)    dp[<span class="number">0</span>][j]=j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=len2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i<span class="number">-1</span>]==b[j<span class="number">-1</span>])  cost=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span>    cost=<span class="number">1</span>;</span><br><span class="line">            dp[i][j]=min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+cost,min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[len1][len2]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Independent-Task-Scheduling"><a href="#Independent-Task-Scheduling" class="headerlink" title="Independent Task Scheduling"></a>Independent Task Scheduling</h1><p>用2 台处理机A 和B 处理n 个作业。设第i 个作业交给机器A 处理时需要时间i a ，若由机器B 来处理，则需要时间i b 。由于各作业的特点和机器的性能关系，很可能对于某些i，有ai &gt;=bi，而对于某些j,j≠i，有aj &lt; bj 。既不能将一个作业分开由2 台机器处理，也没有一台机器能同时处理2 个作业。设计一个动态规划算法，使得这2 台机器处理完这n个作业的时间最短(从任何一台机器开工到最后一台机器停工的总时间)。研究一个实例： (a1,a2,a3,a4,a5,a6)＝(2,5,7,10,5,2)；(b1,b2,b3,b4,b5,b6)＝(3,8,4,11,3,4)。 对于给定的2 台处理机A 和B处理n 个作业，找出一个最优调度方案，使2台机器处理完这n 个作业的时间最短。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第1行是1个正整数n&lt;=200, 表示要处理n个作业。 接下来的2行中，每行有n 个正整数，分别表示处理机A 和B 处理第i 个作业需要的处理时间。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">最短处理时间 </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">6<br>2 5 7 10 5 2<br>3 8 4 11 3 4</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">15</p><h2 id="题目解读-4"><a href="#题目解读-4" class="headerlink" title="题目解读"></a>题目解读</h2><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">205</span>],b[<span class="number">205</span>],t[<span class="number">2005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,k,ta=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        ta+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)    <span class="built_in">cin</span>&gt;&gt;b[j];</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=ta;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=a[k])  t[i]=min(t[i-a[k]],t[i]+b[k]);</span><br><span class="line">            <span class="keyword">else</span>    t[i]=t[i]+b[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=ta;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=min(ans,max(i,t[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Arbitrage"><a href="#Arbitrage" class="headerlink" title="Arbitrage"></a>Arbitrage</h1><p>套汇是指利用货币汇兑率的差异将一个单位的某种货币转换为大于一个单位的同种货币。例如，假定1 美元可以买0.7 英镑，1 英镑可以买9.5 法郎，且1 法郎可以买到0.16美元。通过货币兑换，一个商人可以从1 美元开始买入，得到0.7×9.5×0.16=1.064美元，从而获得6.4%的利润。 给定n 种货币c<sub>1</sub> ,c<sub>2</sub> ,… ,c<sub>n</sub>的有关兑换率，试设计一个有效算法，用以确定是否存在套汇的可能性。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">含多个测试数据项。每个测试数据项的第一行中只有1 个整数n (1&lt; =n&lt; =30)，表示货币总数。其后n行给出n种货币的名称。接下来的一行中 有1 个整数m，表示有m种不同的货币兑换率。其后m行给出m种不同的货币兑换率，每行有3 个数据项c<sub>i</sub> ， r<sub>ij</sub> 和c<sub>j</sub> ，表示货币c<sub>i</sub> 和c<sub>j</sub>的兑换率为 r<sub>ij</sub>。文件最后以数字0 结束。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">对每个测试数据项j，如果存在套汇的可能性则输出“Case j Yes”， 否则输出“Case j No”。 </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">3<br>USDollar<br>BritishPound<br>FrenchFranc<br>3<br>USDollar 0.5 BritishPound<br>BritishPound 10.0 FrenchFranc<br>FrenchFranc 0.21 USDollar<br><br>3<br>USDollar<br>BritishPound<br>FrenchFranc<br>6<br>USDollar 0.5 BritishPound<br>USDollar 4.9 FrenchFranc<br>BritishPound 10.0 FrenchFranc<br>BritishPound 1.99 USDollar<br>FrenchFranc 0.09 BritishPound<br>FrenchFranc 0.19 USDollar<br>0</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">Case 1 Yes<br>Case 2 No</p><h2 id="题目解读-5"><a href="#题目解读-5" class="headerlink" title="题目解读"></a>题目解读</h2><p>看到题目之后首先想到的就是转换成图的问题，每个货币单位对应一个节点，计算一个节点经过其他节点最后回到自己时的路径（算路径时不时传统的权值相加，而应该是相乘）是否大于1的问题。关键问题就在于怎么把输入的数据转换成图…</p><p>思路就是先读入所有的name，然后循环找输入进来的每一条汇率中的两个国名分别是name中的第几个，对应的rank[j][k]就是汇率值。找的方法就是循环，用strcmp做为终止条件（即str1==str2），记录下标就可以把对应的rank[j][k]置为对应的汇率值。</p><p>接下来就是一个Floyd算法的变形，标准的Floyd应该是加法，因为最短路径是求每一段路程的总和；而这里应该是乘法，因为算汇率是乘法。如果找到汇率大于1的情况，就说明可以套汇，否则不能套汇。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j,k,cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">float</span> x,rank[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">35</span>][<span class="number">35</span>],a[<span class="number">35</span>],b[<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt; n&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;name[i];</span><br><span class="line">        <span class="built_in">memset</span>(rank,<span class="number">0.0</span>,<span class="keyword">sizeof</span>(rank));</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;x&gt;&gt;b;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;<span class="built_in">strcmp</span>(a,name[j]);j++);</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>;<span class="built_in">strcmp</span>(b,name[k]);k++);</span><br><span class="line">            rank[j][k]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            rank[i][i]=max(<span class="keyword">float</span>(<span class="number">1.0</span>),rank[i][i]);</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                    rank[i][j]=max(rank[i][j],rank[i][k]*rank[k][j]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(rank[i][i]&gt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;cnt++&lt;&lt;<span class="string">" Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;cnt++&lt;&lt;<span class="string">" No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记3</title>
      <link href="/2018/05/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
      <url>/2018/05/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第三章的学习笔记</p><a id="more"></a><h1 id="第三章-递归"><a href="#第三章-递归" class="headerlink" title="第三章 递归"></a>第三章 递归</h1><h2 id="递归的核心思想"><a href="#递归的核心思想" class="headerlink" title="递归的核心思想"></a>递归的核心思想</h2><p>现在有一个盒子，盒子里还有盒子，要找到藏在某个盒子里的钥匙。</p><p>非递归思想（循环）：</p><p><img src="https://i.loli.net/2018/05/26/5b09121372218.png" alt="递归2.png"></p><p>递归思想：</p><p><img src="https://i.loli.net/2018/05/26/5b091150456a6.png" alt="递归1.png"></p><p>简单来说：递归的思想就是函数自己调用自己。</p><h2 id="基线条件和递归条件"><a href="#基线条件和递归条件" class="headerlink" title="基线条件和递归条件"></a>基线条件和递归条件</h2><p>编写函数时，必须告诉它何时停止递归。正因如此，每个递归函数都有两个部分：基线条件和递归条件。递归条件指的是函数调用自己，而基线条件则值的是函数不再调用自己，从而避免形成无限循环。</p><h2 id="递归求阶乘"><a href="#递归求阶乘" class="headerlink" title="递归求阶乘"></a>递归求阶乘</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * factorial(x<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记2</title>
      <link href="/2018/05/24/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2018/05/24/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第二章的学习笔记</p><a id="more"></a> <h1 id="第二章-选择排序"><a href="#第二章-选择排序" class="headerlink" title="第二章 选择排序"></a>第二章 选择排序</h1><blockquote><p>本章主要学习两种最基本的数据结构——数组和链表。</p><p>同时还要学习一种排序算法——选择排序。</p></blockquote><h2 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>对于数组来说，随机的读取元素时很高效，因为直接根据数组的下标就可以找到对应的元素。</p><p>但是数组的不便之处在于，需要提前申明数组的大小，如果需要存的数据量大于申明的数组大小，就无法存储多余的数据，如果用不完就会造成一定的内存浪费。</p><p>数组的另外一个不足之处就是，不便于进行插入、删除操作。如果要在数组的中间插入一个元素，要先将它后面的数据整体向后移动一个位置，才能插入新的元素，效率低下。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表无需申明长度，可以随意进行元素的添加，在链表中，每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一次。这种数据结构的优势就是，便于进行插入、删除操作，只需将上一个元素存储的下一个元素地址指向待插入的元素地址，再把待插入的元素存储下一个元素地址，就完成了插入操作，比数组方便很多。</p><p>但是反过来，链表就不便于进行随机地读取元素了，因为并不知道待查找的元素的位置，所以需要一个一个的查，直到找到为止。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">数组</th><th style="text-align:center">链表</th></tr></thead><tbody><tr><td style="text-align:center">读取</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">插入</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">删除</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr></tbody></table><p>O(n) = 线性时间</p><p>O(n) = 常量时间</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>数组和链表哪个用的更多呢？需要看具体情况。</p><p>有两种访问方式：随机访问和顺序访问。</p><p>顺序访问意味着从一个元素开始逐个地址读取元素，链表只能顺序访问。</p><p>随机访问意味着可以直接跳到第10个元素，数组可以随机访问。</p><p>因为在大部分情况下，我们需要随机访问，所以还是数组使用的更多。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>既然是排序算法，就是给出一串无序的数组，然后编程使他们按照从小到大或者从大到小的顺序排列。</p><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>选择排序的思想很简单：首先找到所有数里最小的元素，把它存放在新的数组中，然后再在剩下的（n-1）个元素中找到最小的元素，并存放在新数组里面，以此类推，每次都在剩下的数中挑选出最小的存成新的数组，直到选完为止。</p><h3 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSmallest</span><span class="params">(arr)</span>:</span></span><br><span class="line">    smallest = arr[<span class="number">0</span>]  <span class="comment">#存储最小的值</span></span><br><span class="line">    smallest_index = <span class="number">0</span> <span class="comment">#存储最小值的索引</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; smallest):</span><br><span class="line">            smallest = arr[i]</span><br><span class="line">            smallest_index = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> smallest_index</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    newArr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        smallest_index = findSmallest(arr)</span><br><span class="line">        newArr.append(arr.pop(smallest_index))</span><br><span class="line">        <span class="comment">#每次都找到最小的元素存入新数组，并在原来数组里删除掉</span></span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(selection_sort([<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">10</span>]))</span><br></pre></td></tr></table></figure><h3 id="C-C-代码"><a href="#C-C-代码" class="headerlink" title="C/C++代码"></a>C/C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,min;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[min])</span><br><span class="line">                min=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min!=i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=arr[min];</span><br><span class="line">            arr[min]=arr[i];</span><br><span class="line">            arr[i]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    selection_sort(arr,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>每比较一次，就需要遍历一遍数组，所以每一次比较的时间复杂度都是O(n)，需要比较n次，所以选择排序的时间复杂度是O(n<sup>2</sup>)。</p><p>遗留问题：</p><p>随着排序的进行，每次需要比较的元素数在减小，最后一次需要检查的元素都只有一个，为什么是n个O(n)呢？</p><p>因为平均每次检查的元素个数为n/2,因此运行时间为O(n * n/2)，但是大O表示法省略诸如1/2这样的常数，因此简写为O(n)。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记1</title>
      <link href="/2018/05/22/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2018/05/22/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"> </p><p>《算法图解》像小说一样有趣的算法入门书，作者推崇图解式写作风格，生动易读。就我个人而言，算法一直是弱项，这次想花一个月的时间，坚持打卡学习，争取能在算法能力上取得一定的提升。</p><p>本书采用python语言编写，由于大部分ACM程序设计大赛都是用C/C++或java，所以我不仅用python编写，还会尽量用C/C++写代码。</p><a id="more"></a><h1 id="第一章-算法简介"><a href="#第一章-算法简介" class="headerlink" title="第一章 算法简介"></a>第一章 算法简介</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h3><p><strong>二分查找</strong>，也叫折半查找，是一种在<strong>有序数组</strong>中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。 </p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>举个例子，给出一串有序数组：[10,20,30,40,50,60,70,80,90]</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th></tr></thead><tbody><tr><td style="text-align:center">数字</td><td style="text-align:center">10</td><td style="text-align:center">20</td><td style="text-align:center">30</td><td style="text-align:center">40</td><td style="text-align:center">50</td><td style="text-align:center">60</td><td style="text-align:center">70</td><td style="text-align:center">80</td><td style="text-align:center">90</td></tr></tbody></table><p>现在想要寻找80在哪个位置，蛮力法即是循环遍历数组中的每个元素，当遍历到的元素正好等于80时，就找到了，对于这个数组，需要查询8次。</p><p>而二分法的思想是，先看中间第5号元素是多少，结果是50，这样就把前面5个元素排除掉了，因为要找的90比50还大；现在只需要在5号到10号中间选，再挑选中间的7号元素查看，发现是70，还是比90小，那么前7个元素都被排除了；再在7到9之间选中间的8号元素查看，正好是80，就找到了，只查询了3次。</p><p>可以想象，随着元素的增多，二分法查找的效率会明显高于蛮力法，这就是二分法查找算法的优势。</p><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list,item)</span>:</span></span><br><span class="line">    <span class="comment">#用low和high代表需要查找的区间范围</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high):</span><br><span class="line">    <span class="comment">#只要范围没有缩小到只剩一个元素</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span> <span class="comment">#中间的元素</span></span><br><span class="line">        <span class="comment">#（"//"运算符代表取整除，返回商的整数部分，否则如果是小数，就无法在数组中查询了）</span></span><br><span class="line">        guess = list[mid] <span class="comment">#查看中间元素对应的值</span></span><br><span class="line">        <span class="keyword">if</span>(guess == item): <span class="comment">#找到了</span></span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span>(guess &gt; item): <span class="comment">#猜大了</span></span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="comment">#猜小了</span></span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span> <span class="comment">#没找到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">    print(binary_search(my_list, <span class="number">3</span>))</span><br><span class="line">    print(binary_search(my_list, <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>C/C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> item)</span> <span class="comment">//传入数组的长度和需要查找的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>,high = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]==item)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]&gt; item)high=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]&lt; item)low=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,binary_search(<span class="number">5</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,binary_search(<span class="number">5</span>,<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><blockquote><p>在计算机科学中，算法的时间复杂度是一个函数，它定性描述该算法的运行时间，这是一个代表算法输入值的字符串的长度的函数。时间复杂度通常用大<em>O</em>表示。</p></blockquote><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>下面做一个实验，分别比较同种操作系统下、同种规模的数据量（1到10<sup>5</sup>、10<sup>6</sup>、10<sup>7</sup>），二分法和蛮力查找最后一个元素时，所花费的时间。</p><p>python中计算运行时间的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t0 = time.clock()</span><br><span class="line">binary_search(list,item)</span><br><span class="line">print(<span class="string">"process time:"</span>, time.clock() - t0)</span><br></pre></td></tr></table></figure><p>python中蛮力法遍历查找的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rude_search</span><span class="params">(num_list,item)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index,element <span class="keyword">in</span> enumerate(num_list):</span><br><span class="line">        <span class="keyword">if</span>(element == item):</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">    print(rude_search(my_list, <span class="number">3</span>))</span><br><span class="line">    print(rude_search(my_list, <span class="number">-1</span>))</span><br></pre></td></tr></table></figure><p>下面是运行时间的比较,我们做出曲线图：</p><p><img src="https://i.loli.net/2018/05/22/5b03d16c437cc.png" alt="图片1.png"></p><p>这时我们就会发现一个问题，仅知道算法需要多长时间才能运行完毕还不够，还需要知道运行时间如何随列表增长而增加，这正是大<em>O</em>的用武之地。</p><h4 id="大O"><a href="#大O" class="headerlink" title="大O"></a>大<em>O</em></h4><p>大<em>O</em>指出了算法有多快。例如，假设列表有n个元素，蛮力法查找需要检查每个元素，因此需要（最多）执行n次操作。使用大<em>O</em>表示法，这个运行时间为O(n)，没有单位，因为大<em>O</em>表示法让你能够比较<span id="inline-blue">操作次数</span>，它指出了<strong>算法运行时间的增速</strong>。</p><h4 id="常见的大O运行时间"><a href="#常见的大O运行时间" class="headerlink" title="常见的大O运行时间"></a>常见的大<em>O</em>运行时间</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">算法举例</th></tr></thead><tbody><tr><td style="text-align:center">对数时间</td><td style="text-align:center">O(log n)</td><td style="text-align:center">二分查找</td></tr><tr><td style="text-align:center">线性时间</td><td style="text-align:center">O(n)</td><td style="text-align:center">遍历数组</td></tr><tr><td style="text-align:center">线性迭代对数时间</td><td style="text-align:center">O(n * log n)</td><td style="text-align:center">快速排序</td></tr><tr><td style="text-align:center">二次时间</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">选择排序</td></tr><tr><td style="text-align:center">阶乘时间</td><td style="text-align:center">O(n!)</td><td style="text-align:center">旅行商问题</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动态规划（上）</title>
      <link href="/2018/05/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2018/05/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/Brussels, Belgium.jpg" width="600" height="300" alt="git" align="center"> </p><p><strong>动态规划</strong>（英语：Dynamic programming，简称DP） 常常适用于有重叠子问题 和最优子性质的问题。</p><a id="more"></a><h1 id="动态规划（上）"><a href="#动态规划（上）" class="headerlink" title="动态规划（上）"></a>动态规划（上）</h1><p><strong>动态规划</strong>（英语：Dynamic programming，简称DP） 常常适用于有重叠子问题 和最优子性质的问题。</p><p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p><p>通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>斐波那契数列可以以递归的方式来定义：</p><ul><li>F<sub>0</sub> = 0</li><li>F<sub>1</sub> = 1</li><li>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub> （n&gt;=2)</li></ul><p>用文字来说，就是斐波那契数列由0和1开始，之后的数就是前面连个数之和：0,1,1,2,3,5,8,13……</p><p>求解斐波那契数列时，可以直接使用递归的定义方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span> || n==<span class="number">1</span>)<span class="keyword">return</span> n;</span><br><span class="line">  <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的定义方式便于理解，但是有一个问题：对于相似的子问题进行了大量重复的计算，例如在求fib(5)时，经历了这样的步骤：</p><ol><li>fib(5)</li><li>fib(4) + fib(3)</li><li>( fib(3) + fib(2) ) + ( fib(2) + fib(1) )</li><li>[ ( fib(2) + fib(1) ) + ( fib(1) + fib(0) ) ] + [ ( fib(1) + fib(0) ) + fib(1) ]</li><li>[ ( ( fib(1) + fib(0) ) + fib(1) ) + ( fib(1) + fib(0) ) ] + [ ( fib(1) + fib(0) ) + fib(1) ]</li></ol><p>由这个过程可以看出，这样递归的方法会重复计算多次fib(2)、fib(3)，因此效率很低，如果将前n个已经计算出来了的 fib(i) 存在一个数组中，这样在后面的计算中，就可以直接调用数组中存储的值，而避免了重复计算。这种思想就是动态规划的思想。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>)dp[n]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)dp[n]=<span class="number">1</span>;</span><br><span class="line">  dp[n]=dp[n<span class="number">-1</span>]+dp[n<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="收集硬币问题"><a href="#收集硬币问题" class="headerlink" title="收集硬币问题"></a>收集硬币问题</h2><p>有一串数字，现在需要取出一些数组，取数规则就是不能选两个相邻的数。现在需要计算在这种规则下，能取到的数字之和最大是多少。 例如以下这一串数字：</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">num</td><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">2</td></tr></tbody></table><p>现在定义一个数组dp[ ],dp[i]代表选择到第i个硬币时，能得到的最大金额数。</p><p>以dp[5]为例，此时有两种选择：</p><ul><li>选5号（那就不能选4号）：dp[3]+num[5]</li><li>不选5号（就可以选4号）：dp[4]</li></ul><p>这样就可以推导出状态方程：<br>$$<br>\begin{cases}<br>dp[i] = max( dp[i-2] + num[i] , dp[i-1] )<br>\dp[0] = num[0]<br>\dp[1] = max( num[0], num[1] )<br>\end{cases}<br>$$<br>这样就可以敲代码了，如果使用递归的方法，会产生很多重叠子问题，运算速度慢，效率为O(n^2^)。所以不使用递归方法，而是建立一个dp数组，然后循环填表，一次把dp[0],dp[1],dp[2]……的值计算出来，最后最优解即是dp[n-1]。</p><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a&gt;b)?a:b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10000</span>],dp[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>]=num[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>]=max(num[<span class="number">0</span>],num[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=max(dp[i<span class="number">-2</span>]+num[i],dp[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\r\n"</span>,dp[n<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>opencv-python人脸识别应用</title>
      <link href="/2018/05/08/opencv-python%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%BA%94%E7%94%A8/"/>
      <url>/2018/05/08/opencv-python%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/09/5af1cb1dc5cb1.jpg" width="600" height="300" alt="git" align="center"></p><p>利用OpenCV和python环境实现简单的人脸识别应用：识别人脸并框处人脸、检测并框处人的眼睛、检测笑脸、并框处笑脸。</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>系统环境：win7</li><li>python版本：python3.6.3</li><li>已存在vs2015（OpenCV需要C++环境）</li><li>OpenCV</li></ul><h1 id="关于OpenCV自带的分类器"><a href="#关于OpenCV自带的分类器" class="headerlink" title="关于OpenCV自带的分类器"></a>关于OpenCV自带的分类器</h1><p>OpenCV 是一个跨平台的计算机视觉库，它实现了图像处理和计算机视觉方面的很多通用算法，是一个非常强大的开源库。</p><p>OpenCV项目源码中有很多训练好的Haar分类器。</p><p><img src="https://i.loli.net/2018/05/08/5af1c949149c5.png" alt="分类器.png"></p><p>这些xml文件是已经训练好的数据，可以直接调用，进而达到识别分类的功能。本文不训练数据，直接使用这些OpenCV库中自带的方法进行人脸识别。</p><h1 id="找到图像中人脸的位置"><a href="#找到图像中人脸的位置" class="headerlink" title="找到图像中人脸的位置"></a>找到图像中人脸的位置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#detectFaces()返回图像中所有人脸的矩形坐标（矩形左上、右下顶点）</span></span><br><span class="line"><span class="comment">#使用haar特征的级联分类器haarcascade_frontalface_default.xml，在haarcascades目录下还有其他的训练好的xml文件可供选择。</span></span><br><span class="line"><span class="comment">#注：haarcascades目录下训练好的分类器必须以灰度图作为输入。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    face_cascade = cv2.CascadeClassifier(<span class="string">"D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_frontalface_default.xml"</span>)</span><br><span class="line">    <span class="comment">#分类器函数中的参数就是xml文件的具体位置</span></span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img <span class="comment">#if语句：如果img维度为3，说明不是灰度图，先转化为灰度图gray，如果不为3，也就是2，原图就是灰度图</span></span><br><span class="line"></span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, <span class="number">1.2</span>, <span class="number">5</span>)<span class="comment">#1.3和5是特征的最小、最大检测窗口，它改变检测结果也会改变</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x,y,width,height) <span class="keyword">in</span> faces:</span><br><span class="line">        result.append((x,y,x+width,y+height))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>函数最终返回一个列表，包含识别出来的人脸的左上、右上、左下、右下4个定点的坐标。</p><h1 id="框出人脸"><a href="#框出人脸" class="headerlink" title="框出人脸"></a>框出人脸</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在原图像上画矩形，框出所有人脸。</span></span><br><span class="line"><span class="comment">#调用Image模块的draw方法，Image.open获取图像句柄，ImageDraw.Draw获取该图像的draw实例，然后调用该draw实例的rectangle方法画矩形(矩形的坐标即</span></span><br><span class="line"><span class="comment">#detectFaces返回的坐标)，outline是矩形线条颜色(B,G,R)。</span></span><br><span class="line"><span class="comment">#注：原始图像如果是灰度图，则去掉outline，因为灰度图没有RGB可言。drawEyes、detectSmiles也一样。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line">    <span class="keyword">if</span> faces:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">255</span>, <span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        img.save(<span class="string">'drawfaces_'</span>+image_name)</span><br></pre></td></tr></table></figure><p>效果如图，可以看到正面人脸都被识别出来了，有一处判断错误的地方。</p><p><img src="https://i.loli.net/2018/05/09/5af1cb1dc5cb1.jpg" alt="drawfaces_obama.jpg"></p><h1 id="检测眼睛"><a href="#检测眼睛" class="headerlink" title="检测眼睛"></a>检测眼睛</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测眼睛，返回坐标</span></span><br><span class="line"><span class="comment">#由于眼睛在人脸上，我们往往是先检测出人脸，再细入地检测眼睛。故detectEyes可在detectFaces基础上来进行，代码中需要注意“相对坐标”。</span></span><br><span class="line"><span class="comment">#当然也可以在整张图片上直接使用分类器,这种方法代码跟detectFaces一样，这里不多说。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectEyes</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    eye_cascade = cv2.CascadeClassifier(<span class="string">'D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_eye.xml'</span>)</span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">        roi_gray = gray[y1:y2, x1:x2]</span><br><span class="line">        eyes = eye_cascade.detectMultiScale(roi_gray,<span class="number">1.3</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> (ex,ey,ew,eh) <span class="keyword">in</span> eyes:</span><br><span class="line">            result.append((x1+ex,y1+ey,x1+ex+ew,y1+ey+eh))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>使用眼睛的分类器进行分类，将四个顶点的坐标保存在列表里。</p><h1 id="框出眼睛"><a href="#框出眼睛" class="headerlink" title="框出眼睛"></a>框出眼睛</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在原图像上框出眼睛.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawEyes</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    eyes = detectEyes(image_name)</span><br><span class="line">    <span class="keyword">if</span> eyes:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> eyes:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">0</span>, <span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">        img.save(<span class="string">'draweyes_'</span>+image_name)</span><br></pre></td></tr></table></figure><p>效果如图，识别的还不算太精准：</p><p><img src="https://i.loli.net/2018/05/09/5af1cd80da33d.jpg" alt="draweyes_obama.jpg"></p><h1 id="检验笑脸"><a href="#检验笑脸" class="headerlink" title="检验笑脸"></a>检验笑脸</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectSmiles</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    smiles_cascade = cv2.CascadeClassifier(<span class="string">'D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_smile.xml'</span>)</span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img <span class="comment">#if语句：如果img维度为3，说明不是灰度图，先转化为灰度图gray，如果不为3，也就是2，原图就是灰度图</span></span><br><span class="line"></span><br><span class="line">    smiles = smiles_cascade.detectMultiScale(gray,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x,y,width,height) <span class="keyword">in</span> smiles:</span><br><span class="line">        result.append((x,y,x+width,y+height))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h1 id="框出笑脸"><a href="#框出笑脸" class="headerlink" title="框出笑脸"></a>框出笑脸</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在原图像上框出笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawSmiles</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    smiles = detectSmiles(image_name)</span><br><span class="line">    <span class="keyword">if</span> smiles:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> smiles:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">100</span>, <span class="number">100</span>,<span class="number">0</span>))</span><br><span class="line">        img.save(<span class="string">'drawsmiles_'</span>+image_name)</span><br></pre></td></tr></table></figure><p>效果如图：</p><p><img src="https://i.loli.net/2018/05/09/5af1cdeb87368.jpg" alt="drawsmiles_obama.jpg"></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="comment">#detectFaces()返回图像中所有人脸的矩形坐标（矩形左上、右下顶点）</span></span><br><span class="line"><span class="comment">#使用haar特征的级联分类器haarcascade_frontalface_default.xml，在haarcascades目录下还有其他的训练好的xml文件可供选择。</span></span><br><span class="line"><span class="comment">#注：haarcascades目录下训练好的分类器必须以灰度图作为输入。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    face_cascade = cv2.CascadeClassifier(<span class="string">"D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_frontalface_default.xml"</span>)</span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img <span class="comment">#if语句：如果img维度为3，说明不是灰度图，先转化为灰度图gray，如果不为3，也就是2，原图就是灰度图</span></span><br><span class="line"></span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, <span class="number">1.2</span>, <span class="number">5</span>)<span class="comment">#1.3和5是特征的最小、最大检测窗口，它改变检测结果也会改变</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x,y,width,height) <span class="keyword">in</span> faces:</span><br><span class="line">        result.append((x,y,x+width,y+height))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存人脸图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line">    <span class="keyword">if</span> faces:</span><br><span class="line">        <span class="comment">#将人脸保存在save_dir目录下。</span></span><br><span class="line">        <span class="comment">#Image模块：Image.open获取图像句柄，crop剪切图像(剪切的区域就是detectFaces返回的坐标)，save保存。</span></span><br><span class="line">        save_dir = image_name.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">"_faces"</span></span><br><span class="line">        os.mkdir(save_dir)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">            file_name = os.path.join(save_dir,str(count)+<span class="string">".jpg"</span>)</span><br><span class="line">            Image.open(image_name).crop((x1,y1,x2,y2)).save(file_name)</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在原图像上画矩形，框出所有人脸。</span></span><br><span class="line"><span class="comment">#调用Image模块的draw方法，Image.open获取图像句柄，ImageDraw.Draw获取该图像的draw实例，然后调用该draw实例的rectangle方法画矩形(矩形的坐标即</span></span><br><span class="line"><span class="comment">#detectFaces返回的坐标)，outline是矩形线条颜色(B,G,R)。</span></span><br><span class="line"><span class="comment">#注：原始图像如果是灰度图，则去掉outline，因为灰度图没有RGB可言。drawEyes、detectSmiles也一样。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line">    <span class="keyword">if</span> faces:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">255</span>, <span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        img.save(<span class="string">'drawfaces_'</span>+image_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检测眼睛，返回坐标</span></span><br><span class="line"><span class="comment">#由于眼睛在人脸上，我们往往是先检测出人脸，再细入地检测眼睛。故detectEyes可在detectFaces基础上来进行，代码中需要注意“相对坐标”。</span></span><br><span class="line"><span class="comment">#当然也可以在整张图片上直接使用分类器,这种方法代码跟detectFaces一样，这里不多说。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectEyes</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    eye_cascade = cv2.CascadeClassifier(<span class="string">'D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_eye.xml'</span>)</span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">        roi_gray = gray[y1:y2, x1:x2]</span><br><span class="line">        eyes = eye_cascade.detectMultiScale(roi_gray,<span class="number">1.3</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> (ex,ey,ew,eh) <span class="keyword">in</span> eyes:</span><br><span class="line">            result.append((x1+ex,y1+ey,x1+ex+ew,y1+ey+eh))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在原图像上框出眼睛.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawEyes</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    eyes = detectEyes(image_name)</span><br><span class="line">    <span class="keyword">if</span> eyes:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> eyes:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">0</span>, <span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">        img.save(<span class="string">'draweyes_'</span>+image_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检测笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectSmiles</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    smiles_cascade = cv2.CascadeClassifier(<span class="string">'D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_smile.xml'</span>)</span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img <span class="comment">#if语句：如果img维度为3，说明不是灰度图，先转化为灰度图gray，如果不为3，也就是2，原图就是灰度图</span></span><br><span class="line"></span><br><span class="line">    smiles = smiles_cascade.detectMultiScale(gray,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x,y,width,height) <span class="keyword">in</span> smiles:</span><br><span class="line">        result.append((x,y,x+width,y+height))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在原图像上框出笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawSmiles</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    smiles = detectSmiles(image_name)</span><br><span class="line">    <span class="keyword">if</span> smiles:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> smiles:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">100</span>, <span class="number">100</span>,<span class="number">0</span>))</span><br><span class="line">        img.save(<span class="string">'drawsmiles_'</span>+image_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    drawFaces(<span class="string">'obama.jpg'</span>)</span><br><span class="line">    drawEyes(<span class="string">'obama.jpg'</span>)</span><br><span class="line">    drawSmiles(<span class="string">'obama.jpg'</span>)</span><br><span class="line">    saveFaces(<span class="string">'obama.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">上面的代码将眼睛、人脸、笑脸在不同的图像上框出，如果需要在同一张图像上框出，改一下代码就可以了。</span></span><br><span class="line"><span class="string">总之，利用opencv里训练好的haar特征的xml文件，在图片上检测出人脸的坐标，利用这个坐标，我们可以将人脸区域剪切保存，也可以在原图上将人脸框出。剪切保存人脸以及用矩形工具框出人脸，本程序使用的是PIL里的Image、ImageDraw模块。</span></span><br><span class="line"><span class="string">此外，opencv里面也有画矩形的模块，同样可以用来框出人脸。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>OpenCV自带的分类器使用起来比较简单，对于标准的人脸图片识别的准确率比较高，但是也有误判的现象，特别是笑脸的判断不够精准，还有待完善。</p><p>后期可以使用OpenCV制作分类器，大致分为3步：</p><ul><li>制作训练集的数据集</li><li>训练分类器</li><li>使用分类器进行分类</li></ul>]]></content>
      
      <categories>
          
          <category> onpencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法分析实验三</title>
      <link href="/2018/05/04/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
      <url>/2018/05/04/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/21/5b02124a8dd5f.jpg" width="600" height="300" alt="git" align="center"></p><p>SWUST OJ 算法分析A（卓越软件1601）实验三</p><a id="more"></a><h2 id="简单背包问题"><a href="#简单背包问题" class="headerlink" title="简单背包问题"></a>简单背包问题</h2><p>设有一个背包可以放入的物品重量为S，现有n件物品，重量分别是w1，w2，w3，…wn。 </p><p>问能否从这n件物品中选择若干件放入背包中，使得放入的重量之和正好为S。 </p><p>如果有满足条件的选择，则此背包有解，否则此背包问题无解。</p><p><strong>输入 </strong></p><p id="div-border-left-blue">输入数据有多行，假设背包可以放入的物品重量为S，物品的件数n，以及每件物品的重量（输入数据均为正整数）。<br><br>多组测试数据。</p><p><strong>输出</strong></p><p id="div-border-left-blue">对于每个测试实例，若满足条件则输出“YES”，若不满足则输出“NO“。</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">20 5<br><br>1 3 5 7 9</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">YES</p><h3 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h3><p>思想就是先把所有的物品都放入背包，然后再一件一件的往外拿，当拿出之后：</p><ul><li>当背包被取空了时，就表明有解；</li><li>当拿完所有物品后，背包质量还不等于weight，就无解；</li><li>当第n个物品没有取出，而n-1个被取出时，背包的质量等于weight，就有解。</li><li>假设第n－1个物品取出来了，依然往下取，这时背包的weight变成weight-data[n]。</li></ul><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bag</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(weight==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span> &amp;&amp; weight!=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(bag(weight,n<span class="number">-1</span>)==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> bag(weight-data[n],n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> weight,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;weight,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bag(weight,n)==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Buyer"><a href="#Buyer" class="headerlink" title="Buyer"></a>Buyer</h2><p>哆啦A梦班级举办个party，当然吃的东西必不可少，哆啦A梦负责采购任务，他得到了一份清单，上面注明不同食品的受欢迎程度，哆啦A梦需要用一定的价钱尽可能达到的更大的受欢迎程度！例如，瓜子的受欢迎程度为20，瓜子的价钱是50元，那么如果哆啦A梦选择买瓜子，将花费50元，但受欢迎程度增加了20。为了避免食品单调性，每种食品只能买一份，不能重复购买。 现在哆啦A梦需要知道如何采购才能达到最大的受欢迎程度，你能帮助他吗？</p><p><strong>输入</strong></p><p id="div-border-left-blue">输入数据为多组，每组输入的第一行有两个正整数M和N(M&lt;100&amp;&amp;N&lt;1000)，分别为哆啦A梦可以支配的钱数和清单上的可选择的物品种类。 接下来的N行每行有两个正整数,分别为每种物品的价钱和它的受欢迎程度（编号为1到N）。</p><p><strong>输出</strong></p><p id="div-border-left-blue">如果存在物品购买，那么输出的第一行为能够达到的最大的受欢迎程度。第二行为需要购买的物品的编号（如果有多种可能，输出字典序靠前的那种），空格分隔每个数字；如没有物品可以购买，输出只有一行，为数字0。</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">10 4<br><br>100 5<br><br>5 5<br><br>5 5<br><br>10 10</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">10<br><br>2 3</p><h3 id="题目解读-1"><a href="#题目解读-1" class="headerlink" title="题目解读"></a>题目解读</h3><p>这道题就是01背包问题，金额限定M代表背包的容量，每种物品的价格代表物品的重量w[ ]，每种物品的价值用v[ ]表示。</p><h4 id="动态规划求解"><a href="#动态规划求解" class="headerlink" title="动态规划求解"></a>动态规划求解</h4><p>构造一个二维数组dp[N][M]，N行（N个物品),M列（M为容量能使用的最大金额)。二维数组dp[i][j]的含义是：当拿到第i个物品，不超过金额 j 时的最大价值。一行一行的循环填表：</p><ul><li>如果当前的限额超过了该物品的价值，表示可以取该物品,需要选择最优解：<ul><li>如果不取，当前价值为dp[i-1][j]</li><li>如果取，当前价值为dp[i-1][ j-w[i] ]+v[i]（指考虑了i-1件物品，背包容量为 j-w[i] 时的价值加上拿取的这件物品的价值）</li></ul></li><li>如果当前的限额低于这件物品的价值，就不能拿取这个物品：<ul><li>当前价值为dp[i-1][j]</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=M;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">            dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回溯检验是否取了物品"><a href="#回溯检验是否取了物品" class="headerlink" title="回溯检验是否取了物品"></a>回溯检验是否取了物品</h4><p>另外创建一个一维数组x[N]，下标代表物品对应的编号，0代表没有取，1代表取了。</p><p>由于dp[i][M]为最优解，如果dp[i][M]=dp[i-1][M]，那就说明有没有第i件物品都一样，那么x[i]=0，否则x[i]=1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traceback</span><span class="params">(<span class="keyword">int</span> M,<span class="keyword">int</span> N)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;<span class="number">1</span>;i--)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(dp[i][M]==dp[i<span class="number">-1</span>][M])  </span><br><span class="line">            x[i]=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            x[i]=<span class="number">1</span>;  </span><br><span class="line">            M-=w[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    x[<span class="number">1</span>]=(dp[<span class="number">1</span>][M]&gt;<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出问题（小心PE）"><a href="#输出问题（小心PE）" class="headerlink" title="输出问题（小心PE）"></a>输出问题（小心PE）</h4><ul><li>首先输出一行最大价值，换行；</li><li>然后输出取出来的物品，中间用一个空格隔开，注意最后一个数后面没有空格，而是换行；</li><li>多组输入，所以当最大价值为0时，输出0然后continue再次进入新的循环</li></ul><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1005</span>],w[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traceback</span><span class="params">(<span class="keyword">int</span> M,<span class="keyword">int</span> N)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;<span class="number">1</span>;i--)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(dp[i][M]==dp[i<span class="number">-1</span>][M])  </span><br><span class="line">            x[i]=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            x[i]=<span class="number">1</span>;  </span><br><span class="line">            M-=w[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    x[<span class="number">1</span>]=(dp[<span class="number">1</span>][M]&gt;<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M,N,i,j;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;M,&amp;N)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=M;j++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">                    dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        traceback(M,N);</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[i]==<span class="number">1</span>)</span><br><span class="line">                sum+=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[i]==<span class="number">1</span> &amp;&amp; flag==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x[i]==<span class="number">1</span> &amp;&amp; flag==<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="售货员的难题"><a href="#售货员的难题" class="headerlink" title="售货员的难题"></a>售货员的难题</h2><p>某乡有n个村庄（1&lt; n &lt; 20），有一个售货员，他要到各个村庄去售货，各村庄之间的路程s（0 &lt; s &lt; 1000）是已知的，且A村到B村与B村到A村的路大多不同。为了提高效率，他从商店出发到每个村庄一次，然后返回商店所在的村，假设商店所在的村庄为 1，他不知道选择什么样的路线才能使所走的路程最短。请你帮他选择一条最短的路。</p><p><strong>输入</strong></p><p id="div-border-left-blue">村庄数n和各村之间的路程（均是整数）。</p><p><strong>输出</strong></p><p id="div-border-left-blue">最短的路径</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">3    {村庄数}<br>0 2 1    {村庄1到各村的路程}<br>1 0 2    {村庄2到各村的路程}<br>2 1 0    {村庄3到各村的路程}</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">3</p><h3 id="题目解读-2"><a href="#题目解读-2" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="keyword">int</span> INF=<span class="number">12345678</span>;</span><br><span class="line"><span class="keyword">int</span> n,maps[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(d[i][j]&gt;d[i][k]+d[k][j])</span><br><span class="line">                    d[i][j]=d[i][k]+d[k][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> dis,<span class="keyword">int</span> cnt)</span><span class="comment">//x:current position</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span> &amp;&amp; cnt==n)</span><br><span class="line">    &#123;</span><br><span class="line">        INF=min(INF,dis);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>((dis+maps[x][i]+d[i][<span class="number">1</span>]&lt;INF) &amp;&amp; ((vis[i]==<span class="number">0</span>) || (cnt==n<span class="number">-1</span> &amp;&amp; i==<span class="number">1</span>)))</span><br><span class="line">            dfs(i,dis+maps[x][i],cnt+<span class="number">1</span>);</span><br><span class="line">    vis[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;maps[i][j]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                d[i][j]=maps[i][j];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        Floyd();</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跑跑卡丁车"><a href="#跑跑卡丁车" class="headerlink" title="跑跑卡丁车"></a>跑跑卡丁车</h2><p>跑跑卡丁车是时下一款流行的网络休闲游戏，你可以在这虚拟的世界里体验驾驶的乐趣。这款游戏的特别之处是你可以通过漂移来获得一种 加速卡，用这种加速卡可以在有限的时间里提高你的速度。为了使问题简单化，我们假设一个赛道分为L段，并且给你通过每段赛道的普通耗时Ai和用加速卡的耗时Bi。加速卡的获得机制是：普通行驶的情况下，每通过1段赛道,可以获得20%的能量(N2O).能量集满后获得一个加速卡(同时能量清0).加速卡最多可以储存2个,也就是说当你有2个加速卡而能量再次集满,那么能量清零但得不到加速卡。一个加速卡只能维持一段赛道，游戏开始时没有加速卡。问题是，跑完n圈最少用时为多少？</p><p><strong>输入</strong></p><p id="div-border-left-blue">每组输入数据有3行，第一行有2个整数L( 0 &lt; L &lt; 100),N(0 &lt; N &lt; 100)分别表示一圈赛道分为L段和有N圈赛道，接下来两行分别有L个整数Ai和Bi (Ai &gt; Bi).</p><p><strong>输出</strong></p><p id="div-border-left-blue">对于每组输入数据，输出一个整数表示最少的用时.</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">18 1<br>9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9<br>8 8 8 8 8 8 8 8 8 8 8 8 8 8 1 1 8 8</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">145</p><h3 id="题目解读-3"><a href="#题目解读-3" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10005</span>][<span class="number">15</span>],a[<span class="number">105</span>],b[<span class="number">105</span>],n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*m; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            a[i]=a[i%n];</span><br><span class="line">            b[i]=b[i%n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n*m; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">15</span>; j++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> k=j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">15</span>) k=<span class="number">10</span>;</span><br><span class="line">                dp[i+<span class="number">1</span>][k]=min(dp[i+<span class="number">1</span>][k],dp[i][j]+a[i]);</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=<span class="number">5</span>) dp[i+<span class="number">1</span>][j<span class="number">-5</span>]=min(dp[i+<span class="number">1</span>][j<span class="number">-5</span>],dp[i][j]+b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) ans=min(ans,dp[n*m][i]);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Renting-Boats"><a href="#Renting-Boats" class="headerlink" title="Renting Boats"></a>Renting Boats</h2><p>长江游艇俱乐部在长江上设置了n 个游艇出租站1，2，…，n。游客可在这些游艇出租站租用游艇，并在下游的任何一个游艇出租站归还游艇。游艇出租站i 到游艇出租站j 之间的租金为r(i,j),1&lt; =i&lt; j &lt; =n。试设计一个算法，计算出从游艇出租站1 到游艇出租站n 所需的最少租金。</p><p><strong>输入</strong></p><p id="div-border-left-blue">第1 行中有1 个正整数n（n&lt;=200），表示有n个游艇出租站。接下来的n-1 行是r(i,j),1&lt; =i&lt; j &lt; =n。</p><p><strong>输出</strong></p><p id="div-border-left-blue">从游艇出租站1 到游艇出租站n所需的最少租金</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">3<br>5 15<br>7</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">12</p><h3 id="题目解读-4"><a href="#题目解读-4" class="headerlink" title="题目解读"></a>题目解读</h3><p>此题可以用<strong>Floyd-Warshall算法</strong>算法解决，Floyd算法是解决两点间的最短路径的一种算法。Floyd算法的原理是动态规划。</p><p><strong>算法思想</strong>:如果存在定点k，使得以k做为中介点时，顶点i和顶点j之间的当前距离缩短，则使用顶点k做为顶点i和顶点j之间的中介点，即当dis[i][k] + dis[k][j] &lt; dis[i][j] 时，令 dis[i][j]=dis[i][k] + dis[k][j] 。</p><p><strong>算法流程</strong>：</p><ul><li>枚举顶点k</li><li>以顶点k做为中介点，枚举所有顶点i和j</li><li>如果dis[i][k] + dis[k][j] &lt; dis[i][j]成立，则 dis[i][j]=dis[i][k] + dis[k][j]</li></ul><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">205</span>][<span class="number">205</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                <span class="keyword">if</span>(dis[i][k]!=<span class="number">0</span> &amp;&amp; dis[k][j]!=<span class="number">0</span> &amp;&amp; dis[i][k]+dis[k][j]&lt;dis[i][j])</span><br><span class="line">                    dis[i][j]=dis[i][k]+dis[k][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;dis[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dis[<span class="number">0</span>][n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jack-Straws"><a href="#Jack-Straws" class="headerlink" title="Jack Straws"></a>Jack Straws</h2><p>n the game of Jack Straws, a number of plastic or wooden “straws” are dumped on the table and players try to remove them one-by-one without disturbing the other straws. Here, we are only concerned with if various pairs of straws are connected by a path of touching straws. You will be given a list of the endpoints for some straws (as if they were dumped on a large piece of graph paper) and then will be asked if various pairs of straws are connected. Note that touching is connecting, but also two straws can be connected indirectly via other connected straws.</p><p><strong>输入</strong></p><p id="div-border-left-blue">A problem consists of multiple lines of input. The first line will be an integer n (1 &lt; n &lt; 13) giving the number of straws on the table. Each of the next n lines contain 4 positive integers, x1 , y1 , x2 and y2 , giving the coordinates, (x1 ; y1 ); (x2 ; y2 ) of the endpoints of a single straw. All coordinates will be less than 100. (Note that the straws will be of varying lengths.) The first straw entered will be known as straw #1, the second as straw #2, and so on. The remaining lines of input (except for the final line) will each contain two positive integers, a and b, both between 1 and n, inclusive. You are to determine if straw a can be connected to straw b. When a = 0 = b, the input is terminated. There will be no illegal input and there are no zero-length straws.</p><p><strong>输出</strong></p><p id="div-border-left-blue">You should generate a line of output for each line containing a pair a and b, except the final line where a = 0 = b. The line should say simply “CONNECTED”, if straw a is connected to straw b, or “NOT CONNECTED”, if straw a is not connected to straw b. For our purposes, a straw is considered connected to itself.</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">7<br>1 6 3 3<br>4 6 4 9<br>4 5 6 7<br>1 4 3 5<br>3 5 5 5<br>5 2 6 3<br>5 4 7 2<br>1 4<br>1 6<br>3 3<br>6 7<br>2 3<br>1 3<br>0 0</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">CONNECTED<br>NOT CONNECTED<br>CONNECTED<br>CONNECTED<br>NOT CONNECTED<br>CONNECTED</p><h3 id="题目解读-5"><a href="#题目解读-5" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[<span class="number">20</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> x1,x2,y1,y2;  </span><br><span class="line">    Point(<span class="keyword">int</span> x1 = <span class="number">0</span>, <span class="keyword">int</span> x2 = <span class="number">0</span>, <span class="keyword">int</span> y1 = <span class="number">0</span>, <span class="keyword">int</span> y2 = <span class="number">0</span>) : x1(x1),x2(x2),y1(y1),y2(y2) &#123;&#125;;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;p[<span class="number">20</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">set</span>[i] = i;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> x == <span class="built_in">set</span>[x] ? x : <span class="built_in">set</span>[x] = find(<span class="built_in">set</span>[x]);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cross</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> x1 * y2 - x2 * y1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intersection</span><span class="params">(Point A, Point B)</span> <span class="comment">//判断直线相交  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">4</span>];  </span><br><span class="line">    <span class="keyword">if</span>(max(A.x1,A.x2) &lt; min(B.x1,B.x2) || max(A.y1,A.y2) &lt; min(B.y1,B.y2)  </span><br><span class="line">       || max(B.x1,B.x2) &lt; min(A.x1,A.x2) || max(B.y1,B.y2) &lt; min(A.y1,A.y2) ) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//考虑共线不相交的情况,为快速排斥定理  </span></span><br><span class="line">    <span class="comment">/*判断两条直线是否相交,即只需判断线是否在另一条线的两端*/</span>  </span><br><span class="line">    c[<span class="number">0</span>] = cross(A.x2 - A.x1, A.y2 - A.y1, B.x1 - A.x1, B.y1 - A.y1);  </span><br><span class="line">    c[<span class="number">1</span>] = cross(A.x2 - A.x1, A.y2 - A.y1, B.x2 - A.x1, B.y2 - A.y1);  </span><br><span class="line">    c[<span class="number">2</span>] = cross(B.x2 - B.x1, B.y2 - B.y1, A.x1 - B.x1, A.y1 - B.y1);  </span><br><span class="line">    c[<span class="number">3</span>] = cross(B.x2 - B.x1, B.y2 - B.y1, A.x2 - B.x1, A.y2 - B.y1);  </span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">0</span>] * c[<span class="number">1</span>] &lt;= <span class="number">0</span> &amp;&amp; c[<span class="number">2</span>] * c[<span class="number">3</span>] &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//运用到了向量的叉乘和点乘的知识;  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);  </span></span><br><span class="line">    <span class="keyword">int</span> n;  </span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) &amp;&amp; n)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  </span><br><span class="line">            p[i].read();  </span><br><span class="line">        unit(n);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span>(intersection(p[i],p[j]))  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">int</span> a = find(i);  </span><br><span class="line">                    <span class="keyword">int</span> b = find(j);  </span><br><span class="line">                    <span class="keyword">if</span>(a != b) <span class="built_in">set</span>[a] = b;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> a,b;  </span><br><span class="line">        <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b), a | b)  </span><br><span class="line">        &#123;  </span><br><span class="line">            a = find(a);  </span><br><span class="line">            b = find(b);  </span><br><span class="line">            <span class="keyword">if</span>(a == b) <span class="built_in">puts</span>(<span class="string">"CONNECTED"</span>);  </span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NOT CONNECTED"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Coin-collecting-by-robot"><a href="#Coin-collecting-by-robot" class="headerlink" title="Coin-collecting by robot"></a>Coin-collecting by robot</h2><p>Several coins are placed in cells of an n×m board. A robot, located in the upper left cell of the board, needs to collect as many of the coins as possible and bring them to the bottom right cell. On each step, the robot can move either one cell to the right or one cell down from its current location.</p><p><strong>输入</strong></p><p id="div-border-left-blue">The fist line is n,m, which 1&lt; = n,m &lt;= 1000.<br>Then, have n row and m col, which has a coin in cell, the cell number is 1, otherwise is 0.</p><p><strong>输出</strong></p><p id="div-border-left-blue">The max number Coin-collecting by robot.</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">5 6<br>0 0 0 0 1 0<br>0 1 0 1 0 0<br>0 0 0 1 0 1<br>0 0 1 0 0 1<br>1 0 0 0 1 0</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">5</p><h3 id="题目解读-6"><a href="#题目解读-6" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>题目大意</strong></p><p>在nxm的方格中有一些硬币，用1代表有硬币，0代表没有硬币。现在让一个机器人来尽可能多的捡硬币，它从左上角出发，每次只能走一步，要么向下走，要么向右走，到右下角时结束。</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>建立dp二维数组，把原始数据存入二维数组中，这时从右下角往左上角依次按行列遍历，重新计算dp[i][j]的值。计算方法就是两种选择二选一，要么向下走，要么向右走：</p><ul><li>选择下方的数：dp[i][j] += dp[i+1][j]</li><li>选择右面的数：dp[i][j] += dp[i][j+1]</li></ul><p>状态方程就是：</p><p>dp[i][j] += max( dp[i+1][j] , dp[i][j+1] )</p><p>最后dp[0][0]就是最大值。</p><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a&gt;b)?a:b)</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1000</span>][<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=m<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] += max(dp[i+<span class="number">1</span>][j],dp[i][j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\r\n"</span>,dp[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Coin-row-problem"><a href="#Coin-row-problem" class="headerlink" title="Coin-row problem"></a>Coin-row problem</h2><p>There is a row of n coins whose values are some positive integers c₁, c₂,…,cn, not necessarily distinct. The goal is to pick up the maximum amount of money subject to the constraint that no two coins adjacent in the initial row can be picked up.</p><p><strong>输入</strong></p><p id="div-border-left-blue">Two lines, the first line is n (0&lt; n &lt;=10000), and the second line is value of coin(0&lt; value &lt;= 2^32).</p><p><strong>输出</strong></p><p id="div-border-left-blue">the maximum amount of money.</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">6<br>5 1 2 10 6 2</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">17</p><h3 id="题目解读-7"><a href="#题目解读-7" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>题目大意</strong></p><p>有一串数字，现在需要取出一些数组，取数规则就是不能选两个相邻的数。现在需要计算在这种规则下，能取到的数字之和最大是多少。</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">num</td><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">2</td></tr></tbody></table><p>dp(i)代表选择到第i个硬币时，能得到的金额数。</p><p>以dp(5)为例，此时有两种选择：</p><ul><li>选5号（那就不能选4号）：dp(3)+num(5)</li><li>不选5号（就可以选4号）：dp(4)</li></ul><p>这样就可以推导出状态方程：</p><p>dp(i) = max( dp(i-2)+num[i] , dp(i-1) )</p><p>dp(0) = num[0]</p><p>dp(1) = max( num[0] , num[1] )</p><p>这样就可以敲代码了，如果使用递归的方法，会产生很多重叠子问题，运算速度慢，效率为O(n^2)。所以不使用递归方法，而是建立一个dp数组，然后循环填表，一次把dp[0],dp[1],dp[2]……的值计算出来，最后最优解即是dp[n-1]。</p><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a&gt;b)?a:b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10000</span>],dp[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=num[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>]=max(num[<span class="number">0</span>],num[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i]=max(dp[i<span class="number">-2</span>]+num[i],dp[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\r\n"</span>,dp[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习之sklearn</title>
      <link href="/2018/04/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bsklearn/"/>
      <url>/2018/04/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bsklearn/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/01/5ae85bbc1a959.png" width="600" height="300" alt="git" align="center"> </p><p>Scikit learn 也简称 sklearn, 是机器学习领域当中最知名的 python 模块之一。</p><a id="more"></a><h1 id="Scikit-learn模块"><a href="#Scikit-learn模块" class="headerlink" title="Scikit learn模块"></a>Scikit learn模块</h1><p>Scikit learn 也简称 sklearn, 是机器学习领域当中最知名的 python 模块之一。</p><p>Sklearn 包含了很多种机器学习的方式:</p><ul><li>Classification 分类（监督学习）</li><li>Regression 线性回归（监督学习）</li><li>Clustering 非监督分类</li><li>Dimensionality reduction 数据降维</li><li>Model Selection 模型选择</li><li>Preprocessing 数据预处理</li></ul><p><strong>在股票、房价预测中可以使用线性回归。</strong></p><p><img src="https://i.loli.net/2018/05/01/5ae85bbc1a959.png" alt="sklearn的流程图"></p><p>其中蓝色圆圈内是判断条件，绿色方框内是可以选择的算法</p><h1 id="sklearn-的使用"><a href="#sklearn-的使用" class="headerlink" title="sklearn 的使用"></a>sklearn 的使用</h1><h2 id="正则化输入"><a href="#正则化输入" class="headerlink" title="正则化输入"></a>正则化输入</h2><p><strong>正则化含义解释</strong> ：</p><p>如果输入特征属于不同范围内，可能有些特征值从0到1，有些特征值从1到1000，那么归一化（normalize）特征值就非常重要了。</p><p>具体参考吴恩达课程<a href="http://mooc.study.163.com/learn/2001281003?tid=2001391036#/learn/content?type=detail&amp;id=2001701046" target="_blank" rel="noopener">http://mooc.study.163.com/learn/2001281003?tid=2001391036#/learn/content?type=detail&amp;id=2001701046</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将收盘数据正则化，全部化为-1到1之间的数</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing <span class="comment">#标准化数据模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">()</span>:</span></span><br><span class="line">data = pd.read_csv(<span class="string">"new_day_close.csv"</span>)</span><br><span class="line">data = data.iloc[:,<span class="number">1</span>:]</span><br><span class="line">normalized = preprocessing.scale(data)</span><br><span class="line">print(normalized)</span><br></pre></td></tr></table></figure><h2 id="SVR——Support-Vector-Regression"><a href="#SVR——Support-Vector-Regression" class="headerlink" title="SVR——Support Vector Regression"></a>SVR——Support Vector Regression</h2><h2 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h2><h3 id="K-CV方法"><a href="#K-CV方法" class="headerlink" title="K-CV方法"></a>K-CV方法</h3><p>将原始数据分成K组(一般是均分),将每个子集数据分别做一次验证集,其余的K-1组子集数据作为训练集,这样会得到K个模型,用这K个模型最终的验证集的分类准确率的平均数作为此K-CV下分类器的性能指标.K一般大于等于2,实际操作时一般从3开始取,只有在原始数据集合数据量小的时候才会尝试取2.K-CV可以有效的避免过学习以及欠学习状态的发生,最后得到的结果也比较具有说服性。</p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> sklearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法分析实验二</title>
      <link href="/2018/04/23/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
      <url>/2018/04/23/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/21/5b02124a8dd5f.jpg" width="600" height="300" alt="git" align="center"></p><p>SWUST OJ 算法分析A（卓越软件1601）实验二</p><a id="more"></a><h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1><h2 id="凸包面积"><a href="#凸包面积" class="headerlink" title="凸包面积"></a>凸包面积</h2><p>麦兜是个淘气的孩子。一天，他在玩钢笔的时候把墨水洒在了白色的墙上。再过一会，麦兜妈就要回来了，麦兜为了不让妈妈知道这件事情，就想用一个白色的凸多边形把墙上的墨点盖住。你能告诉麦兜最小需要面积多大的凸多边形才能把这些墨点盖住吗？ 现在，给出了这些墨点的坐标，请帮助麦兜计算出覆盖这些墨点的最小凸多边形的面积。</p><p><strong>输入</strong></p><blockquote><p>多组测试数据。第一行是一个整数T，表明一共有T组测试数据。每组测试数据的第一行是一个正整数N(0&lt; N &lt; = 105)，表明了墨点的数量。接下来的N行每行包含了两个整数Xi和Yi（0&lt;=Xi,Yi&lt;=2000），表示每个墨点的坐标。每行的坐标间可能包含多个空格。</p></blockquote><p><strong>输出</strong></p><blockquote><p>每行输出一组测试数据的结果，只需输出最小凸多边形的面积。面积是个实数，小数点后面保留一位即可，不需要多余的空格。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>2</p><p>4</p><p>0 0</p><p>1 0</p><p>0 1</p><p>1 1</p><p>2</p><p>0 0</p><p>0 1</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>1.0</p><p>0.0</p></blockquote><h3 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y; </span><br><span class="line">&#125;data[<span class="number">110</span>],point[<span class="number">110</span>],basic;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">direction</span><span class="params">(node pi,node pj,node pk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pj.x-pi.x)*(pk.y-pi.y)-(pj.y-pi.y)*(pk.x-pi.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node pj,node pk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=direction(basic,pj,pk);</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span>(dis(basic,pj)&gt;dis(basic,pk));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> k&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n; <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;data[i].x&gt;&gt;data[i].y;</span><br><span class="line">            <span class="keyword">if</span>(data[i].y&lt;data[flag].y||(data[i].y==data[flag].y&amp;&amp;data[i].x&lt;data[flag].x))</span><br><span class="line">            flag=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0.0\n"</span>; <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node zz=data[<span class="number">0</span>]; data[<span class="number">0</span>]=data[flag]; data[flag]=zz;</span><br><span class="line">        basic=data[<span class="number">0</span>];</span><br><span class="line">        sort(data+<span class="number">1</span>,data+n,cmp);</span><br><span class="line">        <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">        point[top++]=data[<span class="number">0</span>];</span><br><span class="line">        point[top++]=data[<span class="number">1</span>];</span><br><span class="line">        point[top++]=data[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(direction(point[top<span class="number">-2</span>],point[top<span class="number">-1</span>],data[i])&lt;<span class="number">0</span>)</span><br><span class="line">            top--;</span><br><span class="line">            point[top++]=data[i]; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top<span class="number">-1</span>;i++)</span><br><span class="line">        sum+=<span class="built_in">abs</span>(direction(point[<span class="number">0</span>],point[i],point[i+<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>,sum/<span class="number">2</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变位词"><a href="#变位词" class="headerlink" title="变位词"></a>变位词</h2><p>如果两个单词的组成字母完全相同，只是字母的排列顺序不一样，则它们就是变位词，两个单词相同也被认为是变位词。如tea 与eat , nic 与cin, ddc与dcd, abc与abc 等。你的任务就是判断它们是否是变位词。</p><p><strong>输入</strong></p><blockquote><p>第一行一个N,表示下面有N行测试数据。每行测试数据包括两个单词，如tea eat ,它们之间用空格割开</p></blockquote><p><strong>输出</strong></p><blockquote><p>对于每个测试数据，如果它们是变位词，输出Yes,否则输出No.</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>3</p><p>tea eat</p><p>ddc cdd</p><p>dee dde</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>Yes</p><p>Yes</p><p>No</p></blockquote><h3 id="题目解读-1"><a href="#题目解读-1" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>策略</strong></p><p>对于两个给定字符串，先预排序，排序之后比较是否完全一样，如果完全一样就是变位词，否则不是变位词。</p><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">105</span>],b[<span class="number">105</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> len1=<span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">int</span> len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">sort(a,a+len1);</span><br><span class="line">sort(b,b+len2);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(a,b)==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><p>Quicksort is a well-known sorting algorithm developed by C. A. R. Hoare that, on average, makes Θ(n log n) comparisons to sort n items. However, in the worst case, it makes Θ(n2) comparisons. Typically, quicksort is significantly faster in practice than other Θ(n log n) algorithms, because its inner loop can be efficiently implemented on most architectures, and in most real-world data it is possible to make design choices which minimize the possibility of requiring quadratic time. Quicksort sorts by employing a divide and conquer strategy to divide a list into two sub-lists. The steps are: 1. Pick an element, called a pivot, from the list. 2. Reorder the list so that all elements which are less than the pivot come before the pivot and so that all elements greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation. 3. Recursively sort the sub-list of lesser elements and the sub-list of greater elements. The base case of the recursion are lists of size zero or one, which are always sorted. The algorithm always terminates because it puts at least one element in its final place on each iteration (the loop invariant). Quicksort in action on a list of random numbers. The horizontal lines are pivot values. Write a program to sort ascending int number by QuickSort ,n less than 50000.</p><p><strong>输入</strong></p><blockquote><p>two lows, the first low is numbers , less and equal than 50000. the second low is a set integer numbers</p></blockquote><p><strong>输出</strong></p><blockquote><p>a set integer numbers of sort ascending</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10</p><p>4 2 1 5 7 6 9 8 0 3</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>0 1 2 3 4 5 6 7 8 9</p></blockquote><h3 id="题目解读-2"><a href="#题目解读-2" class="headerlink" title="题目解读"></a>题目解读</h3><p>快排算法</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50005</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PostOffice"><a href="#PostOffice" class="headerlink" title="PostOffice"></a>PostOffice</h2><p>在一个按照东西和南北方向划分成规整街区的城市里，n个居民点散乱地分布在不同的街区中。用x 坐标表示东西向，用y坐标表示南北向。各居民点的位置可以由坐标(x,y)表示。 　　</p><p>街区中任意2 点(x1,y1)和(x2,y2)之间的距离可以用数值|x1-x2|+|y1-y2|度量。 居民们希望在城市中选择建立邮局的最佳位置，使n个居民点到邮局的距离总和最小。 　　</p><p>任务：给定n 个居民点的位置,编程计算n 个居民点到邮局的距离总和的最小值。</p><p><strong>输入</strong></p><blockquote><p>第1 行是居民点数n，1 &lt; = n &lt; =10000。接下来n 行是居民点的位置，每行2 个整数x 和y，-10000 &lt; =x，y &lt; =10000。</p></blockquote><p><strong>输出</strong></p><blockquote><p>n 个居民点到邮局的距离总和的最小值。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5</p><p>1 2</p><p>2 2</p><p>1 3</p><p>3 -2</p><p>3 3</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>10</p></blockquote><h3 id="题目解读-3"><a href="#题目解读-3" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>策略</strong></p><p>蛮力法。循环比较每两个点之间的距离。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,midx,midy;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">10005</span>],y[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">sort(x,x+n);</span><br><span class="line">sort(y,y+n);</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">midx=(x[n/<span class="number">2</span>]+x[n/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2</span>;</span><br><span class="line">midy=(y[n/<span class="number">2</span>]+y[n/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">midx=x[n/<span class="number">2</span>];</span><br><span class="line">midy=y[n/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> dis=<span class="built_in">abs</span>(x[i]-midx)+<span class="built_in">abs</span>(y[i]-midy);</span><br><span class="line">sum+=dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="俄式乘法"><a href="#俄式乘法" class="headerlink" title="俄式乘法"></a>俄式乘法</h2><p>俄式乘法，又被称为俄国农夫法，它是对两个正整数相乘的非主流算法。假设m和n是两个正整数，我们要计算它们的积。它的主要原理如下： if n is 偶数 n <em> m=n/2 </em> 2m else n <em> m=(n-1)/2 </em> 2m + m 该算法只包括折半，加倍，相加等几个简单操作，因此实现速度非常快。</p><p><strong>输入</strong></p><blockquote><p>两个正整数 n,m。</p></blockquote><p><strong>输出</strong></p><blockquote><p>n和m的乘积。</p><p>输出整个求和表达式，运算符与数字之间用一个空格隔开。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>50 65</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>130 + 1040 + 2080 = 3250</p></blockquote><h3 id="题目解读-4"><a href="#题目解读-4" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,i,k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">n=n/<span class="number">2</span>;</span><br><span class="line">m=m*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">n=(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">m=<span class="number">2</span>*m;</span><br><span class="line">a[k]=m/<span class="number">2</span>;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" + "</span>);</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" = "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum+m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最近对问题"><a href="#最近对问题" class="headerlink" title="最近对问题"></a>最近对问题</h2><p>设p1=(x1, y1), p2=(x2, y2), …, pn=(xn, yn)是平面上n个点构成的集合S，设计算法找出集合S中距离最近的点对。</p><p><strong>输入</strong></p><blockquote><p>多组测试数据，第一行为测试数据组数n（0&lt;n≤100），每组测试数据由两个部分构成，第一部分为一个点的个数m（0&lt;m≤1000），紧接着是m行，每行为一个点的坐标x和y，用空格隔开，（0&lt;x，y≤100000）</p></blockquote><p><strong>输出</strong></p><blockquote><p>每组测试数据输出一行，为该组数据最近点的距离，保留4为小数。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>2</p><p>2</p><p>0 0</p><p>0 1</p><p>3</p><p>0 0</p><p>1 1</p><p>1 0</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>1.0000</p><p>1.0000</p></blockquote><h3 id="题目解读-5"><a href="#题目解读-5" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>策略</strong></p><p>蛮力法。循环比较。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m,i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1005</span>],y[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x[k],&amp;y[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> min=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> a=(x[j]-x[i])*(x[j]-x[i]);</span><br><span class="line"><span class="keyword">double</span> b=(y[j]-y[i])*(y[j]-y[i]);</span><br><span class="line"><span class="keyword">double</span> dis=<span class="built_in">sqrt</span>(a+b);</span><br><span class="line"><span class="keyword">if</span>(dis&lt;min)</span><br><span class="line">min=dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="约瑟夫问题的实现"><a href="#约瑟夫问题的实现" class="headerlink" title="约瑟夫问题的实现"></a>约瑟夫问题的实现</h2><p>n个人围成一个圈，每个人分别标注为1、2、…、n，要求从1号从1开始报数，报到k的人出圈，接着下一个人又从1开始报数，如此循环，直到只剩最后一个人时，该人即为胜利者。例如当n=10,k=4时，依次出列的人分别为4、8、2、7、3、10，9、1、6、5，则5号位置的人为胜利者。给定n个人，请你编程计算出最后胜利者标号数。（要求用单循环链表完成。）</p><p><strong>输入</strong></p><blockquote><p>第一行为人数n;</p><p>第二行为报数k。</p></blockquote><p><strong>输出</strong></p><blockquote><p>输出最后胜利者的标号数。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10 4</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>5</p></blockquote><h3 id="题目解读-6"><a href="#题目解读-6" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">josephus</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=(sum+m)%i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">int</span> ans=josephus(n,k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法分析实验一</title>
      <link href="/2018/04/22/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>/2018/04/22/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/21/5b02124a8dd5f.jpg" width="600" height="300" alt="git" align="center"></p><p>SWUST OJ  算法分析A（卓越软件1601）实验一</p><a id="more"></a><h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1><h2 id="Euclid’s-Game"><a href="#Euclid’s-Game" class="headerlink" title="Euclid’s Game"></a>Euclid’s Game</h2><p>Starts with two unequal positive numbers (M,N and M&gt;N) on the board. Two players move in turn. On each move, a player has to write on the board a positive number equal to the difference of two numbers already on the board; this number must be new, i.e., different from all the numbers already on the board. The player who cannot move loses the game. Should you choose to move first or second in this game? </p><p>According to the above rules, there are two players play tihs game. Assumptions A write a number on the board at first, then B write it. </p><p>Your task is write a program to judge the winner is A or B.</p><p><strong>输入</strong></p><blockquote><p>Two unequal positive numbers M and N , M&gt;N (M&lt;1000000)</p></blockquote><p><strong>输出</strong></p><blockquote><p>A or B</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>3  1</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>A</p></blockquote><h3 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>翻译</strong></p><p>黑板上已经有两个正数M和N（M&gt;N），两个人轮流在黑板上写数组，要求写上的数字必须是黑板上已有数字只差，而且不能重复写已经在黑板上的数字，最后一个不能写数字的人就输了。请问赢家应该先写还是后写？</p><p><strong>策略</strong></p><p>如果开始时，两个数字不是倍数关系，那么从M到1所有的数都可以出现，也就是黑板上总共可以出现M个数，减掉原先写在黑板上的两个数，就可以写 <strong>M-2</strong> 个数；</p><p>如果开始时，两个数字是整数倍关系，那么只能出现[M-1N , M-2N, M-3N…]这些数，也就是黑板上总共可以出现M/N个数，减掉原来写在黑板上的两个数，就可以写 <strong>M/N-2</strong> 个数。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,sum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(a%b==<span class="number">0</span>)</span><br><span class="line">sum=a/b<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum=a<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"B\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"A\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻煎饼"><a href="#翻煎饼" class="headerlink" title="翻煎饼"></a>翻煎饼</h2><p>麦兜最喜欢的食物是煎饼，每次在街上看到煎饼摊的时候都会在那里停留几分钟。最吸引麦兜还是煎饼师傅那一手熟练的翻煎饼的技术，一堆煎饼在那里，师傅只需要用铲子翻几下，就让煎饼整齐的叠在了一起。 这天，为了庆祝麦兜被保送上研究生，他从煎饼师傅那里买回来一些煎饼请客。但是麦兜买回的煎饼大小不一，麦兜太想吃煎饼了，他想吃这些煎饼中最大的那个。麦兜还知道同学们也很喜欢煎饼，为了表示他的诚意，他想让同学们先吃，麦兜最后吃，因此，麦兜想把煎饼按照从小到大的顺序叠放在一起，大的在最下面。这样麦兜就可以在最后拿到最大的那一块煎饼了。 现在请你帮助麦兜用煎饼师傅翻煎饼的方法把麦兜买的煎饼从小到大的叠在一起。煎饼师傅的方法是用铲子插入两块煎饼之间，然后将铲子上的煎饼翻一转，这样铲子上第一个煎饼就被翻到了顶上，而原来顶上的煎饼则被翻到了刚才插入铲子的地方。麦兜希望这样翻煎饼的次数最少。</p><p><strong>输入</strong></p><blockquote><p>输入包括两行，第一行是一个整数n(1&lt;=n&lt;=1000)，表示煎饼的个数，接下来的一行有n个不相同的整数，整数间用空格隔开，每个整数表示煎饼的大小（直径），左边表示顶部，右边表示底部。</p></blockquote><p><strong>输出</strong></p><blockquote><p>输出为一行，翻煎饼的最少次数</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5</p><p>5 4 2 3 1</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>4</p></blockquote><h3 id="题目解读-1"><a href="#题目解读-1" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>策略</strong> </p><p>每次先找最大的，然后把最大的翻到上面，再整体翻一次，最大的就到最下面了。</p><p>一个函数找数组中最大数对应的角标；</p><p>一个函数实现翻煎饼（把num[a]到num[b]逆序排列）；</p><p>一个递归函数反复找最大值和实现翻煎饼的过程。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> times=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=a,j=b;i&lt;j;i++,j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t=num[i];</span><br><span class="line">num[i]=num[j];</span><br><span class="line">num[j]=t;</span><br><span class="line">&#125;</span><br><span class="line">times++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindMax</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,max=a;</span><br><span class="line"><span class="keyword">for</span>(i=a;i&lt;=b;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]&gt;num[max])</span><br><span class="line">max=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> maxn=FindMax(<span class="number">0</span>,n);</span><br><span class="line"><span class="keyword">if</span>(maxn!=<span class="number">0</span> &amp;&amp; maxn!=n)</span><br><span class="line">&#123;</span><br><span class="line">turn(<span class="number">0</span>,maxn);</span><br><span class="line">turn(<span class="number">0</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxn==<span class="number">0</span>)</span><br><span class="line">turn(<span class="number">0</span>,n);</span><br><span class="line">change(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line">change(n<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,times);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Locker-doors"><a href="#Locker-doors" class="headerlink" title="Locker doors"></a>Locker doors</h2><p>There are n lockers in a hallway numbered sequentially from 1 to n. Initially, all the locker doors are closed. You make n passes by the lockers, each time starting with locker #1. On the ith pass, i = 1, 2, …, n, you toggle the door of every ith locker: if the door is closed, you open it, if it is open, you close it. For example, after the first pass every door is open; on the second pass you only toggle the even-numbered lockers (#2, #4, …) so that after the second pass the even doors are closed and the odd ones are opened; the third time through you close the door of locker #3 (opened from the first pass), open the door of locker #6 (closed from the second pass), and so on. After the last pass, which locker doors are open and which are closed? How many of them are open? Your task is write a program to output How many doors are open after the last pass? Assumptions all doors are closed at first.</p><p><strong>输入</strong></p><blockquote><p>a positive numbers n, total doors. n&lt;=100000</p></blockquote><p><strong>输出</strong></p><blockquote><p>a positive numbers ，the total of doors opened after the last pass.</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>3</p></blockquote><h3 id="题目解读-2"><a href="#题目解读-2" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>翻译</strong></p><p>假设走廊上有n把锁，标号为0~n，全部都是锁上的，现在你经过走廊n次，第一次把1的倍数（1,2,3…）的锁打开，第二次把2的倍数（2,4,6…）的锁打开，如果已经打开了就关上，第三次对3的倍数的锁进行类似的操作。请问最后有几把锁是开着的？</p><p><strong>策略</strong></p><p>直白的来看，就是从1到n，求每个数的公因数的个数（比如数字6，有1,2,3,6四个公因数，经过4次操作后就是关闭的状态），但是如果循环求n次公因数的个数，就会超时……</p><p>换个角度想一想，什么样的数会有奇数个公因子呢？只有遇到1x1, 2x2, 3x3，…  才会出现奇数个公因子，所以只需要求$\sqrt{n}$的整数部分就可以啦！</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> sum=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Josephus-Problem"><a href="#The-Josephus-Problem" class="headerlink" title="The Josephus Problem"></a>The Josephus Problem</h2><p>The problem is named after Flavius Josephus, a Jewish historian who participated in and chronicled the Jewish revolt of 66-70C.E. against the Romans. Josephus, as a general, managed to hold the fortress of Jotapata for 47days, but after the fall of the city he took refuge with 40 diehards in a nearby cave. There the rebels voted to perish rather than surrender. Josephus proposed that each man in turn should dispatch his neighbor, the order to be determined by casting lots. Josephus contrived to draw the last lot, and as one of the two surviving men in the cave, he prevailed upon his intended victim to surrender to the Romans. Your task:computint the position of the survivor when there are initially n people.</p><p><strong>输入</strong></p><blockquote><p>a Positive Integer n is initially people. n&lt; = 50000</p></blockquote><p><strong>输出</strong></p><blockquote><p>the position of the survivor</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>6</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>5</p></blockquote><h3 id="题目解读-3"><a href="#题目解读-3" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>翻译</strong></p><p>n个人围成一圈报数，报到2的人就会死掉，然后下一个人再接着从1开始报数，直到最后剩下一个人活着，请问最开始应该在几号位才能活到最后？</p><p><strong>策略</strong></p><p>一种方法就是模拟，定义一个数组，从1到n全部置为1，对应编号的人死掉就置为0，用另一个数组表示当前报数的数字，等于2时，就从头再来。</p><p>还有一种公式法，循环取模。</p><p><strong>代码</strong></p><p><strong>模拟法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,t=<span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span>(t&gt;n)</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[t]==<span class="number">0</span>)</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">count++;</span><br><span class="line">a[t]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count==n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>公式法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">josephus</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=(sum+m)%i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> ans=josephus(n,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h2><p>A binary search algorithm (or binary chop) is a technique for finding a particular value in a sorted list. It makes progressively better guesses, and closes in on the sought value, by comparing an element halfway with what has been determined to be an element too low in the list and one too high in the list. A binary search finds the median element in a list, compares its value to the one you are searching for, and determines if it’s greater than, less than, or equal to the one you want. A guess that turns out to be too high becomes the new top of the list, and one too low the new bottom of the list. The binary search’s next guess is halfway between the new list’s top and bottom. Pursuing this strategy iteratively, it narrows the search by a factor 2 each time, and finds your value. A binary search is an example of a divide and conquer algorithm (more specifically a decrease and conquer algorithm) and a dichotomic search (more at Search algorithm). The most common application of binary search is to find a specific value in a sorted list. To cast this in the frame of the guessing game (see Example below), realize that we are now guessing the index, or numbered place, of the value in the list. This is useful because, given the index, other data structures will contain associated information. Suppose a data structure containing the classic collection of name, address, telephone number and so forth has been accumulated, and an array is prepared containing the names, numbered from one to N. A query might be: what is the telephone number for a given name X. To answer this the array would be searched and the index (if any) corresponding to that name determined, whereupon it would be used to report the associated telephone number and so forth. Appropriate provision must be made for the name not being in the list (typically by returning an index value of zero), indeed the question of interest might be only whether X is in the list or not. If the list of names is in sorted order, a binary search will find a given name with far fewer probes than the simple procedure of probing each name in the list, one after the other in a linear search, and the procedure is much simpler than organising a hash table though that would be faster still, typically averaging just over one probe. This applies for a uniform distribution of search items but if it is known that some few items are much more likely to be sought for than the majority then a linear search with the list ordered so that the most popular items are first may do better. The binary search begins by comparing the sought value X to the value in the middle of the list; because the values are sorted, it is clear whether the sought value would belong before or after that middle value, and the search then continues through the correct half in the same way. Only the sign of the difference is inspected: there is no attempt at an interpolation search based on the size of the differences. Your task is to write a program that, given a set numbers of ascending and a key, finding a particular postion in a sorted list.</p><p><strong>输入</strong></p><blockquote><p>The input contains one total numbers（N&lt;=5000000） and a find key,followed by a line containing the integer numbers ascending sets. </p></blockquote><p><strong>输出</strong></p><blockquote><p>if find the key in the sorted list, output containing postion in a sorted list, else ouput -1.</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10 7</p><p>0 1 2 3 4 5 6 7 8 9</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>8</p></blockquote><h3 id="题目解读-4"><a href="#题目解读-4" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>翻译</strong></p><p>二分搜索（折半查找）：是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p><p><strong>特别注意</strong></p><p>数组要开到5000005，写在函数外面，用iostream，c++提交。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">5000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> first=<span class="number">0</span>,last=n,mid;</span><br><span class="line"><span class="keyword">while</span>(first&lt;=last)</span><br><span class="line">&#123;</span><br><span class="line">mid=(first+last)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(num[mid]&gt;key)</span><br><span class="line">last=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[mid]&lt;key)</span><br><span class="line">first=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[mid]==key)</span><br><span class="line"><span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,key;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;key);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=binary(n<span class="number">-1</span>,key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TF在MNIST中的应用</title>
      <link href="/2018/04/18/TF%E5%9C%A8MNIST%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2018/04/18/TF%E5%9C%A8MNIST%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="TensorFlow在MNIST中的应用"><a href="#TensorFlow在MNIST中的应用" class="headerlink" title="TensorFlow在MNIST中的应用"></a>TensorFlow在MNIST中的应用</h1><h2 id="MNIST数据集简介"><a href="#MNIST数据集简介" class="headerlink" title="MNIST数据集简介"></a>MNIST数据集简介</h2><h2 id="常用的函数API-r1-5"><a href="#常用的函数API-r1-5" class="headerlink" title="常用的函数API r1.5"></a>常用的函数API r1.5</h2><p>tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=prediction, labels=y))<br>tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)<br>tf.layers.conv2d(x_image, 32, 5, 1, ‘same’, activation=tf.nn.relu)<br>tf.layers.max_pooling2d(conv1, 2, 2)<br>tf.layers.dense(flat,10)<br>tf.layers.dropout(output)</p>]]></content>
      
      
    </entry>
    
  
  
</search>
