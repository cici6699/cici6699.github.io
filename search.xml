<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/2018/07/24/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/24/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>新手学习SpringMVC，笔记持续更新……</p><a id="more"></a><h1 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h1><h2 id="controller-java"><a href="#controller-java" class="headerlink" title="controller.java"></a>controller.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/page/&#123;name&#125;/&#123;age&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(ModelMap map, @PathVariable(<span class="string">"name"</span>)</span> String name, @<span class="title">PathVariable</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>&#123;</span><br><span class="line">        map.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        map.addAttribute(<span class="string">"age"</span>, age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>RequestMapping中的value代表页面的url路径，{name}和{age}是两个动态参数。</p><p>在getName函数中，需要声明这两个变量的变量类型（IDEA中可以用alt+enter自动补全）。</p><p>返回值是”name”，所以接下来需要创建、编辑name.jsp文件。</p><h2 id="name-jsp"><a href="#name-jsp" class="headerlink" title="name.jsp"></a>name.jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    名字：$&#123;name&#125;&lt;br&gt;</span><br><span class="line">    年龄：$&#123;age&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>通过 <span class="label danger">\${name}</span> 和 <span class="label danger">${age}</span> 来获取主函数中的参数。</p><h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><p>运行项目，在浏览器中打开：localhost:8080/page/xiaoming/12，效果如下：</p><p><img src="https://i.loli.net/2018/07/24/5b56fa475ea95.png" alt="3.png"></p><p>更改一下url中的内容，网页内容也会随之改变：</p><p><img src="https://i.loli.net/2018/07/24/5b56fa475ea95.png" alt="2.png"></p><h1 id="url参数"><a href="#url参数" class="headerlink" title="url参数"></a>url参数</h1><h2 id="controller-java-1"><a href="#controller-java-1" class="headerlink" title="controller.java"></a>controller.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/result"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">result</span><span class="params">(ModelMap map, @RequestParam String name,@RequestParam <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        map.addAttribute(<span class="string">"name"</span>,name);</span><br><span class="line">        map.addAttribute(<span class="string">"age"</span>,age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数中同样传入两个参数：name和age。用的是<span class="label danger">RequestParam</span>的传参方式。</p><p>返回值是result，所以需要新增、编辑一个result.jsp文件。</p><h2 id="result-jsp"><a href="#result-jsp" class="headerlink" title="result.jsp"></a>result.jsp</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page pageEncoding=<span class="string">"utf-8"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    名字：$&#123;name&#125;&lt;br&gt;</span><br><span class="line">    年龄：$&#123;age&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="访问页面-1"><a href="#访问页面-1" class="headerlink" title="访问页面"></a>访问页面</h2><p>运行项目，在浏览器中打开localhost:8080/result，结果如下：</p><p><img src="https://i.loli.net/2018/07/24/5b573dc4b2207.png" alt="4.png"></p><p>显示没有name参数。</p><p>这个是需要从url中传参的，传参方式是在浏览器中输入链接地址：localhost:8080/result?name=xiaoming&amp;age=12，效果如图：</p><p><img src="https://i.loli.net/2018/07/24/5b573e6b06db6.png" alt="5.png"></p><p>这种在url中添加<span class="label danger">?参数=参数名</span>的方式，就是url传参的方法。如果有多个参数，就用<span class="label danger"> &</span>符号连接即可。</p>]]></content>
      
      <categories>
          
          <category> spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于SpringMVC的url-pattern</title>
      <link href="/2018/07/24/%E5%85%B3%E4%BA%8ESpringMVC%E7%9A%84url-pattern/"/>
      <url>/2018/07/24/%E5%85%B3%E4%BA%8ESpringMVC%E7%9A%84url-pattern/</url>
      <content type="html"><![CDATA[<p>记录在学习spring MVC中遇到的一个坑：controller里面定义的内容无法访问，报错404。最后发现是web.xml配置文件里面的一个小错误，在这里做一个记录。</p><a id="more"></a><p>在Intelli IDEA中初始化一个springMVC项目以后，web.xml的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在controller中定义了一个页面跳转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMVCController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printWelcome</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Spring MVC Hello World"</span>);</span><br><span class="line">        model.put(<span class="string">"content"</span>, <span class="string">"This is my first spring mvc web!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>servlet.xml中也定义了文件位置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对应src下的包名，需要自己新建--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.mvc"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 这个配置是配置JSP页面的位置，按照你自己的配置来配 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然而每次只能访问到 localhost:8080,显示的内容是WEB-INF目录下的index.jsp，手动在url中加上“/hello”,就报错404，十分绝望。</p><p>其实是在web.xml中的 <span class="label danger">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span> 出了问题，改为  <span class="label danger">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span> 就可以了！</p><div class="note info">①：&lt;url-pattern&gt;/&lt;/url-pattern&gt;  会匹配到/login这样的路径型url，不会匹配到模式为*.jsp这样的后缀型url<br><br>②：&lt;url-pattern&gt;/*&lt;/url-pattern&gt; 会匹配所有url：路径型的和后缀型的url(包括/login,*.jsp,*.js和*.html等) </div><p>①：地址为 localhost:8080/login , /login 返回login.jsp  访问去Controller下的/login 跳转到相应的视图login.jsp </p><p>②：访问的地址为 localhost:8080/login/ ，/login 返回login.jsp  访问去Controller下的/login,跳转到login.jsp ，然后进过dispatchservlet的时候，由于是/* ，又会以localhost:8088/login/login.jsp 去请求Controller ,那么如果Controller没有 /login/login.jsp 的Mapping映射，则会报404 错误！ </p>]]></content>
      
      <categories>
          
          <category> spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++ SLT学习笔记</title>
      <link href="/2018/07/19/C-SLT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/19/C-SLT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/coder.jpg" width="600" height="300" alt="git" align="center"> </p><p>感觉自己敲了很久的C++，每次做算法题目的时候，依然还停留在C的水平，这次系统的学习一下C++ STL 中的数据结构和容器。</p><a id="more"></a><h1 id="什么是STL？"><a href="#什么是STL？" class="headerlink" title="什么是STL？"></a>什么是STL？</h1><p>STL（Standard Template Library），即标准模板库，是一个具有工业强度的，高效的C++程序库。它被容纳于C++标准程序库（C++ Standard Library）中，是ANSI/ISO C++标准中最新的也是极具革命性的一部分。该库包含了诸多在计算机科学领域里所常用的基本数据结构和基本算法。为广大C++程序员们提供了一个可扩展的应用框架，高度体现了软件的可复用性。 </p><p>STL的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但这种分离确实使得STL变得非常通用。例如，由于STL的sort()函数是完全通用的，你可以用它来操作几乎任何数据集合，包括链表，容器和数组； </p><p>STL另一个重要特性是它不是面向对象的。为了具有足够通用性，STL主要依赖于模板而不是封装，继承和虚函数（多态性）——OOP的三个要素。你在STL中找不到任何明显的类继承关系。这好像是一种倒退，但这正好是使得STL的组件具有广泛通用性的底层特征。另外，由于STL是基于模板，内联函数的使用使得生成的代码短小高效；</p><p> 从逻辑层次来看，在STL中体现了泛型化程序设计的思想，引入了诸多新的名词，比如像需求（requirements），概念（concept），模型（model），容器（container），算法（algorithmn），迭代子（iterator）等。与OOP（object-oriented programming）中的多态（polymorphism）一样，泛型也是一种软件的复用技术；从实现层次看，整个STL是以一种类型参数化的方式实现的，这种方式基于一个在早先C++标准中没有出现的语言特性–模板（template）。 </p><div class="note info">总之，C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。</div><p>C++ 标准模板库的核心包括以下三个组件：</p><table><thead><tr><th style="text-align:left">组件</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">容器（Containers）</td><td style="text-align:left">容器是用来管理某一类对象的集合。C++ 提供了各种不同类型的容器，比如 deque、list、vector、map 等。</td></tr><tr><td style="text-align:left">算法（Algorithms）</td><td style="text-align:left">算法作用于容器。它们提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作。</td></tr><tr><td style="text-align:left">迭代器（iterators）</td><td style="text-align:left">迭代器用于遍历对象集合的元素。这些集合可能是容器，也可能是容器的子集。</td></tr></tbody></table><p>这三个组件都带有丰富的预定义函数，帮助我们通过简单的方式处理复杂的任务。 </p><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><div class="note warning">C++ 标准库中的string表示可变长的字符串，它在头文件string里面。 比C语言中的char用起来要方便很多！</div><p>常用函数汇总：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">getline(<span class="built_in">cin</span>,s) <span class="comment">//读取一行字符串赋给s，（可以带空格），返回字符串s</span></span><br><span class="line">s.empty()      <span class="comment">//s为空返回true，否则返回false</span></span><br><span class="line">s.size()       <span class="comment">//返回s中字符的个数</span></span><br><span class="line">s[n]           <span class="comment">//返回s中第n个字符的值，位置从0开始计数</span></span><br><span class="line">s1 + s2        <span class="comment">//返回s1和s2连接后的结果</span></span><br><span class="line">s1 = s2        <span class="comment">//用s2的副本代替s1中原来的字符</span></span><br><span class="line">s1 == s2       <span class="comment">//判断s1和s2是否完全相等（对大小写敏感）</span></span><br><span class="line">s1 != s2       <span class="comment">//不相等</span></span><br><span class="line">&lt;,&lt;=,&gt;,&gt;=      <span class="comment">//利用字符在字典中的顺序进行比较，且对字母的大小写敏感</span></span><br><span class="line">str.find(<span class="string">"ab"</span>);  <span class="comment">//返回字符串ab在str的位置</span></span><br><span class="line">str.substr(<span class="number">3</span>);  <span class="comment">//返回str[3]及以后的子串</span></span><br><span class="line">str.substr(<span class="number">2</span>,<span class="number">4</span>);  <span class="comment">//返回str[2]~str[2+(4-1)]子串(即从[2]开始4个字符组成的字符串)</span></span><br><span class="line">str.replace(<span class="number">2</span>, <span class="number">4</span>, <span class="string">"ab"</span>);  <span class="comment">//返回把 [2]~[2+(4-1)] 的内容替换为 "ab" 后的新字符串</span></span><br><span class="line">str.replace(<span class="number">2</span>, <span class="number">4</span>, <span class="string">"abcd"</span>, <span class="number">3</span>);  <span class="comment">//返回把 [2]~[2+(4-1)] 的内容替换为 "abcd" 的前3个字符后的新字符串</span></span><br><span class="line">str.insert(<span class="number">2</span>, <span class="string">"ab"</span>);  <span class="comment">//从 [2] 位置开始添加字符串 "ab"，并返回形成的新字符串</span></span><br><span class="line">str.insert(<span class="number">2</span>, <span class="string">"abcd"</span>, <span class="number">3</span>);  <span class="comment">//从 [2] 位置开始添加字符串 "abcd" 的前 3 个字符，并返回形成的新字符串</span></span><br><span class="line">str.insert(<span class="number">2</span>, <span class="string">"abcd"</span>, <span class="number">1</span>, <span class="number">3</span>);  <span class="comment">//从 [2] 位置开始添加字符串 "abcd" 的前 [2]~[2+(3-1)] 个字符，并返回形成的新字符串</span></span><br><span class="line">str.erase(<span class="number">3</span>);  <span class="comment">//删除 [3] 及以后的字符，并返回新字符串</span></span><br><span class="line">str.erase(<span class="number">3</span>, <span class="number">5</span>);  <span class="comment">//删除从 [3] 开始的 5 个字符，并返回新字符串</span></span><br><span class="line">str1.swap(str2);  <span class="comment">//把 str1 与 str2 交换</span></span><br><span class="line">transform(str.begin(),str.end(),str.begin(),::<span class="built_in">tolower</span>);  <span class="comment">//把字符串全部转换为小写字母</span></span><br><span class="line">transfrom(str.begin(),str.end(),str.begin(),::<span class="built_in">toupper</span>);  <span class="comment">//把字符串全部转换为大写字母</span></span><br></pre></td></tr></table></figure><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>需要引入头文件&lt; string &gt; ,既然是C++，就还要引入头文件&lt; iostream &gt; 和using namespace std;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;<span class="comment">//声明一个string 对象</span></span><br><span class="line"><span class="built_in">string</span> ss[<span class="number">10</span>];<span class="comment">//声明一个string对象的数组</span></span><br></pre></td></tr></table></figure><h2 id="string的io操作"><a href="#string的io操作" class="headerlink" title="string的io操作"></a>string的io操作</h2><p>使用cin读入字符串时，遇到空白就停止读取。也就是说一句话只能读到空格前面的内容。怎么读入一个句子呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str；</span><br><span class="line">getline(<span class="built_in">cin</span>,str);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="string的比较（字典顺序）"><a href="#string的比较（字典顺序）" class="headerlink" title="string的比较（字典顺序）"></a>string的比较（字典顺序）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> PPAP[] = &#123;<span class="string">"I"</span>, <span class="string">"have"</span>, <span class="string">"a"</span>, <span class="string">"pen"</span>, <span class="string">"an"</span>, <span class="string">"apple"</span>, <span class="string">"um"</span>, <span class="string">"apple-pen"</span>&#125;;</span><br><span class="line">sort(PPAP, PPAP + <span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; PPAP[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">I</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">an</span></span><br><span class="line"><span class="comment">apple</span></span><br><span class="line"><span class="comment">apple-pen</span></span><br><span class="line"><span class="comment">have</span></span><br><span class="line"><span class="comment">pen</span></span><br><span class="line"><span class="comment">um</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h2><p>在C语言中我都是用下标或者指针来访问数组元素，而在C++里，有个新奇的东西叫做迭代器iterator，我们可以使用它来访问容器元素。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"hello world"</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span>::iterator it=str.begin();it!=str.end();it++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">h</span></span><br><span class="line"><span class="comment">e</span></span><br><span class="line"><span class="comment">l</span></span><br><span class="line"><span class="comment">l</span></span><br><span class="line"><span class="comment">o</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">w</span></span><br><span class="line"><span class="comment">o</span></span><br><span class="line"><span class="comment">r</span></span><br><span class="line"><span class="comment">l</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="查找子字符串问题"><a href="#查找子字符串问题" class="headerlink" title="查找子字符串问题"></a>查找子字符串问题</h2><p>string提供了一系列find查找子字符串的函数。最好用的还是find( )函数，返回在字符串中第一次出现的位置，位置变量的定义方式是 string::size_type ,如果没有找到，函数的返回值是string::npos，对应的位置变量是一个很大的常数。 </p><p>如果用int 定义位置变量，也可以正常使用。如果没有找到，用int定义的位置变量为-1。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span>::size_type position;<span class="comment">//教程里面都是这样定义变量，但是我试过用int也可以正常使用</span></span><br><span class="line">    <span class="comment">//int position;</span></span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    position = a.find(b);<span class="comment">//在a中查找b</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;position&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.find(b)==<span class="built_in">string</span>::npos)<span class="comment">//没有找到，返回string::npos</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"不存在！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个字母转换的函数，把所有的大写字母都转换为小写字母：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform(str.begin(),str.end(),str.begin(),::<span class="built_in">tolower</span>);</span><br></pre></td></tr></table></figure><p>把所有字母转换成大写字母：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform(s.begin(), s.end(), s.begin(), ::<span class="built_in">toupper</span>);</span><br></pre></td></tr></table></figure><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><div class="note warning">C++ STL中的verctor好比是C语言中的数组，但是vector又具有数组没有的一些高级功能。与数组相比，vector就是一个可以不用再初始化就必须制定大小的边长数组，当然了，它还有许多高级功能。</div><p>要想用vector首先得包含头文件vector。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>如果vector的元素类型是int，默认初始化为0；如果vector元素类型为string，则默认初始化为空字符串。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1(<span class="number">10</span>, <span class="number">12</span>); <span class="comment">//10个元素，每个元素值都是12</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2(<span class="number">10</span>); <span class="comment">//10个元素，每个元素值都是0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3; <span class="comment">//0个元素</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v4(<span class="number">10</span>, <span class="string">"hi"</span>); <span class="comment">//10个元素，每个元素值都是“hi”</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v5&#123;<span class="number">10</span>, <span class="string">"hi"</span>&#125;; <span class="comment">//10个元素，每个元素值都是“hi”</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v6&#123;<span class="number">10</span>&#125;; <span class="comment">//10个元素，每个元素值都是“”</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;;  <span class="comment">//注意空格。这里相当于二维数组int a[n][n];</span></span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p>使用push_back加入元素，并且这个元素是被加在数组尾部的。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    v.push_back(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：只能对已存在的元素进行赋值或者修改操作，如果是要加入新元素，务必使用push_back。push_back的作用有两个：告诉编译器为新元素开辟空间、将新元素存入新空间里。</p><p>比如下面的代码是错误的，但是编译器不会报错，就像是数组越界：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">vec[<span class="number">0</span>] = <span class="number">1</span>;  <span class="comment">//错误！</span></span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v.empty();  <span class="comment">//v为空返回true</span></span><br><span class="line">v.size();  <span class="comment">//v中元素个数</span></span><br><span class="line">v[n];  <span class="comment">//返回v中位置为n的元素</span></span><br><span class="line">v1 =  v2;  <span class="comment">//把v1中的元素替换为v2中元素的副本。</span></span><br><span class="line">v.resize(n);  <span class="comment">//重新调整vector容量大小为n</span></span><br><span class="line">v.push_back(t);  <span class="comment">//将t插入到v的末尾</span></span><br><span class="line">v.pop_back(t);  <span class="comment">//删除vector尾部的对象</span></span><br><span class="line">v.erase();  <span class="comment">//删除一个或多个元素</span></span><br><span class="line">v.clear();  <span class="comment">//删除所有的元素</span></span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>使用迭代器来访问元素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v6 = &#123; <span class="string">"hi"</span>,<span class="string">"my"</span>,<span class="string">"name"</span>,<span class="string">"is"</span>,<span class="string">"lee"</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator iter = v6.begin(); iter != v6.end(); iter++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">hi</span></span><br><span class="line"><span class="comment">my</span></span><br><span class="line"><span class="comment">name</span></span><br><span class="line"><span class="comment">is</span></span><br><span class="line"><span class="comment">lee</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>其实set的大部分操作是与vector类似的，不过set不支持随机访问，必须要使用迭代器去访问。由于set放入一个元素就会调整这个元素的位置，把它放到合适的位置，所以set中只有一个insert插入操作。</p><div class="note warning"><p>set输出的集合中的元素是按字母大小顺序排列的，而且每个值都不重复。如果cin重复值，并不会真正存入。</p></div><p>输出时，必须用迭代器遍历输出每一个元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; strset;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator iter;</span><br><span class="line">    strset.insert(<span class="string">"apple"</span>);</span><br><span class="line">    strset.insert(<span class="string">"orange"</span>);</span><br><span class="line">    strset.insert(<span class="string">"grapes"</span>);</span><br><span class="line">    strset.insert(<span class="string">"grapes"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(iter=strset.begin();iter!=strset.end();iter++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*iter&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><div class="note warning">list就是链表，list是一个双向链表，双向链表的优点是插入和删除元素都比较快捷，缺点是不能随机访问元素。</div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>list的排序方式和algorithm的略有不同：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.sort();</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator it=a.begin();it!=a.end();it++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IntelliJ IDEA 搭建Spring MVC环境</title>
      <link href="/2018/07/17/IntelliJ-IDEA-%E6%90%AD%E5%BB%BASpring-MVC%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/07/17/IntelliJ-IDEA-%E6%90%AD%E5%BB%BASpring-MVC%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/springmvc.jpg" width="450" height="200" alt="git" align="center"> </p><p>记录在IntelliJ IDEA中创建Spring MVC的web项目的全过程，与Maven项目的方法不同，这个需要手动导入jar包。</p><a id="more"></a><div class="note info"><p>这种普通的方法比Maven的使用要稍微简单一些，但是熟练之后，还是Maven比较方便。</p></div><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><p>File –&gt; New –&gt; Project，最上面是填java JDK安装路径的，如果以前使用Idea编辑器，就会自动帮你选上。选择Spring MVC，下面有两个选项可以选，“use library”就是需要选择本地的依赖包，而“download”就是在生成项目的时候就下载Spring MVC的包，如果是初次创建Spring MVC的项目，就选择“download”。</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f83350f2.png" alt="1.png"></p><p>填写项目名称和项目存储的位置：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f832aa54.png" alt="2.png"></p><p>点击Finsh，项目就创建完成了。</p><p>创建好后的项目目录如下图，lib中已经自动导入了java的包和Spring MVC的包：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f8320f9f.png" alt="3.png"></p><h1 id="修改代码文件"><a href="#修改代码文件" class="headerlink" title="修改代码文件"></a>修改代码文件</h1><h2 id="修改index-jsp文件"><a href="#修改index-jsp文件" class="headerlink" title="修改index.jsp文件"></a>修改index.jsp文件</h2><p>index.jsp文件就是等会运行时，显示在浏览器中的界面，初始代码如下：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82d0c9f.png" alt="4.png"></p><p>上面一部分是注释，包含项目的基本信息，中间是空的，可以把&lt; title &gt; 中间改为你想要的文字，例如“SpringMVC”，&lt; body &gt;中间的内容就是正文内容，也可以随意添加，例如改为“Hello World!”,最后的代码如下图：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82d3982.png" alt="5.png"></p><h2 id="新增一个控制器HelloMVCController-java"><a href="#新增一个控制器HelloMVCController-java" class="headerlink" title="新增一个控制器HelloMVCController.java"></a>新增一个控制器HelloMVCController.java</h2><p>首先在src目录下新建一个包，我这里把它命名为  com.spring.mvc ：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82e0d0e.png" alt="6.png"></p><p>然后在这个包下，新增一个类，命名为HelloMVCController ：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82e32fe.png" alt="7.png"></p><p>文件结构如下：</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f82af0d7.png" alt="8.png"></p><p>编辑HelloMVCController.java，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloMVCController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/hello"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printWelcome</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>, <span class="string">"Spring 3 MVC Hello World"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改-dispatcher-servlet-xml-文件"><a href="#修改-dispatcher-servlet-xml-文件" class="headerlink" title="修改 dispatcher-servlet.xml 文件"></a>修改 dispatcher-servlet.xml 文件</h2><p>dispatcher-servlet.xml文件在web/WEB-INF文件夹下，打开替换为一下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对应src下的报名，需要自己新建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.mvc"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个配置是配置JSP页面的位置，按照你自己的配置来配 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/WEB-INF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>.jsp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>在上方菜单栏Run-&gt;Edit Configurations ：</p><p><img src="https://i.loli.net/2018/07/17/5b4df70795b66.png" alt="10.png"></p><p>点击左上角的”+”号，选择Tomcat Server，(如果没有请选择最下方的33 items more，找到Tomcat Server)，再选择Local，点击 Application server 右边的 Configure，导入Tomcat 目录： </p><p><img src="https://i.loli.net/2018/07/18/5b4e9f832c589.png" alt="9.png"></p><p>切换到Deployment标签，再点击右边的”+”号，添加一个Artifact.</p><p>选择第二个：war exploded，点击OK，这样，该项目就已经部署到了Tomcat中.</p><p><img src="https://i.loli.net/2018/07/18/5b4e9f830135a.png" alt="10.png"></p><p>点击OK，这时整个Tomcat就配置好了。点击右上角的运行符号：</p><p><img src="https://i.loli.net/2018/07/17/5b4df8f5a8b17.png" alt="13.png"></p><p>这时，发现Artifact报错了：</p><p><img src="https://i.loli.net/2018/07/18/5b4ea0283afc5.png" alt="11.png"></p><p>先暂停运行：</p><p><img src="https://i.loli.net/2018/07/18/5b4ea02838d84.png" alt="12.png"></p><h2 id="修正错误"><a href="#修正错误" class="headerlink" title="修正错误"></a>修正错误</h2><p>打开 Project Structure：</p><p><img src="https://i.loli.net/2018/07/18/5b4ea02817e0b.png" alt="13.png"></p><p>选择 Artifacts–&gt;Output Layout ，看到右边有两个包，点击右键，选择第一个Put into/WEB-INF/lib，两个包都要这样操作。</p><p><img src="https://i.loli.net/2018/07/18/5b4ea02857001.png" alt="14.png"></p><p>完成后，应该是这样的页面：</p><p><img src="https://i.loli.net/2018/07/18/5b4ea02866328.png" alt="15.png"></p><p>点击OK，再次运行，就可以成功部署了，浏览器会自动打开并跳转到 localhost:8080，内容就是index.jsp中所写的。</p><p><img src="https://i.loli.net/2018/07/18/5b4ea027ecd3b.png" alt="16.png"></p><p>大功告成！</p>]]></content>
      
      <categories>
          
          <category> spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> maven </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IntelliJ IDEA创建Spring MVC的Maven项目</title>
      <link href="/2018/07/17/MVC%E7%9A%84Maven%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/07/17/MVC%E7%9A%84Maven%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/springmvc.jpg" width="450" height="200" alt="git" align="center"> </p><p>记录在IntelliJ IDEA中创建Spring MVC的Maven项目。</p><a id="more"></a><h1 id="创建Maven-Web项目"><a href="#创建Maven-Web项目" class="headerlink" title="创建Maven Web项目"></a>创建Maven Web项目</h1><p>菜单File-&gt;New Project可进入如图界面，首先选择左边栏Maven，再配置JDK的路径(如果之前添加了JDK的话会自动填充，如未添加点击旁边的New将JDK目录导入即可)。勾选”Create from archetype”，然后选中maven-archetype-webapp，点Next，进入如下界面： </p><p><img src="https://i.loli.net/2018/07/17/5b4dbd2a0434f.png" width="800" height="300" alt="git" align="center"></p><p>点击next，需要输入GroupID，ArtifactID，Version是自带的版本，暂时不用改。</p><p><img src="https://i.loli.net/2018/07/17/5b4dbdc983934.png" width="800" height="300" alt="git" align="center"></p><p>点击next，填写Maven的配置，配置文件和本地仓库都可以不填。</p><p><img src="https://i.loli.net/2018/07/17/5b4dbe1016978.png" alt="mvc3.png"></p><p>点击next，填写项目名称和项目保存位置，点击Finsh。</p><p>maven会在后台生成web项目，这需要等待一定的时间，视网络环境而定。</p><p>选择右边红框的Enable-Auto- Import，这样就可以在每次修改pom.xml后，自动的下载并导入jar包。</p><p><img src="https://i.loli.net/2018/07/17/5b4dbf4f493c1.png" alt="mvc4.png"></p><p>下图展示了初始的文件结构：</p><p><img src="https://i.loli.net/2018/07/17/5b4ded4c41b67.png" alt="mvc5.png"></p><p>我们可以看到，目录结构并不是严格的maven格式,因为少了java源码文件夹 。</p><p>首先在main文件夹下创建一个文件夹，名称为java ：</p><p><img src="https://i.loli.net/2018/07/17/5b4dee2936a9c.png" alt="1.png"></p><p>将java文件夹标识为Source Root，之后文件夹会变成蓝色，就表明设置成功了 ：</p><p><img src="https://i.loli.net/2018/07/17/5b4dee7088ece.png" alt="2.png"></p><p>再在main文件夹下创建一个文件夹，名称为recources ，将recources 文件夹标识为recources Root，文件图标也会更换：</p><p><img src="https://i.loli.net/2018/07/17/5b4def7425bb4.png" alt="3.png"></p><h1 id="Maven自动导入jar包"><a href="#Maven自动导入jar包" class="headerlink" title="Maven自动导入jar包"></a>Maven自动导入jar包</h1><p>现在已经创建好了一个Maven项目，但是还需要给Maven添加依赖。</p><p>Maven所做的工作就是自动把你需要的jar包下载到本地，然后关联到项目中来。maven的所有jar包都是保存在几个中央仓库里面的，其中一个最常用的是<a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository</a>，即，你需要什么jar包，它就会从仓库中拿给你。那么如何告诉maven需要什么jar包呢？我们看看工程目录，能找到一个pom.xml文件（这个文件在刚创建好项目时就已经展现在了大家面前），maven就是靠它来定义需求的，初始时是这样子的： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cici<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_mvc_test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven_mvc_test Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven_mvc_test<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，这里面已经自动生成了我们之前定义的本项目的groupId等信息，这些信息是该项目的标识，我们不要去改动它们。重点看 &lt;  dependencies &gt;标签，翻译过来是”依赖”的意思，也就是说把对每个包的需求都称为一个依赖&lt;  depedency &gt;，定义在&lt;  dependencies &gt;中。在每个&lt;  depedency &gt;中，你需要提供的是所需jar包的groupId、artifactId、version(g,a,v)这三个必要信息(坐标)。比如上面我们看到引入可一个junit包，格式如下： </p><p><img src="https://i.loli.net/2018/07/17/5b4df0d924552.png" alt="4.png"></p><p>Junit是单元测试包，提供了三个基本信息，第4个scope对其他包来说是非必需的。所有jar包的引入都要满足这个格式。</p><p>现在我们需要把Spring MVC的包加入依赖项，怎么查看这些jar包的3个信息呢？这就需要查阅仓库，打开<a href="http://mvnrepository.com/" target="_blank" rel="noopener">Maven Repository</a>，搜索spring-webmvc，进入如下界面： </p><p><img src="https://i.loli.net/2018/07/17/5b4df19fa025e.png" alt="5.png"></p><p>点击打开后，可以看到很多版本，选择一个比较新的版本：</p><p><img src="https://i.loli.net/2018/07/17/5b4df1e39d425.png" alt="6.png"></p><p>很方便，仓库里面已经写好了Maven的依赖代码，直接复制就可以了。</p><p><img src="https://i.loli.net/2018/07/17/5b4df23327700.png" alt="7.png"></p><p>现在，把这段代码复制到pox.xml中的&lt; dependencies &gt;中： </p><p><img src="https://i.loli.net/2018/07/17/5b4df2b016d9d.png" alt="8.png"></p><p>这时，Maven就会自动把对应的jar包移植到本地项目里：</p><p><img src="https://i.loli.net/2018/07/17/5b4df35a0ef00.png" alt="9.png"></p><p>可以发现，虽然我们只写了一个依赖，但是会把与它密切相关的jar包同时导入进来。 自此演示一个简单的maven项目所需的jar包其实已经够了~ </p><h1 id="SpringMVC框架设置"><a href="#SpringMVC框架设置" class="headerlink" title="SpringMVC框架设置"></a>SpringMVC框架设置</h1><p>现在进行项目的配置。</p><h2 id="web-xml-配置"><a href="#web-xml-配置" class="headerlink" title="web.xml 配置"></a>web.xml 配置</h2><p>默认代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在需要创建一个创建Spring MVC的中央控制器 ，还有一个servlet名为mvc-dispatcher(名称可修改)，用于拦截请求（url-pattern为*.do），并交由Spring MVC的后台控制器来处理。这一项配置是必须的。为了能够处理中文的post请求，再配置一个encodingFilter，以避免post请求中文出现乱码情况，最终web.xml的完整代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>winner-test Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc-dispatcher.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mvc-dispatcher-xml配置"><a href="#mvc-dispatcher-xml配置" class="headerlink" title="mvc-dispatcher.xml配置"></a>mvc-dispatcher.xml配置</h2><p>在resources文件夹下创建mvc-dispatcher.xml ,代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置包扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.winner.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MainController配置"><a href="#MainController配置" class="headerlink" title="MainController配置"></a>MainController配置</h2><p>在java文件夹下创建一个class，名为MainController，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test.do"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><p>–@Controller注解：采用注解的方式，可以明确地定义该类为处理请求的Controller类；<br><br>–@RequestMapping()注解：用于定义一个请求映射，value为请求的url；<br><br>–return “index”：处理完该请求后返回的逻辑视图。 </p></div><h1 id="配置Tomcat来运行项目"><a href="#配置Tomcat来运行项目" class="headerlink" title="配置Tomcat来运行项目"></a>配置Tomcat来运行项目</h1><p>在上方菜单栏Run-&gt;Edit Configurations ：</p><p><img src="https://i.loli.net/2018/07/17/5b4df70795b66.png" alt="10.png"></p><p>点击左上角的”+”号，选择Tomcat Server，(如果没有请选择最下方的33 items more，找到Tomcat Server)，再选择Local，点击 Application server 右边的 Configure，导入Tomcat 目录： </p><p><img src="https://i.loli.net/2018/07/17/5b4df83046d3c.png" alt="11.png"></p><p>切换到Deployment标签，再点击右边的”+”号，添加一个Artifact.</p><p>选择第二个：war exploded，点击OK，这样，该项目就已经部署到了Tomcat中.</p><p><img src="https://i.loli.net/2018/07/17/5b4df869b5651.png" alt="12.png"></p><p>点击OK，这时整个Tomcat就配置好了。点击右上角的运行符号：</p><p><img src="https://i.loli.net/2018/07/17/5b4df8f5a8b17.png" alt="13.png"></p><p>这时，浏览器会自动打开，输出文字：</p><p><img src="https://i.loli.net/2018/07/17/5b4df983c634b.png" alt="14.png"></p><p>这样就算成功完成了最基本的设置。</p><p>这段话是写在哪里的呢？在index.jsp里面！</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">    Hello World!</span><br><span class="line">    Hello Spring MVC!</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> maven </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCF历届真题</title>
      <link href="/2018/07/16/CCF%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98/"/>
      <url>/2018/07/16/CCF%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/coder.jpg" width="600" height="300" alt="git" align="center"> </p><p>CCF历届真题汇总笔记，持续更新中……</p><a id="more"></a><p>[TOC]</p><h1 id="201312-1出现次数最多的数"><a href="#201312-1出现次数最多的数" class="headerlink" title="201312-1出现次数最多的数"></a>201312-1出现次数最多的数</h1><p><strong>问题描述</strong></p><p>　　给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。</p><p><strong>输入格式</strong></p><p>　　输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。<br>　　输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。</p><p><strong>样例输入</strong></p><p>​    6<br>    10 1 10 20 30 20</p><p><strong>样例输出</strong></p><p>​    10</p><div class="note success">很简单，直接用一个数组a[] 存放所有的数，用数组b[] 存放每个元素出现的次数，b数组的下标就是a[i]的值，然后找出b数组中最大数的下标就可以了。需要注意的是<span class="label danger">数据范围是1 ≤ n ≤ 1000 ，1 ≤ si ≤ 10000，所以 a数组的范围可以是1000，而 b数组的范围必须是10000！</span></div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>],b[<span class="number">10005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        b[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max=b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">10000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i]&gt;max)</span><br><span class="line">        &#123;</span><br><span class="line">            max=b[i];</span><br><span class="line">            flag=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;flag&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201312-2-ISBN号码"><a href="#201312-2-ISBN号码" class="headerlink" title="201312-2 ISBN号码"></a>201312-2 ISBN号码</h1><p><strong>问题描述</strong></p><p>　　每一本正式出版的图书都有一个ISBN号码与之对应，ISBN码包括9位数字、1位识别码和3位分隔        符，其规定格式如“x-xxx-xxxxx-x”，其中符号“-”是分隔符（键盘上的减号），最后一位是识别码，例如0-670-82162-4就是一个标准的ISBN码。ISBN码的首位数字表示书籍的出版语言，例如0代表英语；第一个分隔符“-”之后的三位数字代表出版社，例如670代表维京出版社；第二个分隔之后的五位数字代表该书在出版社的编号；最后一位为识别码。<br>　　识别码的计算方法如下：<br>　　首位数字乘以1加上次位数字乘以2……以此类推，用所得的结果mod 11，所得的余数即为识别码，如果余数为10，则识别码为大写字母X。例如ISBN号码0-670-82162-4中的识别码4是这样得到的：对067082162这9个数字，从左至右，分别乘以1，2，…，9，再求和，即0×1+6×2+……+2×9=158，然后取158 mod 11的结果4作为识别码。<br>　　编写程序判断输入的ISBN号码中识别码是否正确，如果正确，则仅输出“Right”；如果错误，则输出是正确的ISBN号码。</p><p><strong>输入格式</strong></p><p>　　输入只有一行，是一个字符序列，表示一本书的ISBN号码（保证输入符合ISBN号码的格式要求）。</p><p><strong>输出格式</strong></p><p>　　输出一行，假如输入的ISBN号码的识别码正确，那么输出“Right”，否则，按照规定的格式，输出正确的ISBN号码（包括分隔符“-”）。</p><p><strong>样例输入</strong></p><p>​    0-670-82162-4</p><p><strong>样例输出</strong></p><p>​    Right</p><p><strong>样例输入</strong></p><p>​    0-670-82162-0</p><p><strong>样例输出</strong></p><p>​    0-670-82162-4</p><div class="note success">定位到每一个数字，进行运算模11进行比较判断。不用纠结循环取数，判断是否是“-”的问题，<span class="label danger">直接一个数一个数的取，因为数据格式是固定的。</span><br><br>运算完后的总和模11之后，要转换为字符型变量，与给定的数字进行比较。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> i,j,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    a[<span class="number">0</span>]=s[<span class="number">0</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">1</span>]=s[<span class="number">2</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">2</span>]=s[<span class="number">3</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">3</span>]=s[<span class="number">4</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">4</span>]=s[<span class="number">6</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">5</span>]=s[<span class="number">7</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">6</span>]=s[<span class="number">8</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">7</span>]=s[<span class="number">9</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">8</span>]=s[<span class="number">10</span>]-<span class="string">'0'</span>;</span><br><span class="line">    a[<span class="number">9</span>]=s[<span class="number">12</span>]-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">1</span>;i&lt;<span class="number">9</span>;i++,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=a[i]*j;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=sum%<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">char</span> c=sum==<span class="number">10</span>?<span class="string">'X'</span>:sum+<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span>(s[<span class="number">12</span>]==c)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Right"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s[<span class="number">12</span>]=c;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201312-3-最大的矩形"><a href="#201312-3-最大的矩形" class="headerlink" title="201312-3 最大的矩形"></a>201312-3 最大的矩形</h1><p><strong>问题描述</strong></p><p>　　在横轴上放了n个相邻的矩形，每个矩形的宽度是1，而第i（1 ≤ i ≤ n）个矩形的高度是hi。这n个矩形构成了一个直方图。例如，下图中六个矩形的高度就分别是3, 1, 6, 5, 2, 3。<br><img src="http://118.190.20.162/RequireFile.do?fid=Fmhrjgtb" alt="img"><br>　　请找出能放在给定直方图里面积最大的矩形，它的边要与坐标轴平行。对于上面给出的例子，最大矩形如下图所示的阴影部分，面积是10。<br><img src="http://118.190.20.162/RequireFile.do?fid=gNe4DHhD" alt="img"></p><p><strong>输入格式</strong></p><p>　　第一行包含一个整数n，即矩形的数量(1 ≤ n ≤ 1000)。<br>　　第二行包含n 个整数h1, h2, … , hn，相邻的数之间由空格分隔。(1 ≤ hi ≤ 10000)。hi是第i个矩形的高度。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，即给定直方图内的最大矩形的面积。</p><p><strong>样例输入</strong></p><p>​    6<br>    3 1 6 5 2 3</p><p><strong>样例输出</strong></p><p>​    10</p><div class="note success"><p>一开始感觉是动态规划问题，看了答案之后发现其实就是暴力法，遍历每一条条形，如果它后面出现高度小于它的条形，就找到当前这个条形所能得到的最大矩形面积。然后每次遍历时都检验这个面积是不是最大的面积。</p></div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,a[<span class="number">1005</span>],ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> h=a[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;h)</span><br><span class="line">                h=a[j];</span><br><span class="line">            <span class="keyword">int</span> s=(j-i+<span class="number">1</span>)*h;</span><br><span class="line">            <span class="keyword">if</span>(s&gt;ans)   ans=s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201403-1-相反数"><a href="#201403-1-相反数" class="headerlink" title="201403-1 相反数"></a>201403-1 相反数</h1><p><strong>问题描述</strong>　　</p><p>​    有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。</p><p><strong>输入格式</strong></p><p>​    第一行包含一个正整数 N。(1 ≤ N ≤ 500)。 　　</p><p>​    第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。</p><p><strong>输出格式</strong></p><p>​    只输出一个整数,即这 N 个数中包含多少对相反数。</p><p><strong>样例输入</strong></p><p>5 1 2 3 -1 -2</p><p><strong>样例输出</strong></p><p>2  </p><div class="note success"><p>题目中很重要的一句话是，有 N 个非零且各不相同的整数 ，所以不用考虑有多组相同的相反数，也没有0干扰判断。直接双重循环，如果2个数相加等于0，就计数，最后计数除以2就是相反数的对数。</p></div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,sum=<span class="number">0</span>,a[<span class="number">505</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]+a[j]==<span class="number">0</span>)    sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201403-2-窗口"><a href="#201403-2-窗口" class="headerlink" title="201403-2 窗口"></a>201403-2 窗口</h1><p><strong>问题描述</strong></p><p>　　在某图形操作系统中,有 N 个窗口,每个窗口都是一个两边与坐标轴分别平行的矩形区域。窗口的边界上的点也属于该窗口。窗口之间有层次的区别,在多于一个窗口重叠的区域里,只会显示位于顶层的窗口里的内容。<br>　　当你点击屏幕上一个点的时候,你就选择了处于被点击位置的最顶层窗口,并且这个窗口就会被移到所有窗口的最顶层,而剩余的窗口的层次顺序不变。如果你点击的位置不属于任何窗口,则系统会忽略你这次点击。<br>　　现在我们希望你写一个程序模拟点击窗口的过程。</p><p><strong>输入格式</strong></p><p>　　输入的第一行有两个正整数,即 N 和 M。(1 ≤ N ≤ 10,1 ≤ M ≤ 10)<br>　　接下来 N 行按照从最下层到最顶层的顺序给出 N 个窗口的位置。 每行包含四个非负整数 x1, y1, x2, y2,表示该窗口的一对顶点坐标分别为 (x1, y1) 和 (x2, y2)。保证 x1 &lt; x2,y1 2。<br>　　接下来 M 行每行包含两个非负整数 x, y,表示一次鼠标点击的坐标。<br>　　题目中涉及到的所有点和矩形的顶点的 x, y 坐标分别不超过 2559 和　　1439。</p><p><strong>输出格式</strong></p><p>　　输出包括 M 行,每一行表示一次鼠标点击的结果。如果该次鼠标点击选择了一个窗口,则输出这个窗口的编号(窗口按照输入中的顺序从 1 编号到 N);如果没有,则输出”IGNORED”(不含双引号)。</p><p><strong>样例输入</strong></p><p>3 4<br>0 0 4 4<br>1 1 5 5<br>2 2 6 6<br>1 1<br>0 0<br>4 4<br>0 5</p><p><strong>样例输出</strong></p><p>2<br>1<br>1<br>IGNORED</p><p><strong>样例说明</strong></p><p>　　第一次点击的位置同时属于第 1 和第 2 个窗口,但是由于第 2 个窗口在上面,它被选择并且被置于顶层。<br>　　第二次点击的位置只属于第 1 个窗口,因此该次点击选择了此窗口并将其置于顶层。现在的三个窗口的层次关系与初始状态恰好相反了。<br>　　第三次点击的位置同时属于三个窗口的范围,但是由于现在第 1 个窗口处于顶层,它被选择。<br>　　最后点击的 (0, 5) 不属于任何窗口。</p><div class="note success"><p>CCF的第2道题很喜欢出这类型的题目，首先第一个难点就是怎么存每一个窗口的坐标和次序，答案就是<span class="label danger">用结构体进行存储</span>。第二个难点是查找点击的坐标属于哪个窗口并重新排序。</p></div>  <p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1;</span><br><span class="line">    <span class="keyword">int</span> x2;</span><br><span class="line">    <span class="keyword">int</span> y1;</span><br><span class="line">    <span class="keyword">int</span> y2;</span><br><span class="line">    <span class="keyword">int</span> order;</span><br><span class="line">&#125;a[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j,k,x,y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].order=i;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i].x1&gt;&gt;a[i].y1&gt;&gt;a[i].x2&gt;&gt;a[i].y2;</span><br><span class="line">    &#125;</span><br><span class="line">    Windows b;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">for</span>(j=n;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;=a[j].x1 &amp;&amp; x&lt;=a[j].x2 &amp;&amp; y&gt;=a[j].y1 &amp;&amp; y&lt;=a[j].y2)</span><br><span class="line">            &#123;</span><br><span class="line">                b=a[j];</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a[j].order&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">for</span>(k=j;k&lt;n;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[k]=a[k+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                a[n]=b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"IGNORED"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201409-1-相邻数对"><a href="#201409-1-相邻数对" class="headerlink" title="201409-1 相邻数对"></a>201409-1 相邻数对</h1><p><strong>问题描述</strong></p><p>　　给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示给定整数的个数。<br>　　第二行包含所给定的n个整数。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示值正好相差1的数对的个数。</p><p><strong>样例输入</strong></p><p>6<br>10 2 6 3 7 8</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例说明</strong></p><p>　　值正好相差1的数对包括(2, 3), (6, 7), (7, 8)。</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=1000，给定的整数为不超过10000的非负整数。</p><div class="note success">排个序，判断一下上一个数和下一个数是否相差为1即可。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]+<span class="number">1</span>==a[i+<span class="number">1</span>])</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201409-2-画图"><a href="#201409-2-画图" class="headerlink" title="201409-2 画图"></a>201409-2 画图</h1><p><strong>问题描述</strong></p><p>　　在一个定义了直角坐标系的纸上，画一个(x1,y1)到(x2,y2)的矩形指将横坐标范围从x1到x2，纵坐标范围从y1到y2之间的区域涂上颜色。<br>　　下图给出了一个画了两个矩形的例子。第一个矩形是(1,1) 到(4, 4)，用绿色和紫色表示。第二个矩形是(2, 3)到(6, 5)，用蓝色和紫色表示。图中，一共有15个单位的面积被涂上颜色，其中紫色部分被涂了两次，但在计算面积时只计算一次。在实际的涂色过程中，所有的矩形都涂成统一的颜色，图中显示不同颜色仅为说明方便。<br><img src="http://118.190.20.162/RequireFile.do?fid=qMtgAT3j" alt="img"><br>　　给出所有要画的矩形，请问总共有多少个单位的面积被涂上颜色。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示要画的矩形的个数。<br>　　接下来n行，每行4个非负整数，分别表示要画的矩形的左下角的横坐标与纵坐标，以及右上角的横坐标与纵坐标。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示有多少个单位的面积被涂上颜色。</p><p><strong>样例输入</strong></p><p>2<br>1 1 4 4<br>2 3 6 5</p><p><strong>样例输出</strong></p><p>15</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=100，0&lt;=横坐标、纵坐标&lt;=100。</p><div class="note success">这个题目比较简单，不需要用结构体，直接建一个二维数组保存标记，一组一组的读入坐标，再把对应二维数组标记为1就可以了。最后统计标记了多少个格子即可。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,k,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">        <span class="keyword">for</span>(i=x1;i&lt;x2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=y1;j&lt;y2;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">105</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">105</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==<span class="number">1</span>)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用结构体一样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">105</span>][<span class="number">105</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1;</span><br><span class="line">    <span class="keyword">int</span> y1;</span><br><span class="line">    <span class="keyword">int</span> x2;</span><br><span class="line">    <span class="keyword">int</span> y2;</span><br><span class="line">&#125;a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,k,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[k].x1&gt;&gt;a[k].y1&gt;&gt;a[k].x2&gt;&gt;a[k].y2;</span><br><span class="line">        <span class="keyword">for</span>(i=a[k].x1;i&lt;a[k].x2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=a[k].y1;j&lt;a[k].y2;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                flag[i][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">105</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">105</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i][j]==<span class="number">1</span>)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201409-3-字符串匹配"><a href="#201409-3-字符串匹配" class="headerlink" title="201409-3  字符串匹配"></a>201409-3  字符串匹配</h1><p><strong>问题描述</strong></p><p>　　给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个字符串S，由大小写英文字母组成。<br>　　第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。<br>　　第三行包含一个整数n，表示给出的文字的行数。<br>　　接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。</p><p><strong>输出格式</strong></p><p>　　输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。</p><p><strong>样例输入</strong></p><p>Hello<br>1<br>5<br>HelloWorld<br>HiHiHelloHiHi<br>GrepIsAGreatTool<br>HELLO<br>HELLOisNOTHello</p><p><strong>样例输出</strong></p><p>HelloWorld<br>HiHiHelloHiHi<br>HELLOisNOTHello</p><p><strong>样例说明</strong></p><p>　　在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=100，每个字符串的长度不超过100。</p><div class="note success">字符串操作的问题，对于大小写敏感的查找，就使用C++中的string类，find函数，可以查找子字符串；对于大小写不敏感的查找，需要先把所有的字符串转换为小写的，再用find函数进行查找！</div><p>string大法好！函数大法好！</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">    <span class="keyword">int</span> flag,n,i;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;flag&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            <span class="keyword">if</span>(s.find(str)!=<span class="built_in">string</span>::npos)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        transform(str.begin(), str.end(), str.begin(),::<span class="built_in">tolower</span>);</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            <span class="built_in">string</span> p=s;</span><br><span class="line">            transform(p.begin(), p.end(), p.begin(),::<span class="built_in">tolower</span>);</span><br><span class="line">            <span class="keyword">if</span>(p.find(str)!=<span class="built_in">string</span>::npos)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201402-1-门禁系统"><a href="#201402-1-门禁系统" class="headerlink" title="201402-1 门禁系统"></a>201402-1 门禁系统</h1><p><strong>问题描述</strong></p><p>　　涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示涛涛的记录条数。<br>　　第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。</p><p><strong>样例输入</strong></p><p>5<br>1 2 1 1 3</p><p><strong>样例输出</strong></p><p>1 1 2 3 1</p><p><strong>评测用例规模与约定</strong></p><p>　　1≤n≤1,000，读者的编号为不超过n的正整数。</p><div class="note success">用另外一个字符串记录每个数出现的次数，读入一个数，输出计数值一次。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>],b[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        b[a[i]]++;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b[a[i]]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201503-1-图像旋转"><a href="#201503-1-图像旋转" class="headerlink" title="201503-1 图像旋转"></a>201503-1 图像旋转</h1><p><strong>问题描述</strong></p><p>　　旋转是图像处理的基本操作，在这个问题中，你需要将一个图像逆时针旋转90度。<br>　　计算机中的图像表示可以用一个矩阵来表示，为了旋转一个图像，只需要将对应的矩阵旋转即可。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，分别表示图像矩阵的行数和列数。<br>　　接下来<em>n</em>行每行包含<em>m</em>个整数，表示输入的图像。</p><p><strong>输出格式</strong></p><p>　　输出<em>m</em>行，每行包含<em>n</em>个整数，表示原始矩阵逆时针旋转90度后的矩阵。</p><p><strong>样例输入</strong></p><p>2 3<br>1 5 3<br>3 2 4</p><p><strong>样例输出</strong></p><p>3 4<br>5 2<br>1 3</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>n</em>, <em>m</em> ≤ 1,000，矩阵中的数都是不超过1000的非负整数。</p><div class="note success">矩阵的转置，没有什么难度…</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201503-2-数字排序"><a href="#201503-2-数字排序" class="headerlink" title="201503-2 数字排序"></a>201503-2 数字排序</h1><p><strong>问题描述</strong></p><p>　　给定<em>n</em>个整数，请统计出每个整数出现的次数，按出现次数从多到少的顺序输出。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示给定数字的个数。<br>　　第二行包含<em>n</em>个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。</p><p><strong>输出格式</strong></p><p>　　输出多行，每行包含两个整数，分别表示一个给定的整数和它出现的次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多，则先输出值较小的，然后输出值较大的。</p><p><strong>样例输入</strong></p><p>12<br>5 2 3 3 1 3 4 2 5 2 3 5</p><p><strong>样例输出</strong></p><p>3 4<br>2 3<br>5 3<br>1 1<br>4 1</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>n</em> ≤ 1000，给出的数都是不超过1000的非负整数。</p><div class="note success">如果就是记录出现的次数并排序，就十分简单，但是这个要输出对应的元素值，一开始想到用结构体存储，但是好像一排序顺序也打乱了…结果暴力的双重循环，遇到a[i]==j 的就把 j 和a[j]都输出来。</div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,num,i,j;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        a[num]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1004</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">1005</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]==i)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="string">" "</span>&lt;&lt;a[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201503-3-节日"><a href="#201503-3-节日" class="headerlink" title="201503-3 节日"></a>201503-3 节日</h1><p><strong>问题描述</strong></p><p>　　有一类节日的日期并不是固定的，而是以“<em>a</em>月的第<em>b</em>个星期<em>c</em>”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。<br>　　现在，给你<em>a</em>，<em>b</em>，<em>c</em>和<em>y</em>1, <em>y</em>2(1850 ≤ <em>y</em>1, <em>y</em>2 ≤ 2050)，希望你输出从公元<em>y</em>1年到公元<em>y</em>2年间的每年的<em>a</em>月的第<em>b</em>个星期<em>c</em>的日期。<br>　　提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。<br>　　为了方便你推算，已知1850年1月1日是星期二。</p><p><strong>输入格式</strong></p><p>　　输入包含恰好一行，有五个整数<em>a</em>, <em>b</em>, <em>c</em>, <em>y</em>1, <em>y</em>2。其中<em>c</em>=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。</p><p><strong>输出格式</strong></p><p>　　对于<em>y</em>1和<em>y</em>2之间的每一个年份，包括<em>y</em>1和<em>y</em>2，按照年份从小到大的顺序输出一行。<br>　　如果该年的<em>a</em>月第<em>b</em>个星期<em>c</em>确实存在，则以”yyyy/mm/dd”的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。<br>　　如果该年的<em>a</em>月第<em>b</em>个星期<em>c</em>并不存在，则输出”none”（不包含双引号)。</p><p><strong>样例输入</strong></p><p>5 2 7 2014 2015</p><p><strong>样例输出</strong></p><p>2014/05/11<br>2015/05/10</p><p><strong>评测用例规模与约定</strong></p><p>　　所有评测用例都满足：1 ≤ <em>a</em> ≤ 12，1 ≤ <em>b</em> ≤ 5，1 ≤ <em>c</em> ≤ 7，1850 ≤ <em>y</em>1, <em>y</em>2 ≤ 2050。</p><div class="note success">CCF就喜欢出这种骚题目，看起来很简单，改来改去就是a不了。<br><br>刚开始觉得很简单，先计算出a月1号是周几，再计算a月第一个星期c是几号，日期加上（b - 1）*7，就是最终的日期。<br><br>需要注意几个问题：第一个问题是，如果按照题目中所说从1850年开始推算日子的话，1850年1月1号是周二，不好惯性思维……也可以不管题目，直接从1年1月1日开始计算，1年1月1日是周日！第二个问题是，是打印y1~y2年间的每一个日期，不是只打印y1年和y2年的……题目中的样例正好y1和y2是连着的，我就一直以为只输出这两个年份，害我改了一早上，读题目啊！！！</div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> month_day[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算year年month月day日是星期几</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">weeks</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span> || (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line">        month_day[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        month_day[<span class="number">2</span>]=<span class="number">28</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;year;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">400</span>==<span class="number">0</span> || (i%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line">            sum+=<span class="number">366</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum+=<span class="number">365</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;month;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=month_day[j];</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=day;</span><br><span class="line">    <span class="keyword">int</span> k=sum%<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">2</span>)    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">3</span>)    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">4</span>)    <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">5</span>)    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">6</span>)    <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,y1,y2;</span><br><span class="line">    <span class="keyword">int</span> y[<span class="number">3005</span>],first_date[<span class="number">3005</span>],day[<span class="number">3005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;y1&gt;&gt;y2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y1;i&lt;=y2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        y[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=y1;i&lt;=y2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//计算y年a月1号是周几</span></span><br><span class="line">        first_date[i]=weeks(y[i],a,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//计算周c距离a月1日有几天</span></span><br><span class="line">        <span class="keyword">if</span>(c&lt;first_date[i])</span><br><span class="line">        &#123;</span><br><span class="line">            day[i]=first_date[i]-c;</span><br><span class="line">            day[i]=<span class="number">7</span>-day[i]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=first_date[i])</span><br><span class="line">        &#123;</span><br><span class="line">            day[i]=c-first_date[i]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        day[i]=day[i]+(b<span class="number">-1</span>)*<span class="number">7</span>;</span><br><span class="line">        <span class="comment">//骚的不行的输出</span></span><br><span class="line">        <span class="keyword">if</span>(day[i]&gt;month_day[a])</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"none"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;y[i]&lt;&lt;<span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">if</span>(a&lt;<span class="number">10</span>)    <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;a&lt;&lt;<span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">if</span>(day[i]&lt;<span class="number">10</span>)   <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;day[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span>    <span class="built_in">cout</span>&lt;&lt;day[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201509-1-数字分段"><a href="#201509-1-数字分段" class="headerlink" title="201509-1 数字分段"></a>201509-1 数字分段</h1><p><strong>问题描述</strong></p><p>　　给定一个整数数列，数列中连续相同的最长整数序列算成一段，问数列中共有多少段？</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示数列中整数的个数。<br>　　第二行包含<em>n</em>个整数<em>a</em>1, <em>a</em>2, …, <em>an</em>，表示给定的数列，相邻的整数之间用一个空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示给定的数列有多个段。</p><p><strong>样例输入</strong></p><p>8<br>8 8 8 0 12 12 8 0</p><p><strong>样例输出</strong></p><p>5</p><p><strong>样例说明</strong></p><p>　　8 8 8是第一段，0是第二段，12 12是第三段，倒数第二个整数8是第四段，最后一个0是第五段。</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>n</em> ≤ 1000，0 ≤ <em>ai</em> ≤ 1000。</p><div class="note success">检查目前输入进来的数和上一个数相不相同，不相同就计数加一。<br><br>我感觉a[0]不赋值并没有关系啊，然而不赋值就90分，赋了值就满分了…</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=a[i<span class="number">-1</span>])</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201509-2-日期计算"><a href="#201509-2-日期计算" class="headerlink" title="201509-2 日期计算"></a>201509-2 日期计算</h1><p><strong>问题描述</strong></p><p>　　给定一个年份<em>y</em>和一个整数<em>d</em>，问这一年的第<em>d</em>天是几月几日？<br>　　注意闰年的2月有29天。满足下面条件之一的是闰年：<br>　　1） 年份是4的整数倍，而且不是100的整数倍；<br>　　2） 年份是400的整数倍。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>y</em>，表示年份，年份在1900到2015之间（包含1900和2015）。<br>　　输入的第二行包含一个整数<em>d</em>，<em>d</em>在1至365之间。</p><p><strong>输出格式</strong></p><p>　　输出两行，每行一个整数，分别表示答案的月份和日期。</p><p><strong>样例输入</strong></p><p>2015<br>80</p><p><strong>样例输出</strong></p><p>3<br>21</p><p><strong>样例输入</strong></p><p>2000<br>40</p><p><strong>样例输出</strong></p><p>2<br>9</p><div class="note success">不是很难，关键是细心。先把12个月份每个月多少天存在数组里，如果是闰年就把2月改为29天。再一个月一个月的减，直到d小于下个月的天数，就可以输出月份和d了。<br><br>容易忽视的是：1月根本就不能进入循环，直接输出1月d号！</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year,d,i;</span><br><span class="line">    <span class="keyword">int</span> month[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;year&gt;&gt;d;</span><br><span class="line">    <span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span> || (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span>))</span><br><span class="line">        month[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">    <span class="keyword">if</span>(d&lt;=month[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            d-=month[i];</span><br><span class="line">            <span class="keyword">if</span>(d&lt;=month[i+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201604-1-折点计数"><a href="#201604-1-折点计数" class="headerlink" title="201604-1 折点计数"></a>201604-1 折点计数</h1><p><strong>问题描述</strong></p><p>　　给定<em>n</em>个整数表示一个商店连续<em>n</em>天的销售量。如果某天之前销售量在增长，而后一天销售量减少，则称这一天为折点，反过来如果之前销售量减少而后一天销售量增长，也称这一天为折点。其他的天都不是折点。如下图中，第3天和第6天是折点。<br><img src="http://118.190.20.162/RequireFile.do?fid=gbLRbhR7" alt="img"><br>　　给定<em>n</em>个整数<em>a</em>1, <em>a</em>2, …, <em>an</em>表示销售量，请计算出这些天总共有多少个折点。<br>　　为了减少歧义，我们给定的数据保证：在这<em>n</em>天中相邻两天的销售量总是不同的，即<em>ai</em>-1≠<em>ai</em>。注意，如果两天不相邻，销售量可能相同。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>。<br>　　第二行包含<em>n</em>个整数，用空格分隔，分别表示<em>a</em>1, <em>a</em>2, …, <em>an</em>。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示折点出现的数量。</p><p><strong>样例输入</strong></p><p>7<br>5 4 1 2 3 6 4</p><p><strong>样例输出</strong></p><p>2</p><p><strong>评测用例规模与约定</strong></p><p>　　所有评测用例满足：1 ≤ <em>n</em> ≤ 1000，每天的销售量是不超过10000的非负整数。</p><div class="note success">只要三个连续的数不是连续递增或者递减就计数增加。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((a[i]-a[i<span class="number">-1</span>])*(a[i+<span class="number">1</span>]-a[i])&lt;<span class="number">0</span>)</span><br><span class="line">            sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201512-2-消除类游戏"><a href="#201512-2-消除类游戏" class="headerlink" title="201512-2 消除类游戏"></a>201512-2 消除类游戏</h1><p><strong>问题描述</strong></p><p>　　消除类游戏是深受大众欢迎的一种游戏，游戏在一个包含有<em>n</em>行<em>m</em>列的游戏棋盘上进行，棋盘的每一行每一列的方格上放着一个有颜色的棋子，当一行或一列上有连续三个或更多的相同颜色的棋子时，这些棋子都被消除。当有多处可以被消除时，这些地方的棋子将同时被消除。<br>　　现在给你一个<em>n</em>行<em>m</em>列的棋盘，棋盘中的每一个方格上有一个棋子，请给出经过一次消除后的棋盘。<br>　　请注意：一个棋子可能在某一行和某一列同时被消除。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，用空格分隔，分别表示棋盘的行数和列数。<br>　　接下来<em>n</em>行，每行<em>m</em>个整数，用空格分隔，分别表示每一个方格中的棋子的颜色。颜色使用1至9编号。</p><p><strong>输出格式</strong></p><p>　　输出<em>n</em>行，每行<em>m</em>个整数，相邻的整数之间使用一个空格分隔，表示经过一次消除后的棋盘。如果一个方格中的棋子被消除，则对应的方格输出0，否则输出棋子的颜色编号。</p><p><strong>样例输入</strong></p><p>4 5<br>2 2 3 1 2<br>3 4 5 1 4<br>2 3 2 1 3<br>2 2 2 4 4</p><p><strong>样例输出</strong></p><p>2 2 3 0 2<br>3 4 5 0 4<br>2 3 2 0 3<br>0 0 0 4 4</p><p><strong>样例说明</strong></p><p>　　棋盘中第4列的1和第4行的2可以被消除，其他的方格中的棋子均保留。</p><p><strong>样例输入</strong></p><p>4 5<br>2 2 3 1 2<br>3 1 1 1 1<br>2 3 2 1 3<br>2 2 3 3 3</p><p><strong>样例输出</strong></p><p>2 2 3 0 2<br>3 0 0 0 0<br>2 3 2 0 3<br>2 2 0 0 0</p><p><strong>样例说明</strong></p><p>　　棋盘中所有的1以及最后一行的3可以被同时消除，其他的方格中的棋子均保留。</p><p><strong>评测用例规模与约定</strong></p><p>　　所有的评测用例满足：1 ≤ <em>n</em>, <em>m</em> ≤ 30。</p><div class="note success">不算很难，一个二维数组a存储数据，另外一个二维数组b改写0，这样就可以先一排一排的检查，再一列一列的检查。感觉有点啰嗦，但是a了就好。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">35</span>][<span class="number">35</span>],b[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">            b[i][j]=a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;m<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==a[i][j<span class="number">-1</span>] &amp;&amp; a[i][j]==a[i][j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                b[i][j<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">                b[i][j]=<span class="number">0</span>;</span><br><span class="line">                b[i][j+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==a[i<span class="number">-1</span>][j] &amp;&amp; a[i][j]==a[i+<span class="number">1</span>][j])</span><br><span class="line">            &#123;</span><br><span class="line">                b[i<span class="number">-1</span>][j]=<span class="number">0</span>;</span><br><span class="line">                b[i][j]=<span class="number">0</span>;</span><br><span class="line">                b[i+<span class="number">1</span>][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201604-2-俄罗斯方块"><a href="#201604-2-俄罗斯方块" class="headerlink" title="201604-2 俄罗斯方块"></a>201604-2 俄罗斯方块</h1><p><strong>问题描述</strong></p><p>　　俄罗斯方块是俄罗斯人阿列克谢·帕基特诺夫发明的一款休闲游戏。<br>　　游戏在一个15行10列的方格图上进行，方格图上的每一个格子可能已经放置了方块，或者没有放置方块。每一轮，都会有一个新的由4个小方块组成的板块从方格图的上方落下，玩家可以操作板块左右移动放到合适的位置，当板块中某一个方块的下边缘与方格图上的方块上边缘重合或者达到下边界时，板块不再移动，如果此时方格图的某一行全放满了方块，则该行被消除并得分。<br>　　在这个问题中，你需要写一个程序来模拟板块下落，你不需要处理玩家的操作，也不需要处理消行和得分。<br>　　具体的，给定一个初始的方格图，以及一个板块的形状和它下落的初始位置，你要给出最终的方格图。</p><p><strong>输入格式</strong></p><p>　　输入的前15行包含初始的方格图，每行包含10个数字，相邻的数字用空格分隔。如果一个数字是0，表示对应的方格中没有方块，如果数字是1，则表示初始的时候有方块。输入保证前4行中的数字都是0。<br>　　输入的第16至第19行包含新加入的板块的形状，每行包含4个数字，组成了板块图案，同样0表示没方块，1表示有方块。输入保证板块的图案中正好包含4个方块，且4个方块是连在一起的（准确的说，4个方块是四连通的，即给定的板块是俄罗斯方块的标准板块）。<br>　　第20行包含一个1到7之间的整数，表示板块图案最左边开始的时候是在方格图的哪一列中。注意，这里的板块图案指的是16至19行所输入的板块图案，如果板块图案的最左边一列全是0，则它的左边和实际所表示的板块的左边是不一致的（见样例）</p><p><strong>输出格式</strong></p><p>　　输出15行，每行10个数字，相邻的数字之间用一个空格分隔，表示板块下落后的方格图。注意，你不需要处理最终的消行。</p><p><strong>样例输入</strong></p><p>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 1 0 0<br>0 0 0 0 0 0 1 0 0 0<br>0 0 0 0 0 0 1 0 0 0<br>1 1 1 0 0 0 1 1 1 1<br>0 0 0 0 1 0 0 0 0 0<br>0 0 0 0<br>0 1 1 1<br>0 0 0 1<br>0 0 0 0<br>3</p><p><strong>样例输出</strong></p><p>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 1 0 0<br>0 0 0 0 0 0 1 0 0 0<br>0 0 0 0 0 0 1 0 0 0<br>1 1 1 1 1 1 1 1 1 1<br>0 0 0 0 1 1 0 0 0 0</p><div class="note success">模拟的思想，找到方块能够下降的位置，然后重新赋值后输出。提示好坑人啊，什么左边是不是0的问题，一开始被误导了…底板的边界从1开始计数，而不是0。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> board[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> block[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> i,j,k,a,b,pos;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;board[i][j];</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">        board[<span class="number">16</span>][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;block[i][j];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;pos;</span><br><span class="line">    <span class="keyword">bool</span> over=<span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//模拟，找到下降的位置</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">4</span>;a++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(b=<span class="number">0</span>;b&lt;<span class="number">4</span>;b++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(block[a][b]==<span class="number">1</span> &amp;&amp; board[i+a][pos+b]==<span class="number">1</span>)</span><br><span class="line">                    over = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(over==<span class="literal">true</span>)  <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//改变值</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;<span class="number">4</span>;a++)</span><br><span class="line">        <span class="keyword">for</span>(b=<span class="number">0</span>;b&lt;<span class="number">4</span>;b++)</span><br><span class="line">            board[i+a<span class="number">-1</span>][pos+b]+=block[a][b];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;board[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201609-2-火车购票"><a href="#201609-2-火车购票" class="headerlink" title="201609-2 火车购票"></a>201609-2 火车购票</h1><p><strong>问题描述</strong></p><p>　　请实现一个铁路购票系统的简单座位分配算法，来处理一节车厢的座位分配。<br>　　假设一节车厢有20排、每一排5个座位。为方便起见，我们用1到100来给所有的座位编号，第一排是1到5号，第二排是6到10号，依次类推，第20排是96到100号。<br>　　购票时，一个人可能购一张或多张票，最多不超过5张。如果这几张票可以安排在同一排编号相邻的座位，则应该安排在编号最小的相邻座位。否则应该安排在编号最小的几个空座位中（不考虑是否相邻）。<br>　　假设初始时车票全部未被购买，现在给了一些购票指令，请你处理这些指令。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示购票指令的数量。<br>　　第二行包含<em>n</em>个整数，每个整数<em>p</em>在1到5之间，表示要购入的票数，相邻的两个数之间使用一个空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出<em>n</em>行，每行对应一条指令的处理结果。<br>　　对于购票指令<em>p</em>，输出<em>p</em>张车票的编号，按从小到大排序。</p><p><strong>样例输入</strong></p><p>4<br>2 5 4 2</p><p><strong>样例输出</strong></p><p>1 2<br>6 7 8 9 10<br>11 12 13 14<br>3 4</p><p><strong>样例说明</strong></p><p>　　1) 购2张票，得到座位1、2。<br>　　2) 购5张票，得到座位6至10。<br>　　3) 购4张票，得到座位11至14。<br>　　4) 购2张票，得到座位3、4。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 100，所有购票数量之和不超过100。</p><div class="note success">我就直接暴力模拟，对1~5这五种情况全部列举一遍，得了90分，有一个问题就是如果前20次都是4个座位，第21次再买4个座位时，应该输出：5 10 15 20，中间是空格而不是换行，所以需要手动输出空格和换行。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">101</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">99</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">98</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">2</span>]==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>&lt;=<span class="number">3</span> &amp;&amp; i%<span class="number">5</span>!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">97</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">2</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">3</span>]==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>&lt;=<span class="number">2</span> &amp;&amp; i%<span class="number">5</span>!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">2</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">96</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">1</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">2</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">3</span>]==<span class="number">0</span> &amp;&amp; s[i+<span class="number">4</span>]==<span class="number">0</span> &amp;&amp; i%<span class="number">5</span>==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">2</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">3</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i+<span class="number">4</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                s[i]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">                s[i+<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            buy(<span class="number">1</span>);<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,op;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        buy(op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="201712-2-游戏"><a href="#201712-2-游戏" class="headerlink" title="201712-2 游戏"></a>201712-2 游戏</h1><p><strong>问题描述</strong></p><p>　　有<em>n</em>个小朋友围成一圈玩游戏，小朋友从1至<em>n</em>编号，2号小朋友坐在1号小朋友的顺时针方向，3号小朋友坐在2号小朋友的顺时针方向，……，1号小朋友坐在<em>n</em>号小朋友的顺时针方向。<br>　　游戏开始，从1号小朋友开始顺时针报数，接下来每个小朋友的报数是上一个小朋友报的数加1。若一个小朋友报的数为<em>k</em>的倍数或其末位数（即数的个位）为<em>k</em>，则该小朋友被淘汰出局，不再参加以后的报数。当游戏中只剩下一个小朋友时，该小朋友获胜。<br>　　例如，当n=5, k=2时：<br>　　1号小朋友报数1；<br>　　2号小朋友报数2淘汰；<br>　　3号小朋友报数3；<br>　　4号小朋友报数4淘汰；<br>　　5号小朋友报数5；<br>　　1号小朋友报数6淘汰；<br>　　3号小朋友报数7；<br>　　5号小朋友报数8淘汰；<br>　　3号小朋友获胜。<br>　　给定<em>n</em>和<em>k</em>，请问最后获胜的小朋友编号为多少？</p><p><strong>输入格式</strong></p><p>　　输入一行，包括两个整数<em>n</em>和<em>k</em>，意义如题目所述。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，表示获胜的小朋友编号。</p><p><strong>样例输入</strong></p><p>5 2</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例输入</strong></p><p>7 3</p><p><strong>样例输出</strong></p><p>4</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>k</em> ≤ 9。</p><div class="note success">仔细读题目！不是约瑟夫环问题！报数要一直一直递增下去…模拟的思路。另外要注意n=1时，无论k为何值都应该是输出1。</div><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,count=<span class="number">0</span>,index=<span class="number">0</span>,step=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[index]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((step%k==<span class="number">0</span>)||(step%<span class="number">10</span>==k))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(count==n<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;index+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                a[index]=<span class="number">1</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        index=(++index)%n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《图解算法》学习笔记9</title>
      <link href="/2018/06/11/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/"/>
      <url>/2018/06/11/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第九章的学习笔记</p><a id="more"></a><h1 id="第九章-动态规划"><a href="#第九章-动态规划" class="headerlink" title="第九章 动态规划"></a>第九章 动态规划</h1><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>经典的背包问题：</p><p>假设你是一个小偷，背着一个可以装4磅东西的背包。你可以盗取的物品有以下3样：</p><ul><li>音响  3000美元  4磅</li><li>笔记本电脑  2000美元  3磅</li><li>吉他  1500美元  1磅</li></ul><p>为了让盗窃的商品价值最高，应该怎么选择商品？</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>每一个动态规划问题都是从一个网格开始，背包问题的网格如下：</p><p><img src="https://i.loli.net/2018/06/11/5b1e94011aa87.png" alt="a.png"></p><p>网格的各行为商品，各列为不同容量（1~4磅）的背包。所有这些列都需要，因为他们帮助你计算子背包的价值。网格最初是空的，你将填充其中的每一个单元格，网格填满后，就可以得出答案。</p><p>现在开始填表：</p><ul><li><p>吉他行</p><p>这一行中，你能够拿的物品只有吉他。当背包容量为1时就可以拿吉他，因为吉他的重量就是1，这时最大价值为1500，接下来当背包容量为2，3，4时，依然只能拿吉他，所以第一行全部都是1500。</p><p><img src="https://i.loli.net/2018/06/11/5b1e94226bfa8.png" alt="b.png"></p></li><li><p>音响行</p><p>现在可以选择的物品有吉他和音响。当容量为1，2，3时，只能拿吉他，价值为1500；当容量为4时，可以拿音响，音响比吉他值钱，所以拿音响，价值为3000。</p><p>这时容量为4的背包最大价值更新为3000。</p><p><img src="https://i.loli.net/2018/06/11/5b1e94375e4c1.png" alt="c.png"></p></li><li><p>笔记本电脑行</p><p>现在可以选择的物品有吉他、音响、笔记本电脑。当容量为1，2时，只能拿吉他，价值1500；当容量为3时，可以拿笔记本电脑，更新价值为2000；当容量为4时，可以拿（容量为3时的最大值 + 余下的1磅物品）或者之前选择的音响。发现笔记本电脑+吉他更之前，更新价值为4500。</p><p><img src="https://i.loli.net/2018/06/11/5b1e944e4083f.png" alt="d.png"></p></li></ul><p>现在表填完了，最后一行的最后一列代表所有物品都可以选且容量为背包最大容量时能获得的最大价值，即为答案。</p><h3 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h3><p>在刚刚填表的过程中，其实是有一套规则的：<br>$$<br>cell\ [\ i\  ][\  j\  ]=<br>\begin{cases}  上一个单元格的值（即cell\ [\ i-1\ ][\ j-1\ ]的值）<br>\\当前商品的价值 + 剩余空间的价值（cell\ [\ i-1\ ][\ j- 当前商品的重量\ ]）<br>\end{cases}<br>$$<br><strong>背包问题FAQ</strong></p><ul><li><p>Q：再增加一个物品呢？</p><p>A：直接再加一行即可，表格中前面的值不变，只用填新加的这一行就可以了，依然遵循刚才的填表原则。</p></li><li><p>Q：行的排列顺序发生变化会如何？</p><p>A：无论行是什么顺序，都不影响最终结果。</p></li><li><p>Q：可以逐列而不是逐行填表吗？</p><p>A：背包问题可以，有些动态规划问题不行。</p></li><li><p>Q：增加一件更小的物品怎么办？</p><p>A：例如增加一个0.5磅的物品，子背包应该变为0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4。</p></li><li><p>Q：可以偷商品的一部分吗？</p><p>A：不行，动态规划不能解决只拿一部分的问题。需要用贪心算法每次选择价值最高的物品。</p></li><li><p>Q：最优解可能出现没装满的情况吗？</p><p>A：很有可能。</p></li></ul><h2 id="最长公共子串-amp-子序列"><a href="#最长公共子串-amp-子序列" class="headerlink" title="最长公共子串&amp;子序列"></a>最长公共子串&amp;子序列</h2><h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><p>最长公共子串问题描述：假如用户输入一个单词，但是拼错了，你的字典里根本没有这个单词，但是有几个类似的单词，怎么判断另一个单词和他输入的单词的有多少字母相同呢？</p><p>例如他输入hish，而你想计算fish和它的相似度。</p><p>填表：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">S</th><th style="text-align:center">H</th></tr></thead><tbody><tr><td style="text-align:center">F</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">3</td></tr></tbody></table><p>表格中最大的数为3，所以两个单词的最长公共子串的长度为3。</p><p>怎么填表的呢？</p><ul><li>如果两个字母不相同，则为0</li><li>如果两个字母相同，则为左上角邻居的值+1</li></ul><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">F</th><th style="text-align:center">O</th><th style="text-align:center">S</th><th style="text-align:center">H</th></tr></thead><tbody><tr><td style="text-align:center">F</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr></tbody></table><p>填表依据：</p><ul><li>如果两个字母不同，就选择上方和左方邻居中较大的那个</li><li>如果两个字母相同，就是左方单元格的值+1</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string,random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs_dp</span><span class="params">(input_x, input_y)</span>:</span></span><br><span class="line">    <span class="comment"># 建立一个dp二维数组</span></span><br><span class="line">    <span class="comment"># input_y as column, input_x as row</span></span><br><span class="line">    dp = [([<span class="number">0</span>] * (len(input_y) + <span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(input_x) + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(input_x) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(input_y) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> j == <span class="number">0</span>:  <span class="comment"># 在边界上，自行+1</span></span><br><span class="line">                dp[i][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> input_x[i - <span class="number">1</span>] == input_y[j - <span class="number">1</span>]:  <span class="comment"># 不在边界上，相等就加一</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 不相等</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_str</span><span class="params">(randomlength)</span>:</span></span><br><span class="line">    str = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(randomlength):</span><br><span class="line">        str += random.choice(list(string.ascii_letters))</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    str1 = random_str(<span class="number">10000</span>)</span><br><span class="line">    str2 = random_str(<span class="number">10000</span>)</span><br><span class="line">    print(<span class="string">"字符串1:"</span>, str1)</span><br><span class="line">    print(<span class="string">"字符串2:"</span>, str2)</span><br><span class="line">    print(<span class="string">"最长子序列的长度："</span>, lcs_dp(str1, str2))</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>动态规划可以解决的常见实际问题：</p><ul><li>生物学家根据最长公共子序列来确定DNA链的相似性，进而判断两种动物或疾病有多相似。</li><li>代码查重/论文查重也是查找最长公共子序列的问题。</li><li>计算编辑距离的问题，拼写检查、判断盗版都是用动态规划解决的。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《图解算法》学习笔记8</title>
      <link href="/2018/06/10/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/"/>
      <url>/2018/06/10/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第八章的学习笔记</p><a id="more"></a><h1 id="第八章-贪婪算法"><a href="#第八章-贪婪算法" class="headerlink" title="第八章 贪婪算法"></a>第八章 贪婪算法</h1><h2 id="教室调度问题"><a href="#教室调度问题" class="headerlink" title="教室调度问题"></a>教室调度问题</h2><p>假设有一张课表，你希望将尽可能多的课程安排在某间教室上。但是又本可能所有课都在这一间教室上，因为有些课的上课时间有冲突。</p><table><thead><tr><th style="text-align:center">美术</th><th style="text-align:center">9：00AM</th><th style="text-align:center">10:00AM</th></tr></thead><tbody><tr><td style="text-align:center">英语</td><td style="text-align:center">9：30AM</td><td style="text-align:center">10：30AM</td></tr><tr><td style="text-align:center">数学</td><td style="text-align:center">10：00AM</td><td style="text-align:center">11：00AM</td></tr><tr><td style="text-align:center">计算机</td><td style="text-align:center">10：30AM</td><td style="text-align:center">11：30AM</td></tr><tr><td style="text-align:center">音乐</td><td style="text-align:center">11：00AM</td><td style="text-align:center">12：00AM</td></tr></tbody></table><p>具体做法是：</p><p>1.选出结束最早的课，它就是要在这间教室上的第一堂课。</p><p>2.接下来，必须选择第一堂课结束后才开始的课。同样，你选择结束最早的课，这将是要在这间教室上的第二堂课。</p><p>重复这样做就能找到答案。</p><p>贪婪算法很简单：每一步都采取最优的做法。用专业术语说，每步都选择局部最优解，最终得到的就是全局最优解。</p><h2 id="集合覆盖问题"><a href="#集合覆盖问题" class="headerlink" title="集合覆盖问题"></a>集合覆盖问题</h2><p>假设需要让全美50个州都收到广播节目，不同的广播公司向不同的州广播，怎么选择最少的广播公司呢？</p><p>这就需要列举出所有可能的集合，在这个集合中选择覆盖全美50个州的最小集合。</p><p>这样的穷举需要耗费大量的时间，效率极低。为了解决这种问题，可以采用近似算法，使用贪婪算法可以得到非常接近的解，而时间可以大大缩短。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">states_needed = &#123;<span class="string">"mt"</span>, <span class="string">"wa"</span>, <span class="string">"or"</span>, <span class="string">"id"</span>, <span class="string">"nv"</span>, <span class="string">"ut"</span>, <span class="string">"ca"</span>, <span class="string">"az"</span>&#125;</span><br><span class="line">stations = &#123;<span class="string">"kone"</span>: &#123;<span class="string">"id"</span>, <span class="string">"nv"</span>, <span class="string">"ut"</span>&#125;,</span><br><span class="line">            <span class="string">"ktwo"</span>: &#123;<span class="string">"wa"</span>, <span class="string">"id"</span>, <span class="string">"mt"</span>&#125;,</span><br><span class="line">            <span class="string">"kthree"</span>: &#123;<span class="string">"or"</span>, <span class="string">"nv"</span>, <span class="string">"ca"</span>&#125;,</span><br><span class="line">            <span class="string">"kfour"</span>: &#123;<span class="string">"nv"</span>, <span class="string">"ut"</span>&#125;,</span><br><span class="line">            <span class="string">"kfive"</span>: &#123;<span class="string">"ca"</span>, <span class="string">"az"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">final_stations = set()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> states_needed:</span><br><span class="line">    best_station = <span class="keyword">None</span></span><br><span class="line">    states_covered = set()</span><br><span class="line">    <span class="keyword">for</span> station, states <span class="keyword">in</span> stations.items():</span><br><span class="line">        covered = states_needed &amp; states</span><br><span class="line">        <span class="keyword">if</span> len(covered) &gt; len(states_covered):</span><br><span class="line">            best_station = station</span><br><span class="line">            states_covered = covered</span><br><span class="line"></span><br><span class="line">    states_needed -= states_covered</span><br><span class="line">    final_stations.add(best_station)</span><br><span class="line"></span><br><span class="line">print(final_stations)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>旅行商问题和集合覆盖问题有一个共同之处：需要计算所有的解，并从中选出最小/最短的那个。这两个问题都属于NP完全问题。</li><li>元素较少时算法的运算速度非常快，但是随着元素数量的增加，速度会变得非常慢。</li><li>涉及“所有组合”的问题通常是NP完全问题。</li><li>不能将问题分成小问题，必须考虑各种情况的可能情况。这可能是NP完全问题。</li><li>贪婪算法寻找局部最优解，企图用这种方式获得全局最优解，贪婪算法易于实现、运算速度快，是不错的近似算法。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《图解算法》学习笔记7</title>
      <link href="/2018/06/04/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/"/>
      <url>/2018/06/04/%E3%80%8A%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第七章的学习笔记</p><a id="more"></a><h1 id="第七章-Dijkstra算法"><a href="#第七章-Dijkstra算法" class="headerlink" title="第七章 Dijkstra算法"></a>第七章 Dijkstra算法</h1><h2 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h2><p>Dijkstra算法解决的是：在加权图中，一个点（源点）到其余各个顶点的最短路径问题，也叫做“单源最短路径”。例如下图所示的一个加权图中，从1到6有很多条路径，每一段的长度都不同，用Dijkstra算法可以选择一条长度最短的路径。</p><p>注意该算法要求图中不存在负权边。</p><p><img src="https://i.loli.net/2018/06/04/5b155238034c6.png" alt="dijkstra.png"></p><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p>若对于顶点 s 存在能直接到达的边（s,m），则把d[m]设为w（s, m）,同时把所有其他（s不能直接到达的）顶点的路径长度设为无穷大，即表示我们不知道任何通向这些顶点的路径。当算法结束时，<em>d[v]</em> 中存储的便是从 <em>s</em> 到 <em>v</em>的最短路径，或者如果路径不存在的话是无穷大。 </p><p>边的拓展是Dijkstra 算法的基础操作：如果存在一条从 <em>u</em> 到 <em>v</em> 的边，那么从 <em>s</em> 到 <em>v</em> 的最短路径可以通过将边（<em>u</em>, <em>v</em>）添加到尾部来拓展一条从 s 到 v 的路径。这条路径的长度是 d[u] + w(u, v)。如果这个值比目前已知的 <em>d[v]</em> 的值要小，我们可以用新值来替代当前 <em>d[v]</em> 中的值。拓展边的操作一直运行到所有的 d[v] 都代表从 s 到 v 的最短路径的长度值。此算法的组织令 <em>d[u]</em> 达到其最终值时，每条边（<em>u</em>, <em>v</em>）都只被拓展一次。</p><p>算法维护两个顶点集合 S 和 Q。集合 S 保留所有已知最小 d[v] 值的顶点 v ，而集合 Q 则保留其他所有顶点。集合S初始状态为空，而后每一步都有一个顶点从 Q 移动到 S。这个被选择的顶点是 Q 中拥有最小的 d[u] 值的顶点。当一个顶点 u 从 Q 中转移到了 S 中，算法对 u 的每条外接边 (u, v) 进行拓展。</p><h2 id="换钢琴的实例"><a href="#换钢琴的实例" class="headerlink" title="换钢琴的实例"></a>换钢琴的实例</h2><p>这是交换物品的一张图，乐谱是起点（已经有的东西），现在需要花最少的钱来还到钢琴。</p><p><img src="https://i.loli.net/2018/06/04/5b1555e8e8a42.png" alt="tu.png"></p><p><strong>第一步</strong>：从起点（乐谱）出发，找到最便宜的节点。</p><p>这里只有两个节点，一个是唱片（权值为5），一个是海报（权值为0），所以选择海报这个节点。</p><p><strong>第二步</strong>：计算前往该节点（海报）的各个邻居的开销。</p><p>用一个表来记录：</p><table><thead><tr><th style="text-align:center">父节点</th><th style="text-align:center">节点</th><th style="text-align:center">开销</th></tr></thead><tbody><tr><td style="text-align:center">乐谱</td><td style="text-align:center">唱片</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">乐谱</td><td style="text-align:center">海报</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">海报</td><td style="text-align:center">吉他</td><td style="text-align:center">30</td></tr><tr><td style="text-align:center">海报</td><td style="text-align:center">架子鼓</td><td style="text-align:center">35</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">钢琴</td><td style="text-align:center">&infin;</td></tr></tbody></table><p><strong>第三步</strong>：再次执行第一步。下一个最便宜的节点为唱片。</p><p><strong>第四部</strong>：再次执行第二步。计算前往该节点（唱片）的各个邻居的开销。</p><p>用一个表来记录：</p><table><thead><tr><th style="text-align:center">父节点</th><th style="text-align:center">节点</th><th style="text-align:center">开销</th></tr></thead><tbody><tr><td style="text-align:center">乐谱</td><td style="text-align:center">唱片</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">乐谱</td><td style="text-align:center">海报</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">吉他</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">架子鼓</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">—</td><td style="text-align:center">钢琴</td><td style="text-align:center">&infin;</td></tr></tbody></table><p><strong>第五步</strong>：更新开销。</p><p>发现通过唱片到吉他和通过唱片到架子鼓的开销更小。所以将架子鼓和吉他的父节点更新为唱片。</p><p><strong>第六步</strong>：重复第一步。现在起点变成了唱片。下一个最便宜的节点是吉他。</p><p><strong>第七步</strong>：重复第二步。计算前往该节点（吉他）的各个邻居的开销。</p><table><thead><tr><th style="text-align:center">父节点</th><th style="text-align:center">节点</th><th style="text-align:center">开销</th></tr></thead><tbody><tr><td style="text-align:center">乐谱</td><td style="text-align:center">唱片</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">乐谱</td><td style="text-align:center">海报</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">吉他</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">架子鼓</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">吉他</td><td style="text-align:center">钢琴</td><td style="text-align:center">40</td></tr></tbody></table><p><strong>第八步</strong>：重复第一步。起点是唱片，除了吉他，下一个最便宜的节点是架子鼓。</p><p><strong>第九步</strong>：重复第二步。计算前往该节点（架子鼓）的各个邻居的开销。</p><table><thead><tr><th style="text-align:center">父节点</th><th style="text-align:center">节点</th><th style="text-align:center">开销</th></tr></thead><tbody><tr><td style="text-align:center">乐谱</td><td style="text-align:center">唱片</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">乐谱</td><td style="text-align:center">海报</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">吉他</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">唱片</td><td style="text-align:center">架子鼓</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">架子鼓</td><td style="text-align:center">钢琴</td><td style="text-align:center">35</td></tr></tbody></table><p><strong>第十步</strong>：更新开销。</p><p>通过架子鼓到钢琴更便宜，所以钢琴的父节点更新为架子鼓。</p><p>至此，就找到了从乐谱到各个节点的最便宜的方案，例如要还到钢琴，就需要35元。怎么确定路径呢？根据父节点向前推导就可以知道这条路径了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>题目如下图为例：</p><p><img src="https://i.loli.net/2018/06/05/5b160090bfb05.png" alt="未命名文件.png"></p><h3 id="定义散列表"><a href="#定义散列表" class="headerlink" title="定义散列表"></a>定义散列表</h3><p>一共需要三个散列表，一个是定义图，节点之间权值的散列表，一个是costs，一个是parents，也就是前文例子中的表格后两列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先定义一个散列表，起点分别是start，a，b，fin</span></span><br><span class="line">graph = &#123;<span class="string">"start"</span>: &#123;&#125;, <span class="string">"a"</span>: &#123;&#125;, <span class="string">"b"</span>: &#123;&#125;, <span class="string">"fin"</span>: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">graph[<span class="string">"start"</span>][<span class="string">"a"</span>] = <span class="number">4</span></span><br><span class="line">graph[<span class="string">"start"</span>][<span class="string">"b"</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">graph[<span class="string">"a"</span>][<span class="string">"fin"</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">graph[<span class="string">"b"</span>][<span class="string">"a"</span>] = <span class="number">3</span></span><br><span class="line">graph[<span class="string">"b"</span>][<span class="string">"fin"</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">infinity = float(<span class="string">"inf"</span>)</span><br><span class="line"><span class="comment"># 定义开销的散列表</span></span><br><span class="line">costs = &#123;&#125;</span><br><span class="line">costs[<span class="string">"a"</span>] = <span class="number">6</span></span><br><span class="line">costs[<span class="string">"b"</span>] = <span class="number">2</span></span><br><span class="line">costs[<span class="string">"fin"</span>] = infinity</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义父节点的散列表</span></span><br><span class="line">parents = &#123;&#125;</span><br><span class="line">parents[<span class="string">"a"</span>] = <span class="string">"start"</span></span><br><span class="line">parents[<span class="string">"b"</span>] = <span class="string">"start"</span></span><br><span class="line">parents[<span class="string">"fin"</span>] = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="最小costs函数"><a href="#最小costs函数" class="headerlink" title="最小costs函数"></a>最小costs函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs)</span>:</span></span><br><span class="line">    lowest_cost = float(<span class="string">"inf"</span>)</span><br><span class="line">    lowest_cost_node = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> costs:</span><br><span class="line">        cost = costs[node]</span><br><span class="line">        <span class="keyword">if</span> cost &lt; lowest_cost <span class="keyword">and</span> node <span class="keyword">not</span> <span class="keyword">in</span> processed:</span><br><span class="line">            lowest_cost = cost</span><br><span class="line">            lowest_cost_node = node</span><br><span class="line">    <span class="keyword">return</span> lowest_cost_node</span><br></pre></td></tr></table></figure><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">node = find_lowest_cost_node(costs)</span><br><span class="line"><span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">    cost = costs[node]</span><br><span class="line">    neighbors = graph[node]</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> neighbors.keys():</span><br><span class="line">        new_cost = cost + neighbors[n]</span><br><span class="line">        <span class="keyword">if</span> costs[n] &gt; new_cost:</span><br><span class="line">            costs[n] = new_cost</span><br><span class="line">            parents[n] = node</span><br><span class="line">    processed.append(node)</span><br><span class="line">    node = find_lowest_cost_node(costs)</span><br><span class="line">    print(node)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记6</title>
      <link href="/2018/06/02/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
      <url>/2018/06/02/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第六章的学习笔记</p><a id="more"></a><h1 id="第六章-广度优先搜索"><a href="#第六章-广度优先搜索" class="headerlink" title="第六章 广度优先搜索"></a>第六章 广度优先搜索</h1><h2 id="BFS的核心思想：层层递进"><a href="#BFS的核心思想：层层递进" class="headerlink" title="BFS的核心思想：层层递进"></a>BFS的核心思想：层层递进</h2><p>首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。 </p><p>BFS搜索是一种用于图的查找，可以帮助回答两类问题：</p><ul><li>从节点A出发，有前往节点B的路径吗？</li><li>从节点A出发，前往节点B的哪条路径最短？</li></ul><h2 id="芒果经销商的例子"><a href="#芒果经销商的例子" class="headerlink" title="芒果经销商的例子"></a>芒果经销商的例子</h2><ul><li>假设你经营着一个芒果农场，需要寻找芒果经销商，为此，你在朋友列表中查找</li><li>这种查找很简单，创建一个朋友名单，并依次遍历每一个朋友看她是不是芒果经销商</li><li>假设没有，这时就要在朋友的朋友中查找</li><li>这时对于每一个朋友，再将他们的朋友加入到列表中</li><li>再次遍历列表，看朋友的朋友是不是芒果经销商</li><li>如果依然没有，就把第三层关系人物加入到列表，在重复遍历查找的操作。</li></ul><p>广度优先搜索就是先查找一度关系，再查找二度关系、再查找三度关系，以此类推。在广度优先搜索的执行过程中，搜索范围从起点开始逐渐向外延伸，一层一层的向外查找。</p><p>注意，必须按照添加顺序查找时，才能实现这样的目的。如果不按照层次顺序查找，就无法找到最短路径。想要按照添加顺序进行检查，就需要使用一种数据结构，那就是队列（queue）。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种<strong>先进先出</strong>（First In First Out,FIFO）的数据结构，而栈是一种<strong>后进先出</strong>（Last In First Out,LIFO）的数据结构。</p><p>队列的工作原理与生活中的队列完全相同，不能随机访问队列中的元素，队列只支持两种操作：<strong>入队和出队</strong>。</p><h2 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h2><p><img src="https://i.loli.net/2018/06/04/5b14f09577b22.png" alt="bfs算法.png"></p><p>首先，创建一个队列。在python中，可以用deque来创建一个双端队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用散列表来生成图</span></span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[<span class="string">'you'</span>] = [<span class="string">'alice'</span>, <span class="string">'bob'</span>, <span class="string">'claire'</span>]</span><br><span class="line">graph[<span class="string">'bob'</span>] = [<span class="string">'anuj'</span>, <span class="string">'peggy'</span>]</span><br><span class="line">graph[<span class="string">'alice'</span>] = [<span class="string">'peggy'</span>]</span><br><span class="line">graph[<span class="string">'claire'</span>] = [<span class="string">'thom'</span>, <span class="string">'jonny'</span>]</span><br><span class="line">graph[<span class="string">'anuj'</span>] = []</span><br><span class="line">graph[<span class="string">'peggy'</span>] = []</span><br><span class="line">graph[<span class="string">'thom'</span>] = []</span><br><span class="line">graph[<span class="string">'jonny'</span>] = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_is_seller</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 自定义以m结尾的名字就是芒果经销商</span></span><br><span class="line">    <span class="keyword">return</span> name[<span class="number">-1</span>] == <span class="string">'m'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(name)</span>:</span></span><br><span class="line">    search_queue = deque()</span><br><span class="line">    search_queue += graph[name]</span><br><span class="line">    searched = []</span><br><span class="line">    <span class="keyword">while</span> search_queue:</span><br><span class="line">        person = search_queue.popleft()  <span class="comment"># 取出第一个人</span></span><br><span class="line">        <span class="keyword">if</span> person <span class="keyword">not</span> <span class="keyword">in</span> searched:</span><br><span class="line">            <span class="keyword">if</span> person_is_seller(person):</span><br><span class="line">                print(person + <span class="string">" is a mango seller!"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                search_queue += graph[person]</span><br><span class="line">                searched.append(person)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    search(<span class="string">'you'</span>)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>广度优先搜索指出是否有从A到B的路径。</li><li>如果有，广度优先搜索将找出最短路径。</li><li>有向图中的边为箭头，箭头方向指定了关系的方向。</li><li>无向图中的边不带箭头，其中的关系是双向的。</li><li>队列是先进先出（FIFO）的。</li><li>栈是后进先出（LIFO）的。</li><li>广度优先搜索需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必须是队列。</li><li>对于检查过的人，务必不要再检查，否则会导致无限循环。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记5</title>
      <link href="/2018/05/31/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/"/>
      <url>/2018/05/31/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第五章的学习笔记</p><a id="more"></a><h1 id="第五章-散列表"><a href="#第五章-散列表" class="headerlink" title="第五章 散列表"></a>第五章 散列表</h1><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>散列表（Hash table），也叫哈希表，是根据键（key）而直接访问在内存存储位置的<em>数据结构</em>，也就是说，它通过计算一个关于键值的函数，将所需查询的数据映射到表中一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做<strong>散列表</strong>。</p><p>一个通俗的例子是，为了查找电话簿中某人的号码，可以创建一个按照人名首字母顺序排列的表（即建立人名 X 到首字母  F(X) 的一个函数关系，在首字母为W的表中查找“王”姓的电话号码，显然比直接查找就要快得多。这里使用人名作为关键字，“取首字母”是这个例子中散列函数的函数法则 F( )，存放首字母的表对应散列表。关键字和函数法则理论上可以任意确定。</p><h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><p>散列函数（英文：Hash function）又称哈希函数。</p><ul><li>散列函数总是将同样的输入映射到相同的索引。</li><li>散列函数只带数组有多大，只返回有效的索引。</li><li>Python提供的散列表实现为字典，可以使用函数 dict 来创建散列表。</li></ul><h2 id="哈希查找"><a href="#哈希查找" class="headerlink" title="哈希查找"></a>哈希查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        self.elem = [<span class="keyword">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(size)]  <span class="comment"># 使用list数据结构作为哈希表元素保存方法</span></span><br><span class="line">        self.count = size  <span class="comment"># 最大表长</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key % self.count  <span class="comment"># 散列函数采用除留余数法</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_hash</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""插入关键字到哈希表内"""</span></span><br><span class="line">        address = self.hash(key)  <span class="comment"># 求散列地址</span></span><br><span class="line">        <span class="keyword">while</span> self.elem[address]:  <span class="comment"># 当前位置已经有数据了，发生冲突。</span></span><br><span class="line">            address = (address+<span class="number">1</span>) % self.count  <span class="comment"># 线性探测下一地址是否可用</span></span><br><span class="line">        self.elem[address] = key  <span class="comment"># 没有冲突则直接保存。</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_hash</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""查找关键字，返回布尔值"""</span></span><br><span class="line">        star = address = self.hash(key)</span><br><span class="line">        <span class="keyword">while</span> self.elem[address] != key:</span><br><span class="line">            address = (address + <span class="number">1</span>) % self.count</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.elem[address] <span class="keyword">or</span> address == star:  <span class="comment"># 说明没找到或者循环到了开始的位置</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list_a = [<span class="number">12</span>, <span class="number">67</span>, <span class="number">56</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">34</span>]</span><br><span class="line">    hash_table = HashTable(<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_a:</span><br><span class="line">        hash_table.insert_hash(i)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> hash_table.elem:</span><br><span class="line">        <span class="keyword">if</span> i:</span><br><span class="line">            print((i, hash_table.elem.index(i)), end=<span class="string">" "</span>)</span><br><span class="line">    print(<span class="string">"n"</span>)</span><br><span class="line"> </span><br><span class="line">    print(hash_table.search_hash(<span class="number">15</span>))</span><br><span class="line">    print(hash_table.search_hash(<span class="number">33</span>))</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>散链表常用于查找、防止重复。缓存。</li><li>散链表适用于映射关系、防止重复、缓存/记住数据。</li><li>冲突很糟糕，应该使用可以最大限度减小冲突的散列函数。</li><li>散列表的查找、插入、删除操作速度都非常快。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记4</title>
      <link href="/2018/05/30/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
      <url>/2018/05/30/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第四章的学习笔记</p><a id="more"></a><h1 id="第四章-快速排序"><a href="#第四章-快速排序" class="headerlink" title="第四章 快速排序"></a>第四章 快速排序</h1><h2 id="分治法——分而治之"><a href="#分治法——分而治之" class="headerlink" title="分治法——分而治之"></a>分治法——分而治之</h2><p><strong>总述</strong></p><p>分而治之（divide and conquer,D&amp;C）是一种著名的递归式问题解决方法。分治法提供了一种解决问题的思路，是另一种可供你使用的工具。分治法的核心思想就是用一种对解决某个问题通用而且尽可能简单的方法，不断缩小问题的规模，知道求解出问题为止。</p><p><strong>步骤</strong></p><ol><li>找出基线条件，这种条件必须尽可能简单</li><li>不断将问题分解（缩小规模），直到符合基线条件。</li></ol><h3 id="分治法：划分方块问题"><a href="#分治法：划分方块问题" class="headerlink" title="分治法：划分方块问题"></a>分治法：划分方块问题</h3><p><strong>题目要求</strong></p><p>现在有一个矩形，边长为1680 * 640，需要将这个矩形均匀地分成方块，且分出的方块要尽可能大。</p><p><strong>思路</strong></p><ol><li>找基线条件：当一条边长是另一条边长的整数倍时，就可以尽可能大的划分成方块。</li><li>分解问题：</li></ol><ul><li>首先找到这个矩形能容纳的最大方块：因为宽度是640，所以可以划分的最大方块的边长为640*640，一共可以划分出两个这样的方块。</li><li>剩下的矩形边长为640*400。</li><li>再对剩下的矩形进行相同的操作，找出这个矩形能容纳的最大方块：400*400。</li><li>剩下的矩形变成了400*240。</li><li>再对这个矩形进行同样的操作，找出最大能容纳的方块：240*240。</li><li>剩下的矩形变成了240*120。这时这个矩形可以划分成两个小方形（满足基线条件：一条边长是另一条边长的整数倍）结束。</li></ul><p>最后，对于最初的那个矩形，适用的最大方块为80*80。</p><p>这里用到了一个原理：适用于这小块地的最大方块，也是适用于整块地的最大方块。这个原理来源于欧几里得算法。</p><h3 id="分治法：求数组元素之和"><a href="#分治法：求数组元素之和" class="headerlink" title="分治法：求数组元素之和"></a>分治法：求数组元素之和</h3><p><strong>题目要求</strong></p><p>给出一个数组，数组中有一串数组，现在需要求这数组中数字元素之和。</p><p>最简单的方法就是直接循环求和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(arr)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">        total += x</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><p>但是怎么用递归函数来实现呢？这就需要不断的把问题规模缩小。</p><p>例如给出一个数组：[2,4,6],求和：</p><p><strong>第一步</strong>：找出基线条件：<br>$$<br>\begin{cases}空集不包含任何元素 ,&amp; \text{总和为0} \\ 只包含一个元素, &amp; \text {总和为该元素本身}<br>\end{cases}<br>$$<br><strong>第二步</strong>：缩小规模：</p><p><img src="https://i.loli.net/2018/05/30/5b0e8efacecfd.png" alt="未命名文件.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dc_sum</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arr == []:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>] + dc_sum(arr[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h3 id="分治法：快速排序"><a href="#分治法：快速排序" class="headerlink" title="分治法：快速排序"></a>分治法：快速排序</h3><p>快速排序的思想是：先选择一个元素值做为基准值，然后将数组中所有小于基准数的数放在这个数的左边，大于这个数的元素都放在右边。再在这两个子数组中做这种操作，各选择一个基准数，然后小的放一边，大的放一边……直到子数组为空或者只有一个元素（这两种情况下的子数组一定是有序的）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = arr[<span class="number">0</span>] <span class="comment">#这里直接把第一个元素当做基准值</span></span><br><span class="line">        less = [i <span class="keyword">for</span> i <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> i &lt;= pivot]</span><br><span class="line">        more = [i <span class="keyword">for</span> i <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; pivot]</span><br><span class="line">        <span class="keyword">return</span> quick_sort(less) + [pivot] + quick_sort(more)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>分治法将问题逐步分解，划分成n个子问题。使用分治法处理列表时，基线条件很可能是空数组或者只包含一个元素。</li><li>实现快速排序时，基准值可以随机选择。</li><li>快速排序的平均运行时间为O(n logn)。</li><li>虽然快速排序和归并排序的时间效率都是O(n logn)，但是快速排序往往比归并排序要快很多。这是因为大O表示法中的常量事关重大。</li><li>快速查找比简单查找和二分查找的效率高很多。</li></ul>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法分析实验四</title>
      <link href="/2018/05/27/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E5%9B%9B/"/>
      <url>/2018/05/27/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E5%9B%9B/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/21/5b02124a8dd5f.jpg" width="600" height="300" alt="git" align="center"></p><p>SWUST OJ 算法分析A（卓越软件1601）实验四</p><a id="more"></a><h1 id="作业调度方案"><a href="#作业调度方案" class="headerlink" title="作业调度方案"></a>作业调度方案</h1><p>我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。</p><p> 每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。</p><p> 例如，当n=3，m=2时，“1-1，1-2，2-1，3-1，3-2，2-2”就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。</p><p> 一方面，每个操作的安排都要满足以下的两个约束条件。</p><p> (1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；</p><p> (2) 同一时刻每一台机器至多只能加工一个工件。</p><p>另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。 </p><p>由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为“1 1 2 3 3 2”。</p><p>还要注意，“安排顺序”只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。 </p><p>例如，取n=3,m=2，已知数据如下：  </p><p>工件号 机器号/加工时间</p><p>工序 11 工序 22</p><p>11 , 1/31/3 , 2/22/2</p><p>22 , 1/21/2 , 2/52/5</p><p>33 , 2/22/2 , 1/41/4</p><p>则对于安排顺序“1 1 2 3 3 2”，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 </p><p><img src="https://i.loli.net/2018/06/10/5b1cbe8662e84.jpg" alt="2010102423271740.jpg">　 </p><p>当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。 </p><p>显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第1行为两个正整数m和n（其中m（&lt;20）表示机器数，n（&lt;20）表示工件数），用一个空格隔开：第2行：个用空格隔开的数，为给定的安排顺序。接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。<br><br>其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。后n行依次表示每个工件的每个工序的加工时间。</p><p><strong>输出</strong></p><p id="div-border-left-blue">只有一个正整数，为最少的加工时间。</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">2 3<br><br>1 1 2 3 3 2<br><br>1 2<br><br>1 2<br><br>2 1<br><br>3 2<br><br>2 5<br><br>2 4</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">10</p><h2 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h2><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j,k,l,m,n,num[<span class="number">25</span>][<span class="number">25</span>],a[<span class="number">500</span>],t[<span class="number">25</span>][<span class="number">25</span>],sum[<span class="number">25</span>],f[<span class="number">25</span>][<span class="number">1000</span>],mx[<span class="number">25</span>],ans,mt[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m*n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; i++) <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=n; i++) <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;=m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m*n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        sum[a[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (j=mt[a[i]]; j&lt;=<span class="number">1000</span>; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pd=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (k=j; k&lt;=j+t[a[i]][sum[a[i]]]<span class="number">-1</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (f[num[a[i]][sum[a[i]]]][k]==<span class="number">1</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    pd=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pd==<span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j+t[a[i]][sum[a[i]]]&gt;mx[num[a[i]][sum[a[i]]]]) mx[num[a[i]][sum[a[i]]]]=j+t[a[i]][sum[a[i]]];</span><br><span class="line">                <span class="keyword">if</span> (j+t[a[i]][sum[a[i]]]&gt;mt[a[i]]) mt[a[i]]=j+t[a[i]][sum[a[i]]];</span><br><span class="line">                <span class="keyword">for</span> (k=j; k&lt;=j+t[a[i]][sum[a[i]]]<span class="number">-1</span>; k++) f[num[a[i]][sum[a[i]]]][k]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; i++) ans=max(mx[i],ans);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Maximum-Tape-Utilization-Ratio"><a href="#Maximum-Tape-Utilization-Ratio" class="headerlink" title="Maximum Tape Utilization Ratio"></a>Maximum Tape Utilization Ratio</h1><p>设有n 个程序{1,2,…, n }要存放在长度为L的磁带上。程序i存放在磁带上的长度是li ，1 &lt; = i &lt; = n。 程序存储问题要求确定这n 个程序在磁带上的一个存储方案，使得能够在磁带上存储尽可能多的程序。在保证存储最多程序的前提下还要求磁带的利用率达到最大。 对于给定的n个程序存放在磁带上的长度，编程计算磁带上最多可以存储的程序数和占用磁带的长度。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第一行是2 个正整数，分别表示文件个数n &lt;=600和磁带的长度L&lt;=6000。接下来的1 行中，有n个正整数，表示程序存放在磁带上的长度。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">第1 行输出最多可以存储的程序数和占用磁带的长度；第2行输出存放在磁带上的每个程序的长度。 </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">9 50<br>2 3 13 8 80 20 21 22 23</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">5 49<br>2 3 13 8 23</p><h2 id="题目解读-1"><a href="#题目解读-1" class="headerlink" title="题目解读"></a>题目解读</h2><p>动态规划，优先考虑尽可能多的程序个数，如果程序个数相同再考虑程序占据的长度。</p><p>dp[i][j][0]：代表前i个程序，占据j长度，存储程序<em>个数</em>最大值</p><p>dp[i][j][1]：代表前i个程序，占据j长度，存储程序<em>长度</em>最大值</p><p>注意输入时倒序输，因为最后要回溯判断选了哪些并按顺序输出。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">605</span>][<span class="number">6005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//dp[i][j][k]</span></span><br><span class="line"><span class="comment">//k=0，前i个程序，占据j长度，存储程序个数最大值</span></span><br><span class="line"><span class="comment">//k=1，前i个程序，占据j长度，存储程序长度最大值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,L,i,j,k;</span><br><span class="line">    <span class="keyword">int</span> w[<span class="number">605</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;L;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;w[n+<span class="number">1</span>-i];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=L;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(w[i]&lt;=j &amp;&amp; dp[i<span class="number">-1</span>][j][<span class="number">0</span>] &lt; dp[i<span class="number">-1</span>][j-w[i]][<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>]=dp[i<span class="number">-1</span>][j-w[i]][<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=dp[i<span class="number">-1</span>][j-w[i]][<span class="number">1</span>]+w[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(w[i]&lt;=j &amp;&amp; dp[i<span class="number">-1</span>][j][<span class="number">0</span>] == dp[i<span class="number">-1</span>][j-w[i]][<span class="number">0</span>]+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>]=dp[i<span class="number">-1</span>][j][<span class="number">0</span>];</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=max(dp[i<span class="number">-1</span>][j][<span class="number">1</span>],dp[i<span class="number">-1</span>][j-w[i]][<span class="number">1</span>]+w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>]=dp[i<span class="number">-1</span>][j][<span class="number">0</span>];</span><br><span class="line">                dp[i][j][<span class="number">1</span>]=dp[i<span class="number">-1</span>][j][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[n][L][<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;dp[n][L][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    i=n,j=dp[n][L][<span class="number">1</span>],k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][j][<span class="number">0</span>] == dp[i<span class="number">-1</span>][j-w[i]][<span class="number">0</span>]+<span class="number">1</span> &amp;&amp; dp[i][j][<span class="number">1</span>] == dp[i<span class="number">-1</span>][j-w[i]][<span class="number">1</span>]+w[i])</span><br><span class="line">        &#123;</span><br><span class="line">            j-=w[i];</span><br><span class="line">            <span class="keyword">if</span>(k++) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Soldiers"><a href="#Soldiers" class="headerlink" title="Soldiers"></a>Soldiers</h1><p>在一个划分成网格的操场上，n个士兵散乱地站在网格点上。网格点由整数坐标(x,y)表示。士兵们可以沿网格边上、下、左、右移动一步，但在同一时刻任一网格点上只能有一名士兵。按照军官的命令，士兵们要整齐地列成一个水平队列，即排列成(x,y),(x+1,y),…,(x+n-1,y)。如何选择x 和y的值才能使士兵们以最少的总移动步数排成一列。计算使所有士兵排成一行需要的最少移动步数。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第1 行是士兵数n，1&lt; =n&lt; =10000。接下来n 行是士兵的位置，每行2个整数x和y，-10000&lt; =x，y&lt; =10000。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">第1 行中的数是士兵排成一行需要的最少移动步数。 </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">5<br>1 2<br>2 2<br>1 3<br>3 -2<br>3 3</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">8</p><h2 id="题目解读-2"><a href="#题目解读-2" class="headerlink" title="题目解读"></a>题目解读</h2><p>因为是排成一排，所以y方向必须选择一个中间值，对y左边排序取中位数。如果n是奇数，则就是中位数，如果n是偶数，就是中间两个数中的任意一个。</p><p>下面考虑x方向，需要注意的是，排好队后x坐标必须是连续的。所以说先对x排序，然后 x[i]-i 就是x每个x需要移动的最小距离，再对这个新的数组求中位数就是最佳位置。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x[<span class="number">10005</span>],y[<span class="number">10005</span>],midx,midy,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">    sort(y,y+n);</span><br><span class="line">    midy=y[n/<span class="number">2</span>];</span><br><span class="line">    sort(x,x+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        x[i]-=i;</span><br><span class="line">    sort(x,x+n);</span><br><span class="line">    midx=x[n/<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        ans+=<span class="built_in">abs</span>(midx-x[i])+<span class="built_in">abs</span>(midy-y[i]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Edit-Distance"><a href="#Edit-Distance" class="headerlink" title="Edit Distance"></a>Edit Distance</h1><p>设A 和B 是2 个字符串。要用最少的字符操作将字符串A 转换为字符串B。这里所说的字符操作包括 (1)删除一个字符； (2)插入一个字符； (3)将一个字符改为另一个字符。 将字符串A变换为字符串B 所用的最少字符操作数称为字符串A到B 的编辑距离，记为d(A,B)。试设计一个有效算法，对任给的2 个字符串A和B，计算出它们的编辑距离d(A,B)。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第一行是字符串A，文件的第二行是字符串B。字符串长度不大于2000。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">输出距离d(A,B) </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">fxpimu<br>xwr</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">5</p><h2 id="题目解读-3"><a href="#题目解读-3" class="headerlink" title="题目解读"></a>题目解读</h2><p>此题常见的思路是动态规划，令dp[i][j] 表示原字符串S[0…i] 和目标串T[0…j] 的最短编辑距离，其边界：</p><p>dp[i][0] = i, dp[0][j] = j ,我们可以得到状态转移方程：<br>$$<br>dp[i][j]=min \begin{cases} dp[i-1][j]+1,&amp;\text{S[i]不在T[0…j]中}<br>\\ dp[i][j-1]+1，&amp;\text{S[i]在T[0…j-1]中}<br>\\ dp[i-1][j-1] + 0or1，&amp;\text{S[i]在T[j]中}\end{cases}<br>$$<br>下面解释这3个式子：</p><ul><li>S[i] 不在 T[0…j]中，说明目标串里面没有源字符串的这个字符，即在某一次操作中这个字符被删除了。因为删除操作没有前后相关性，不妨将其在第一次操作中删除，进行了一次删除操作后，后续编辑操作是将长度为i-1的字符串编辑为长度为 j 的字符串，即dp[i-1][j]。</li><li>S[i] 在 T[0…j-1]中说明，S[i] 出现在 T[0…j-1]中的某个位置，不妨认为是k，因为最小编辑步数的定义，那么，在k+1到j-1的字符，必然是通过插入新字符完成的。因为共插入了(j-k)个字符，故编辑次数为(j-k)次。而字符串S[1…i]经过编辑，得到了T[1…k]，编辑次数为dp[i][k]。故： dp[i][j] = dp[i][k] + (j-k)。<ul><li>由于最后的(j-k)次是插入操作，可以讲(j-k)逐次规约到dp[i][k]中。即：dp[i][k]+(j-k)=dp[i][k+1] + (j-k-1) 规约到插入操作为1次，得到 dp[i][k]+(j-k) =dp[i][k+1] + (j-k-1) =dp[i][k+2] + (j-k-2)=… =dp[i][k+(j-k-1)] + (j-k)-(j-k-1) =dp[i][j-1] + 1。</li></ul></li><li>关于dp[i-1][j-1] + 0/1,  s[i] 在T[j]的说明：s[i]经过编辑，最终落在T[j]的位置。<ul><li>则要么s[i] == t[j]，s[i]直接落在T[j]。这种情况，编辑操作实际上是将长度为i-1的S’串，编辑成长度为j-1的T’串：即dp[i-1][j-1]；</li><li>要么s[i] ≠ t[j]，s[i] 落在T[j]后，要将s[i]修改成T[j]，即在上一种情况的基础上，增加一次修改操作：即dp[i-1][j-1] + 1。</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">2005</span>],b[<span class="number">2005</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> len1,len2,i,j,cost;</span><br><span class="line">    len1=<span class="built_in">strlen</span>(a);</span><br><span class="line">    len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=len1;i++)    dp[i][<span class="number">0</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=len2;j++)    dp[<span class="number">0</span>][j]=j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=len2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i<span class="number">-1</span>]==b[j<span class="number">-1</span>])  cost=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span>    cost=<span class="number">1</span>;</span><br><span class="line">            dp[i][j]=min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+cost,min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[len1][len2]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Independent-Task-Scheduling"><a href="#Independent-Task-Scheduling" class="headerlink" title="Independent Task Scheduling"></a>Independent Task Scheduling</h1><p>用2 台处理机A 和B 处理n 个作业。设第i 个作业交给机器A 处理时需要时间i a ，若由机器B 来处理，则需要时间i b 。由于各作业的特点和机器的性能关系，很可能对于某些i，有ai &gt;=bi，而对于某些j,j≠i，有aj &lt; bj 。既不能将一个作业分开由2 台机器处理，也没有一台机器能同时处理2 个作业。设计一个动态规划算法，使得这2 台机器处理完这n个作业的时间最短(从任何一台机器开工到最后一台机器停工的总时间)。研究一个实例： (a1,a2,a3,a4,a5,a6)＝(2,5,7,10,5,2)；(b1,b2,b3,b4,b5,b6)＝(3,8,4,11,3,4)。 对于给定的2 台处理机A 和B处理n 个作业，找出一个最优调度方案，使2台机器处理完这n 个作业的时间最短。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">第1行是1个正整数n&lt;=200, 表示要处理n个作业。 接下来的2行中，每行有n 个正整数，分别表示处理机A 和B 处理第i 个作业需要的处理时间。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">最短处理时间 </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">6<br>2 5 7 10 5 2<br>3 8 4 11 3 4</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">15</p><h2 id="题目解读-4"><a href="#题目解读-4" class="headerlink" title="题目解读"></a>题目解读</h2><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">205</span>],b[<span class="number">205</span>],t[<span class="number">2005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,k,ta=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        ta+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)    <span class="built_in">cin</span>&gt;&gt;b[j];</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=ta;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=a[k])  t[i]=min(t[i-a[k]],t[i]+b[k]);</span><br><span class="line">            <span class="keyword">else</span>    t[i]=t[i]+b[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=ta;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=min(ans,max(i,t[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Arbitrage"><a href="#Arbitrage" class="headerlink" title="Arbitrage"></a>Arbitrage</h1><p>套汇是指利用货币汇兑率的差异将一个单位的某种货币转换为大于一个单位的同种货币。例如，假定1 美元可以买0.7 英镑，1 英镑可以买9.5 法郎，且1 法郎可以买到0.16美元。通过货币兑换，一个商人可以从1 美元开始买入，得到0.7×9.5×0.16=1.064美元，从而获得6.4%的利润。 给定n 种货币c<sub>1</sub> ,c<sub>2</sub> ,… ,c<sub>n</sub>的有关兑换率，试设计一个有效算法，用以确定是否存在套汇的可能性。 </p><p><strong>输入</strong></p><p id="div-border-left-blue">含多个测试数据项。每个测试数据项的第一行中只有1 个整数n (1&lt; =n&lt; =30)，表示货币总数。其后n行给出n种货币的名称。接下来的一行中 有1 个整数m，表示有m种不同的货币兑换率。其后m行给出m种不同的货币兑换率，每行有3 个数据项c<sub>i</sub> ， r<sub>ij</sub> 和c<sub>j</sub> ，表示货币c<sub>i</sub> 和c<sub>j</sub>的兑换率为 r<sub>ij</sub>。文件最后以数字0 结束。 </p><p><strong>输出</strong></p><p id="div-border-left-blue">对每个测试数据项j，如果存在套汇的可能性则输出“Case j Yes”， 否则输出“Case j No”。 </p><p><strong>样例输入</strong></p><p id="div-border-left-blue">3<br>USDollar<br>BritishPound<br>FrenchFranc<br>3<br>USDollar 0.5 BritishPound<br>BritishPound 10.0 FrenchFranc<br>FrenchFranc 0.21 USDollar<br><br>3<br>USDollar<br>BritishPound<br>FrenchFranc<br>6<br>USDollar 0.5 BritishPound<br>USDollar 4.9 FrenchFranc<br>BritishPound 10.0 FrenchFranc<br>BritishPound 1.99 USDollar<br>FrenchFranc 0.09 BritishPound<br>FrenchFranc 0.19 USDollar<br>0</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">Case 1 Yes<br>Case 2 No</p><h2 id="题目解读-5"><a href="#题目解读-5" class="headerlink" title="题目解读"></a>题目解读</h2><p>看到题目之后首先想到的就是转换成图的问题，每个货币单位对应一个节点，计算一个节点经过其他节点最后回到自己时的路径（算路径时不时传统的权值相加，而应该是相乘）是否大于1的问题。关键问题就在于怎么把输入的数据转换成图…</p><p>思路就是先读入所有的name，然后循环找输入进来的每一条汇率中的两个国名分别是name中的第几个，对应的rank[j][k]就是汇率值。找的方法就是循环，用strcmp做为终止条件（即str1==str2），记录下标就可以把对应的rank[j][k]置为对应的汇率值。</p><p>接下来就是一个Floyd算法的变形，标准的Floyd应该是加法，因为最短路径是求每一段路程的总和；而这里应该是乘法，因为算汇率是乘法。如果找到汇率大于1的情况，就说明可以套汇，否则不能套汇。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j,k,cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">float</span> x,rank[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">35</span>][<span class="number">35</span>],a[<span class="number">35</span>],b[<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt; n&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)    <span class="built_in">cin</span>&gt;&gt;name[i];</span><br><span class="line">        <span class="built_in">memset</span>(rank,<span class="number">0.0</span>,<span class="keyword">sizeof</span>(rank));</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;x&gt;&gt;b;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;<span class="built_in">strcmp</span>(a,name[j]);j++);</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>;<span class="built_in">strcmp</span>(b,name[k]);k++);</span><br><span class="line">            rank[j][k]=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            rank[i][i]=max(<span class="keyword">float</span>(<span class="number">1.0</span>),rank[i][i]);</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                    rank[i][j]=max(rank[i][j],rank[i][k]*rank[k][j]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(rank[i][i]&gt;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;n)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;cnt++&lt;&lt;<span class="string">" Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;cnt++&lt;&lt;<span class="string">" No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记3</title>
      <link href="/2018/05/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
      <url>/2018/05/26/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第三章的学习笔记</p><a id="more"></a><h1 id="第三章-递归"><a href="#第三章-递归" class="headerlink" title="第三章 递归"></a>第三章 递归</h1><h2 id="递归的核心思想"><a href="#递归的核心思想" class="headerlink" title="递归的核心思想"></a>递归的核心思想</h2><p>现在有一个盒子，盒子里还有盒子，要找到藏在某个盒子里的钥匙。</p><p>非递归思想（循环）：</p><p><img src="https://i.loli.net/2018/05/26/5b09121372218.png" alt="递归2.png"></p><p>递归思想：</p><p><img src="https://i.loli.net/2018/05/26/5b091150456a6.png" alt="递归1.png"></p><p>简单来说：递归的思想就是函数自己调用自己。</p><h2 id="基线条件和递归条件"><a href="#基线条件和递归条件" class="headerlink" title="基线条件和递归条件"></a>基线条件和递归条件</h2><p>编写函数时，必须告诉它何时停止递归。正因如此，每个递归函数都有两个部分：基线条件和递归条件。递归条件指的是函数调用自己，而基线条件则值的是函数不再调用自己，从而避免形成无限循环。</p><h2 id="递归求阶乘"><a href="#递归求阶乘" class="headerlink" title="递归求阶乘"></a>递归求阶乘</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * factorial(x<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记2</title>
      <link href="/2018/05/24/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2018/05/24/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"></p><p>第二章的学习笔记</p><a id="more"></a> <h1 id="第二章-选择排序"><a href="#第二章-选择排序" class="headerlink" title="第二章 选择排序"></a>第二章 选择排序</h1><blockquote><p>本章主要学习两种最基本的数据结构——数组和链表。</p><p>同时还要学习一种排序算法——选择排序。</p></blockquote><h2 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>对于数组来说，随机的读取元素时很高效，因为直接根据数组的下标就可以找到对应的元素。</p><p>但是数组的不便之处在于，需要提前申明数组的大小，如果需要存的数据量大于申明的数组大小，就无法存储多余的数据，如果用不完就会造成一定的内存浪费。</p><p>数组的另外一个不足之处就是，不便于进行插入、删除操作。如果要在数组的中间插入一个元素，要先将它后面的数据整体向后移动一个位置，才能插入新的元素，效率低下。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表无需申明长度，可以随意进行元素的添加，在链表中，每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一次。这种数据结构的优势就是，便于进行插入、删除操作，只需将上一个元素存储的下一个元素地址指向待插入的元素地址，再把待插入的元素存储下一个元素地址，就完成了插入操作，比数组方便很多。</p><p>但是反过来，链表就不便于进行随机地读取元素了，因为并不知道待查找的元素的位置，所以需要一个一个的查，直到找到为止。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">数组</th><th style="text-align:center">链表</th></tr></thead><tbody><tr><td style="text-align:center">读取</td><td style="text-align:center">O(1)</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">插入</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">删除</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(1)</td></tr></tbody></table><p>O(n) = 线性时间</p><p>O(n) = 常量时间</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>数组和链表哪个用的更多呢？需要看具体情况。</p><p>有两种访问方式：随机访问和顺序访问。</p><p>顺序访问意味着从一个元素开始逐个地址读取元素，链表只能顺序访问。</p><p>随机访问意味着可以直接跳到第10个元素，数组可以随机访问。</p><p>因为在大部分情况下，我们需要随机访问，所以还是数组使用的更多。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>既然是排序算法，就是给出一串无序的数组，然后编程使他们按照从小到大或者从大到小的顺序排列。</p><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>选择排序的思想很简单：首先找到所有数里最小的元素，把它存放在新的数组中，然后再在剩下的（n-1）个元素中找到最小的元素，并存放在新数组里面，以此类推，每次都在剩下的数中挑选出最小的存成新的数组，直到选完为止。</p><h3 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSmallest</span><span class="params">(arr)</span>:</span></span><br><span class="line">    smallest = arr[<span class="number">0</span>]  <span class="comment">#存储最小的值</span></span><br><span class="line">    smallest_index = <span class="number">0</span> <span class="comment">#存储最小值的索引</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(arr)):</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; smallest):</span><br><span class="line">            smallest = arr[i]</span><br><span class="line">            smallest_index = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> smallest_index</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    newArr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        smallest_index = findSmallest(arr)</span><br><span class="line">        newArr.append(arr.pop(smallest_index))</span><br><span class="line">        <span class="comment">#每次都找到最小的元素存入新数组，并在原来数组里删除掉</span></span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(selection_sort([<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">10</span>]))</span><br></pre></td></tr></table></figure><h3 id="C-C-代码"><a href="#C-C-代码" class="headerlink" title="C/C++代码"></a>C/C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,min;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;len;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[min])</span><br><span class="line">                min=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min!=i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=arr[min];</span><br><span class="line">            arr[min]=arr[i];</span><br><span class="line">            arr[i]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    selection_sort(arr,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>每比较一次，就需要遍历一遍数组，所以每一次比较的时间复杂度都是O(n)，需要比较n次，所以选择排序的时间复杂度是O(n<sup>2</sup>)。</p><p>遗留问题：</p><p>随着排序的进行，每次需要比较的元素数在减小，最后一次需要检查的元素都只有一个，为什么是n个O(n)呢？</p><p>因为平均每次检查的元素个数为n/2,因此运行时间为O(n * n/2)，但是大O表示法省略诸如1/2这样的常数，因此简写为O(n)。</p>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《算法图解》学习笔记1</title>
      <link href="/2018/05/22/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2018/05/22/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/算法图解.jpg" width="600" height="300" alt="git" align="center"> </p><p>《算法图解》像小说一样有趣的算法入门书，作者推崇图解式写作风格，生动易读。就我个人而言，算法一直是弱项，这次想花一个月的时间，坚持打卡学习，争取能在算法能力上取得一定的提升。</p><p>本书采用python语言编写，由于大部分ACM程序设计大赛都是用C/C++或java，所以我不仅用python编写，还会尽量用C/C++写代码。</p><a id="more"></a><h1 id="第一章-算法简介"><a href="#第一章-算法简介" class="headerlink" title="第一章 算法简介"></a>第一章 算法简介</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h3><p><strong>二分查找</strong>，也叫折半查找，是一种在<strong>有序数组</strong>中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。 </p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>举个例子，给出一串有序数组：[10,20,30,40,50,60,70,80,90]</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th></tr></thead><tbody><tr><td style="text-align:center">数字</td><td style="text-align:center">10</td><td style="text-align:center">20</td><td style="text-align:center">30</td><td style="text-align:center">40</td><td style="text-align:center">50</td><td style="text-align:center">60</td><td style="text-align:center">70</td><td style="text-align:center">80</td><td style="text-align:center">90</td></tr></tbody></table><p>现在想要寻找80在哪个位置，蛮力法即是循环遍历数组中的每个元素，当遍历到的元素正好等于80时，就找到了，对于这个数组，需要查询8次。</p><p>而二分法的思想是，先看中间第5号元素是多少，结果是50，这样就把前面5个元素排除掉了，因为要找的90比50还大；现在只需要在5号到10号中间选，再挑选中间的7号元素查看，发现是70，还是比90小，那么前7个元素都被排除了；再在7到9之间选中间的8号元素查看，正好是80，就找到了，只查询了3次。</p><p>可以想象，随着元素的增多，二分法查找的效率会明显高于蛮力法，这就是二分法查找算法的优势。</p><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list,item)</span>:</span></span><br><span class="line">    <span class="comment">#用low和high代表需要查找的区间范围</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high):</span><br><span class="line">    <span class="comment">#只要范围没有缩小到只剩一个元素</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span> <span class="comment">#中间的元素</span></span><br><span class="line">        <span class="comment">#（"//"运算符代表取整除，返回商的整数部分，否则如果是小数，就无法在数组中查询了）</span></span><br><span class="line">        guess = list[mid] <span class="comment">#查看中间元素对应的值</span></span><br><span class="line">        <span class="keyword">if</span>(guess == item): <span class="comment">#找到了</span></span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span>(guess &gt; item): <span class="comment">#猜大了</span></span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="comment">#猜小了</span></span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span> <span class="comment">#没找到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">    print(binary_search(my_list, <span class="number">3</span>))</span><br><span class="line">    print(binary_search(my_list, <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>C/C++代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> item)</span> <span class="comment">//传入数组的长度和需要查找的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>,high = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]==item)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]&gt; item)high=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]&lt; item)low=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,binary_search(<span class="number">5</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,binary_search(<span class="number">5</span>,<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大O表示法"><a href="#大O表示法" class="headerlink" title="大O表示法"></a>大O表示法</h3><blockquote><p>在计算机科学中，算法的时间复杂度是一个函数，它定性描述该算法的运行时间，这是一个代表算法输入值的字符串的长度的函数。时间复杂度通常用大<em>O</em>表示。</p></blockquote><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>下面做一个实验，分别比较同种操作系统下、同种规模的数据量（1到10<sup>5</sup>、10<sup>6</sup>、10<sup>7</sup>），二分法和蛮力查找最后一个元素时，所花费的时间。</p><p>python中计算运行时间的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t0 = time.clock()</span><br><span class="line">binary_search(list,item)</span><br><span class="line">print(<span class="string">"process time:"</span>, time.clock() - t0)</span><br></pre></td></tr></table></figure><p>python中蛮力法遍历查找的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rude_search</span><span class="params">(num_list,item)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index,element <span class="keyword">in</span> enumerate(num_list):</span><br><span class="line">        <span class="keyword">if</span>(element == item):</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">    print(rude_search(my_list, <span class="number">3</span>))</span><br><span class="line">    print(rude_search(my_list, <span class="number">-1</span>))</span><br></pre></td></tr></table></figure><p>下面是运行时间的比较,我们做出曲线图：</p><p><img src="https://i.loli.net/2018/05/22/5b03d16c437cc.png" alt="图片1.png"></p><p>这时我们就会发现一个问题，仅知道算法需要多长时间才能运行完毕还不够，还需要知道运行时间如何随列表增长而增加，这正是大<em>O</em>的用武之地。</p><h4 id="大O"><a href="#大O" class="headerlink" title="大O"></a>大<em>O</em></h4><p>大<em>O</em>指出了算法有多快。例如，假设列表有n个元素，蛮力法查找需要检查每个元素，因此需要（最多）执行n次操作。使用大<em>O</em>表示法，这个运行时间为O(n)，没有单位，因为大<em>O</em>表示法让你能够比较<span id="inline-blue">操作次数</span>，它指出了<strong>算法运行时间的增速</strong>。</p><h4 id="常见的大O运行时间"><a href="#常见的大O运行时间" class="headerlink" title="常见的大O运行时间"></a>常见的大<em>O</em>运行时间</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">算法举例</th></tr></thead><tbody><tr><td style="text-align:center">对数时间</td><td style="text-align:center">O(log n)</td><td style="text-align:center">二分查找</td></tr><tr><td style="text-align:center">线性时间</td><td style="text-align:center">O(n)</td><td style="text-align:center">遍历数组</td></tr><tr><td style="text-align:center">线性迭代对数时间</td><td style="text-align:center">O(n * log n)</td><td style="text-align:center">快速排序</td></tr><tr><td style="text-align:center">二次时间</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">选择排序</td></tr><tr><td style="text-align:center">阶乘时间</td><td style="text-align:center">O(n!)</td><td style="text-align:center">旅行商问题</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动态规划（上）</title>
      <link href="/2018/05/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2018/05/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="/images/摘要配图/Brussels, Belgium.jpg" width="600" height="300" alt="git" align="center"> </p><p><strong>动态规划</strong>（英语：Dynamic programming，简称DP） 常常适用于有重叠子问题 和最优子性质的问题。</p><a id="more"></a><h1 id="动态规划（上）"><a href="#动态规划（上）" class="headerlink" title="动态规划（上）"></a>动态规划（上）</h1><p><strong>动态规划</strong>（英语：Dynamic programming，简称DP） 常常适用于有重叠子问题 和最优子性质的问题。</p><p>动态规划背后的基本思想非常简单。大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p><p>通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量：一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。</p><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>斐波那契数列可以以递归的方式来定义：</p><ul><li>F<sub>0</sub> = 0</li><li>F<sub>1</sub> = 1</li><li>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub> （n&gt;=2)</li></ul><p>用文字来说，就是斐波那契数列由0和1开始，之后的数就是前面连个数之和：0,1,1,2,3,5,8,13……</p><p>求解斐波那契数列时，可以直接使用递归的定义方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span> || n==<span class="number">1</span>)<span class="keyword">return</span> n;</span><br><span class="line">  <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的定义方式便于理解，但是有一个问题：对于相似的子问题进行了大量重复的计算，例如在求fib(5)时，经历了这样的步骤：</p><ol><li>fib(5)</li><li>fib(4) + fib(3)</li><li>( fib(3) + fib(2) ) + ( fib(2) + fib(1) )</li><li>[ ( fib(2) + fib(1) ) + ( fib(1) + fib(0) ) ] + [ ( fib(1) + fib(0) ) + fib(1) ]</li><li>[ ( ( fib(1) + fib(0) ) + fib(1) ) + ( fib(1) + fib(0) ) ] + [ ( fib(1) + fib(0) ) + fib(1) ]</li></ol><p>由这个过程可以看出，这样递归的方法会重复计算多次fib(2)、fib(3)，因此效率很低，如果将前n个已经计算出来了的 fib(i) 存在一个数组中，这样在后面的计算中，就可以直接调用数组中存储的值，而避免了重复计算。这种思想就是动态规划的思想。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">0</span>)dp[n]=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)dp[n]=<span class="number">1</span>;</span><br><span class="line">  dp[n]=dp[n<span class="number">-1</span>]+dp[n<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="收集硬币问题"><a href="#收集硬币问题" class="headerlink" title="收集硬币问题"></a>收集硬币问题</h2><p>有一串数字，现在需要取出一些数组，取数规则就是不能选两个相邻的数。现在需要计算在这种规则下，能取到的数字之和最大是多少。 例如以下这一串数字：</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">num</td><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">2</td></tr></tbody></table><p>现在定义一个数组dp[ ],dp[i]代表选择到第i个硬币时，能得到的最大金额数。</p><p>以dp[5]为例，此时有两种选择：</p><ul><li>选5号（那就不能选4号）：dp[3]+num[5]</li><li>不选5号（就可以选4号）：dp[4]</li></ul><p>这样就可以推导出状态方程：<br>$$<br>\begin{cases}<br>dp[i] = max( dp[i-2] + num[i] , dp[i-1] )<br>\dp[0] = num[0]<br>\dp[1] = max( num[0], num[1] )<br>\end{cases}<br>$$<br>这样就可以敲代码了，如果使用递归的方法，会产生很多重叠子问题，运算速度慢，效率为O(n^2^)。所以不使用递归方法，而是建立一个dp数组，然后循环填表，一次把dp[0],dp[1],dp[2]……的值计算出来，最后最优解即是dp[n-1]。</p><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a&gt;b)?a:b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10000</span>],dp[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>]=num[<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">1</span>]=max(num[<span class="number">0</span>],num[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=max(dp[i<span class="number">-2</span>]+num[i],dp[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\r\n"</span>,dp[n<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>opencv-python人脸识别应用</title>
      <link href="/2018/05/08/opencv-python%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%BA%94%E7%94%A8/"/>
      <url>/2018/05/08/opencv-python%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/09/5af1cb1dc5cb1.jpg" width="600" height="300" alt="git" align="center"></p><p>利用OpenCV和python环境实现简单的人脸识别应用：识别人脸并框处人脸、检测并框处人的眼睛、检测笑脸、并框处笑脸。</p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>系统环境：win7</li><li>python版本：python3.6.3</li><li>已存在vs2015（OpenCV需要C++环境）</li><li>OpenCV</li></ul><h1 id="关于OpenCV自带的分类器"><a href="#关于OpenCV自带的分类器" class="headerlink" title="关于OpenCV自带的分类器"></a>关于OpenCV自带的分类器</h1><p>OpenCV 是一个跨平台的计算机视觉库，它实现了图像处理和计算机视觉方面的很多通用算法，是一个非常强大的开源库。</p><p>OpenCV项目源码中有很多训练好的Haar分类器。</p><p><img src="https://i.loli.net/2018/05/08/5af1c949149c5.png" alt="分类器.png"></p><p>这些xml文件是已经训练好的数据，可以直接调用，进而达到识别分类的功能。本文不训练数据，直接使用这些OpenCV库中自带的方法进行人脸识别。</p><h1 id="找到图像中人脸的位置"><a href="#找到图像中人脸的位置" class="headerlink" title="找到图像中人脸的位置"></a>找到图像中人脸的位置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#detectFaces()返回图像中所有人脸的矩形坐标（矩形左上、右下顶点）</span></span><br><span class="line"><span class="comment">#使用haar特征的级联分类器haarcascade_frontalface_default.xml，在haarcascades目录下还有其他的训练好的xml文件可供选择。</span></span><br><span class="line"><span class="comment">#注：haarcascades目录下训练好的分类器必须以灰度图作为输入。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    face_cascade = cv2.CascadeClassifier(<span class="string">"D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_frontalface_default.xml"</span>)</span><br><span class="line">    <span class="comment">#分类器函数中的参数就是xml文件的具体位置</span></span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img <span class="comment">#if语句：如果img维度为3，说明不是灰度图，先转化为灰度图gray，如果不为3，也就是2，原图就是灰度图</span></span><br><span class="line"></span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, <span class="number">1.2</span>, <span class="number">5</span>)<span class="comment">#1.3和5是特征的最小、最大检测窗口，它改变检测结果也会改变</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x,y,width,height) <span class="keyword">in</span> faces:</span><br><span class="line">        result.append((x,y,x+width,y+height))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>函数最终返回一个列表，包含识别出来的人脸的左上、右上、左下、右下4个定点的坐标。</p><h1 id="框出人脸"><a href="#框出人脸" class="headerlink" title="框出人脸"></a>框出人脸</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在原图像上画矩形，框出所有人脸。</span></span><br><span class="line"><span class="comment">#调用Image模块的draw方法，Image.open获取图像句柄，ImageDraw.Draw获取该图像的draw实例，然后调用该draw实例的rectangle方法画矩形(矩形的坐标即</span></span><br><span class="line"><span class="comment">#detectFaces返回的坐标)，outline是矩形线条颜色(B,G,R)。</span></span><br><span class="line"><span class="comment">#注：原始图像如果是灰度图，则去掉outline，因为灰度图没有RGB可言。drawEyes、detectSmiles也一样。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line">    <span class="keyword">if</span> faces:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">255</span>, <span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        img.save(<span class="string">'drawfaces_'</span>+image_name)</span><br></pre></td></tr></table></figure><p>效果如图，可以看到正面人脸都被识别出来了，有一处判断错误的地方。</p><p><img src="https://i.loli.net/2018/05/09/5af1cb1dc5cb1.jpg" alt="drawfaces_obama.jpg"></p><h1 id="检测眼睛"><a href="#检测眼睛" class="headerlink" title="检测眼睛"></a>检测眼睛</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测眼睛，返回坐标</span></span><br><span class="line"><span class="comment">#由于眼睛在人脸上，我们往往是先检测出人脸，再细入地检测眼睛。故detectEyes可在detectFaces基础上来进行，代码中需要注意“相对坐标”。</span></span><br><span class="line"><span class="comment">#当然也可以在整张图片上直接使用分类器,这种方法代码跟detectFaces一样，这里不多说。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectEyes</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    eye_cascade = cv2.CascadeClassifier(<span class="string">'D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_eye.xml'</span>)</span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">        roi_gray = gray[y1:y2, x1:x2]</span><br><span class="line">        eyes = eye_cascade.detectMultiScale(roi_gray,<span class="number">1.3</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> (ex,ey,ew,eh) <span class="keyword">in</span> eyes:</span><br><span class="line">            result.append((x1+ex,y1+ey,x1+ex+ew,y1+ey+eh))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>使用眼睛的分类器进行分类，将四个顶点的坐标保存在列表里。</p><h1 id="框出眼睛"><a href="#框出眼睛" class="headerlink" title="框出眼睛"></a>框出眼睛</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在原图像上框出眼睛.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawEyes</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    eyes = detectEyes(image_name)</span><br><span class="line">    <span class="keyword">if</span> eyes:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> eyes:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">0</span>, <span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">        img.save(<span class="string">'draweyes_'</span>+image_name)</span><br></pre></td></tr></table></figure><p>效果如图，识别的还不算太精准：</p><p><img src="https://i.loli.net/2018/05/09/5af1cd80da33d.jpg" alt="draweyes_obama.jpg"></p><h1 id="检验笑脸"><a href="#检验笑脸" class="headerlink" title="检验笑脸"></a>检验笑脸</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检测笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectSmiles</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    smiles_cascade = cv2.CascadeClassifier(<span class="string">'D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_smile.xml'</span>)</span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img <span class="comment">#if语句：如果img维度为3，说明不是灰度图，先转化为灰度图gray，如果不为3，也就是2，原图就是灰度图</span></span><br><span class="line"></span><br><span class="line">    smiles = smiles_cascade.detectMultiScale(gray,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x,y,width,height) <span class="keyword">in</span> smiles:</span><br><span class="line">        result.append((x,y,x+width,y+height))</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h1 id="框出笑脸"><a href="#框出笑脸" class="headerlink" title="框出笑脸"></a>框出笑脸</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在原图像上框出笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawSmiles</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    smiles = detectSmiles(image_name)</span><br><span class="line">    <span class="keyword">if</span> smiles:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> smiles:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">100</span>, <span class="number">100</span>,<span class="number">0</span>))</span><br><span class="line">        img.save(<span class="string">'drawsmiles_'</span>+image_name)</span><br></pre></td></tr></table></figure><p>效果如图：</p><p><img src="https://i.loli.net/2018/05/09/5af1cdeb87368.jpg" alt="drawsmiles_obama.jpg"></p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</span><br><span class="line"></span><br><span class="line"><span class="comment">#detectFaces()返回图像中所有人脸的矩形坐标（矩形左上、右下顶点）</span></span><br><span class="line"><span class="comment">#使用haar特征的级联分类器haarcascade_frontalface_default.xml，在haarcascades目录下还有其他的训练好的xml文件可供选择。</span></span><br><span class="line"><span class="comment">#注：haarcascades目录下训练好的分类器必须以灰度图作为输入。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    face_cascade = cv2.CascadeClassifier(<span class="string">"D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_frontalface_default.xml"</span>)</span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img <span class="comment">#if语句：如果img维度为3，说明不是灰度图，先转化为灰度图gray，如果不为3，也就是2，原图就是灰度图</span></span><br><span class="line"></span><br><span class="line">    faces = face_cascade.detectMultiScale(gray, <span class="number">1.2</span>, <span class="number">5</span>)<span class="comment">#1.3和5是特征的最小、最大检测窗口，它改变检测结果也会改变</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x,y,width,height) <span class="keyword">in</span> faces:</span><br><span class="line">        result.append((x,y,x+width,y+height))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存人脸图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line">    <span class="keyword">if</span> faces:</span><br><span class="line">        <span class="comment">#将人脸保存在save_dir目录下。</span></span><br><span class="line">        <span class="comment">#Image模块：Image.open获取图像句柄，crop剪切图像(剪切的区域就是detectFaces返回的坐标)，save保存。</span></span><br><span class="line">        save_dir = image_name.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">"_faces"</span></span><br><span class="line">        os.mkdir(save_dir)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">            file_name = os.path.join(save_dir,str(count)+<span class="string">".jpg"</span>)</span><br><span class="line">            Image.open(image_name).crop((x1,y1,x2,y2)).save(file_name)</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在原图像上画矩形，框出所有人脸。</span></span><br><span class="line"><span class="comment">#调用Image模块的draw方法，Image.open获取图像句柄，ImageDraw.Draw获取该图像的draw实例，然后调用该draw实例的rectangle方法画矩形(矩形的坐标即</span></span><br><span class="line"><span class="comment">#detectFaces返回的坐标)，outline是矩形线条颜色(B,G,R)。</span></span><br><span class="line"><span class="comment">#注：原始图像如果是灰度图，则去掉outline，因为灰度图没有RGB可言。drawEyes、detectSmiles也一样。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawFaces</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line">    <span class="keyword">if</span> faces:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">255</span>, <span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        img.save(<span class="string">'drawfaces_'</span>+image_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检测眼睛，返回坐标</span></span><br><span class="line"><span class="comment">#由于眼睛在人脸上，我们往往是先检测出人脸，再细入地检测眼睛。故detectEyes可在detectFaces基础上来进行，代码中需要注意“相对坐标”。</span></span><br><span class="line"><span class="comment">#当然也可以在整张图片上直接使用分类器,这种方法代码跟detectFaces一样，这里不多说。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectEyes</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    eye_cascade = cv2.CascadeClassifier(<span class="string">'D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_eye.xml'</span>)</span><br><span class="line">    faces = detectFaces(image_name)</span><br><span class="line"></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> faces:</span><br><span class="line">        roi_gray = gray[y1:y2, x1:x2]</span><br><span class="line">        eyes = eye_cascade.detectMultiScale(roi_gray,<span class="number">1.3</span>,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> (ex,ey,ew,eh) <span class="keyword">in</span> eyes:</span><br><span class="line">            result.append((x1+ex,y1+ey,x1+ex+ew,y1+ey+eh))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在原图像上框出眼睛.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawEyes</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    eyes = detectEyes(image_name)</span><br><span class="line">    <span class="keyword">if</span> eyes:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> eyes:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">0</span>, <span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">        img.save(<span class="string">'draweyes_'</span>+image_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检测笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detectSmiles</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    img = cv2.imread(image_name)</span><br><span class="line">    smiles_cascade = cv2.CascadeClassifier(<span class="string">'D:\OpenCV Library\opencv\sources\data\haarcascades\haarcascade_smile.xml'</span>)</span><br><span class="line">    <span class="keyword">if</span> img.ndim == <span class="number">3</span>:</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gray = img <span class="comment">#if语句：如果img维度为3，说明不是灰度图，先转化为灰度图gray，如果不为3，也就是2，原图就是灰度图</span></span><br><span class="line"></span><br><span class="line">    smiles = smiles_cascade.detectMultiScale(gray,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> (x,y,width,height) <span class="keyword">in</span> smiles:</span><br><span class="line">        result.append((x,y,x+width,y+height))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#在原图像上框出笑脸</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawSmiles</span><span class="params">(image_name)</span>:</span></span><br><span class="line">    smiles = detectSmiles(image_name)</span><br><span class="line">    <span class="keyword">if</span> smiles:</span><br><span class="line">        img = Image.open(image_name)</span><br><span class="line">        draw_instance = ImageDraw.Draw(img)</span><br><span class="line">        <span class="keyword">for</span> (x1,y1,x2,y2) <span class="keyword">in</span> smiles:</span><br><span class="line">            draw_instance.rectangle((x1,y1,x2,y2), outline=(<span class="number">100</span>, <span class="number">100</span>,<span class="number">0</span>))</span><br><span class="line">        img.save(<span class="string">'drawsmiles_'</span>+image_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    drawFaces(<span class="string">'obama.jpg'</span>)</span><br><span class="line">    drawEyes(<span class="string">'obama.jpg'</span>)</span><br><span class="line">    drawSmiles(<span class="string">'obama.jpg'</span>)</span><br><span class="line">    saveFaces(<span class="string">'obama.jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">上面的代码将眼睛、人脸、笑脸在不同的图像上框出，如果需要在同一张图像上框出，改一下代码就可以了。</span></span><br><span class="line"><span class="string">总之，利用opencv里训练好的haar特征的xml文件，在图片上检测出人脸的坐标，利用这个坐标，我们可以将人脸区域剪切保存，也可以在原图上将人脸框出。剪切保存人脸以及用矩形工具框出人脸，本程序使用的是PIL里的Image、ImageDraw模块。</span></span><br><span class="line"><span class="string">此外，opencv里面也有画矩形的模块，同样可以用来框出人脸。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>OpenCV自带的分类器使用起来比较简单，对于标准的人脸图片识别的准确率比较高，但是也有误判的现象，特别是笑脸的判断不够精准，还有待完善。</p><p>后期可以使用OpenCV制作分类器，大致分为3步：</p><ul><li>制作训练集的数据集</li><li>训练分类器</li><li>使用分类器进行分类</li></ul>]]></content>
      
      <categories>
          
          <category> onpencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法分析实验三</title>
      <link href="/2018/05/04/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
      <url>/2018/05/04/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/21/5b02124a8dd5f.jpg" width="600" height="300" alt="git" align="center"></p><p>SWUST OJ 算法分析A（卓越软件1601）实验三</p><a id="more"></a><h2 id="简单背包问题"><a href="#简单背包问题" class="headerlink" title="简单背包问题"></a>简单背包问题</h2><p>设有一个背包可以放入的物品重量为S，现有n件物品，重量分别是w1，w2，w3，…wn。 </p><p>问能否从这n件物品中选择若干件放入背包中，使得放入的重量之和正好为S。 </p><p>如果有满足条件的选择，则此背包有解，否则此背包问题无解。</p><p><strong>输入 </strong></p><p id="div-border-left-blue">输入数据有多行，假设背包可以放入的物品重量为S，物品的件数n，以及每件物品的重量（输入数据均为正整数）。<br><br>多组测试数据。</p><p><strong>输出</strong></p><p id="div-border-left-blue">对于每个测试实例，若满足条件则输出“YES”，若不满足则输出“NO“。</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">20 5<br><br>1 3 5 7 9</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">YES</p><h3 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h3><p>思想就是先把所有的物品都放入背包，然后再一件一件的往外拿，当拿出之后：</p><ul><li>当背包被取空了时，就表明有解；</li><li>当拿完所有物品后，背包质量还不等于weight，就无解；</li><li>当第n个物品没有取出，而n-1个被取出时，背包的质量等于weight，就有解。</li><li>假设第n－1个物品取出来了，依然往下取，这时背包的weight变成weight-data[n]。</li></ul><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bag</span><span class="params">(<span class="keyword">int</span> weight,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(weight==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span> &amp;&amp; weight!=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(bag(weight,n<span class="number">-1</span>)==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> bag(weight-data[n],n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> weight,n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;weight,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bag(weight,n)==<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Buyer"><a href="#Buyer" class="headerlink" title="Buyer"></a>Buyer</h2><p>哆啦A梦班级举办个party，当然吃的东西必不可少，哆啦A梦负责采购任务，他得到了一份清单，上面注明不同食品的受欢迎程度，哆啦A梦需要用一定的价钱尽可能达到的更大的受欢迎程度！例如，瓜子的受欢迎程度为20，瓜子的价钱是50元，那么如果哆啦A梦选择买瓜子，将花费50元，但受欢迎程度增加了20。为了避免食品单调性，每种食品只能买一份，不能重复购买。 现在哆啦A梦需要知道如何采购才能达到最大的受欢迎程度，你能帮助他吗？</p><p><strong>输入</strong></p><p id="div-border-left-blue">输入数据为多组，每组输入的第一行有两个正整数M和N(M&lt;100&amp;&amp;N&lt;1000)，分别为哆啦A梦可以支配的钱数和清单上的可选择的物品种类。 接下来的N行每行有两个正整数,分别为每种物品的价钱和它的受欢迎程度（编号为1到N）。</p><p><strong>输出</strong></p><p id="div-border-left-blue">如果存在物品购买，那么输出的第一行为能够达到的最大的受欢迎程度。第二行为需要购买的物品的编号（如果有多种可能，输出字典序靠前的那种），空格分隔每个数字；如没有物品可以购买，输出只有一行，为数字0。</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">10 4<br><br>100 5<br><br>5 5<br><br>5 5<br><br>10 10</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">10<br><br>2 3</p><h3 id="题目解读-1"><a href="#题目解读-1" class="headerlink" title="题目解读"></a>题目解读</h3><p>这道题就是01背包问题，金额限定M代表背包的容量，每种物品的价格代表物品的重量w[ ]，每种物品的价值用v[ ]表示。</p><h4 id="动态规划求解"><a href="#动态规划求解" class="headerlink" title="动态规划求解"></a>动态规划求解</h4><p>构造一个二维数组dp[N][M]，N行（N个物品),M列（M为容量能使用的最大金额)。二维数组dp[i][j]的含义是：当拿到第i个物品，不超过金额 j 时的最大价值。一行一行的循环填表：</p><ul><li>如果当前的限额超过了该物品的价值，表示可以取该物品,需要选择最优解：<ul><li>如果不取，当前价值为dp[i-1][j]</li><li>如果取，当前价值为dp[i-1][ j-w[i] ]+v[i]（指考虑了i-1件物品，背包容量为 j-w[i] 时的价值加上拿取的这件物品的价值）</li></ul></li><li>如果当前的限额低于这件物品的价值，就不能拿取这个物品：<ul><li>当前价值为dp[i-1][j]</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=M;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">            dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回溯检验是否取了物品"><a href="#回溯检验是否取了物品" class="headerlink" title="回溯检验是否取了物品"></a>回溯检验是否取了物品</h4><p>另外创建一个一维数组x[N]，下标代表物品对应的编号，0代表没有取，1代表取了。</p><p>由于dp[i][M]为最优解，如果dp[i][M]=dp[i-1][M]，那就说明有没有第i件物品都一样，那么x[i]=0，否则x[i]=1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traceback</span><span class="params">(<span class="keyword">int</span> M,<span class="keyword">int</span> N)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;<span class="number">1</span>;i--)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(dp[i][M]==dp[i<span class="number">-1</span>][M])  </span><br><span class="line">            x[i]=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            x[i]=<span class="number">1</span>;  </span><br><span class="line">            M-=w[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    x[<span class="number">1</span>]=(dp[<span class="number">1</span>][M]&gt;<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出问题（小心PE）"><a href="#输出问题（小心PE）" class="headerlink" title="输出问题（小心PE）"></a>输出问题（小心PE）</h4><ul><li>首先输出一行最大价值，换行；</li><li>然后输出取出来的物品，中间用一个空格隔开，注意最后一个数后面没有空格，而是换行；</li><li>多组输入，所以当最大价值为0时，输出0然后continue再次进入新的循环</li></ul><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1005</span>],w[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traceback</span><span class="params">(<span class="keyword">int</span> M,<span class="keyword">int</span> N)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;<span class="number">1</span>;i--)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(dp[i][M]==dp[i<span class="number">-1</span>][M])  </span><br><span class="line">            x[i]=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            x[i]=<span class="number">1</span>;  </span><br><span class="line">            M-=w[i];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    x[<span class="number">1</span>]=(dp[<span class="number">1</span>][M]&gt;<span class="number">0</span>)?<span class="number">1</span>:<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M,N,i,j;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;M,&amp;N)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=M;j++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">                    dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        traceback(M,N);</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[i]==<span class="number">1</span>)</span><br><span class="line">                sum+=v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x[i]==<span class="number">1</span> &amp;&amp; flag==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x[i]==<span class="number">1</span> &amp;&amp; flag==<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="售货员的难题"><a href="#售货员的难题" class="headerlink" title="售货员的难题"></a>售货员的难题</h2><p>某乡有n个村庄（1&lt; n &lt; 20），有一个售货员，他要到各个村庄去售货，各村庄之间的路程s（0 &lt; s &lt; 1000）是已知的，且A村到B村与B村到A村的路大多不同。为了提高效率，他从商店出发到每个村庄一次，然后返回商店所在的村，假设商店所在的村庄为 1，他不知道选择什么样的路线才能使所走的路程最短。请你帮他选择一条最短的路。</p><p><strong>输入</strong></p><p id="div-border-left-blue">村庄数n和各村之间的路程（均是整数）。</p><p><strong>输出</strong></p><p id="div-border-left-blue">最短的路径</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">3    {村庄数}<br>0 2 1    {村庄1到各村的路程}<br>1 0 2    {村庄2到各村的路程}<br>2 1 0    {村庄3到各村的路程}</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">3</p><h3 id="题目解读-2"><a href="#题目解读-2" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25</span></span><br><span class="line"><span class="keyword">int</span> INF=<span class="number">12345678</span>;</span><br><span class="line"><span class="keyword">int</span> n,maps[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(d[i][j]&gt;d[i][k]+d[k][j])</span><br><span class="line">                    d[i][j]=d[i][k]+d[k][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> dis,<span class="keyword">int</span> cnt)</span><span class="comment">//x:current position</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span> &amp;&amp; cnt==n)</span><br><span class="line">    &#123;</span><br><span class="line">        INF=min(INF,dis);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>((dis+maps[x][i]+d[i][<span class="number">1</span>]&lt;INF) &amp;&amp; ((vis[i]==<span class="number">0</span>) || (cnt==n<span class="number">-1</span> &amp;&amp; i==<span class="number">1</span>)))</span><br><span class="line">            dfs(i,dis+maps[x][i],cnt+<span class="number">1</span>);</span><br><span class="line">    vis[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;maps[i][j]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                d[i][j]=maps[i][j];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        Floyd();</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跑跑卡丁车"><a href="#跑跑卡丁车" class="headerlink" title="跑跑卡丁车"></a>跑跑卡丁车</h2><p>跑跑卡丁车是时下一款流行的网络休闲游戏，你可以在这虚拟的世界里体验驾驶的乐趣。这款游戏的特别之处是你可以通过漂移来获得一种 加速卡，用这种加速卡可以在有限的时间里提高你的速度。为了使问题简单化，我们假设一个赛道分为L段，并且给你通过每段赛道的普通耗时Ai和用加速卡的耗时Bi。加速卡的获得机制是：普通行驶的情况下，每通过1段赛道,可以获得20%的能量(N2O).能量集满后获得一个加速卡(同时能量清0).加速卡最多可以储存2个,也就是说当你有2个加速卡而能量再次集满,那么能量清零但得不到加速卡。一个加速卡只能维持一段赛道，游戏开始时没有加速卡。问题是，跑完n圈最少用时为多少？</p><p><strong>输入</strong></p><p id="div-border-left-blue">每组输入数据有3行，第一行有2个整数L( 0 &lt; L &lt; 100),N(0 &lt; N &lt; 100)分别表示一圈赛道分为L段和有N圈赛道，接下来两行分别有L个整数Ai和Bi (Ai &gt; Bi).</p><p><strong>输出</strong></p><p id="div-border-left-blue">对于每组输入数据，输出一个整数表示最少的用时.</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">18 1<br>9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9<br>8 8 8 8 8 8 8 8 8 8 8 8 8 8 1 1 8 8</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">145</p><h3 id="题目解读-3"><a href="#题目解读-3" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">10005</span>][<span class="number">15</span>],a[<span class="number">105</span>],b[<span class="number">105</span>],n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n*m; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            a[i]=a[i%n];</span><br><span class="line">            b[i]=b[i%n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n*m; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">15</span>; j++) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> k=j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(k==<span class="number">15</span>) k=<span class="number">10</span>;</span><br><span class="line">                dp[i+<span class="number">1</span>][k]=min(dp[i+<span class="number">1</span>][k],dp[i][j]+a[i]);</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=<span class="number">5</span>) dp[i+<span class="number">1</span>][j<span class="number">-5</span>]=min(dp[i+<span class="number">1</span>][j<span class="number">-5</span>],dp[i][j]+b[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">15</span>; i++) ans=min(ans,dp[n*m][i]);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Renting-Boats"><a href="#Renting-Boats" class="headerlink" title="Renting Boats"></a>Renting Boats</h2><p>长江游艇俱乐部在长江上设置了n 个游艇出租站1，2，…，n。游客可在这些游艇出租站租用游艇，并在下游的任何一个游艇出租站归还游艇。游艇出租站i 到游艇出租站j 之间的租金为r(i,j),1&lt; =i&lt; j &lt; =n。试设计一个算法，计算出从游艇出租站1 到游艇出租站n 所需的最少租金。</p><p><strong>输入</strong></p><p id="div-border-left-blue">第1 行中有1 个正整数n（n&lt;=200），表示有n个游艇出租站。接下来的n-1 行是r(i,j),1&lt; =i&lt; j &lt; =n。</p><p><strong>输出</strong></p><p id="div-border-left-blue">从游艇出租站1 到游艇出租站n所需的最少租金</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">3<br>5 15<br>7</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">12</p><h3 id="题目解读-4"><a href="#题目解读-4" class="headerlink" title="题目解读"></a>题目解读</h3><p>此题可以用<strong>Floyd-Warshall算法</strong>算法解决，Floyd算法是解决两点间的最短路径的一种算法。Floyd算法的原理是动态规划。</p><p><strong>算法思想</strong>:如果存在定点k，使得以k做为中介点时，顶点i和顶点j之间的当前距离缩短，则使用顶点k做为顶点i和顶点j之间的中介点，即当dis[i][k] + dis[k][j] &lt; dis[i][j] 时，令 dis[i][j]=dis[i][k] + dis[k][j] 。</p><p><strong>算法流程</strong>：</p><ul><li>枚举顶点k</li><li>以顶点k做为中介点，枚举所有顶点i和j</li><li>如果dis[i][k] + dis[k][j] &lt; dis[i][j]成立，则 dis[i][j]=dis[i][k] + dis[k][j]</li></ul><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">205</span>][<span class="number">205</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                <span class="keyword">if</span>(dis[i][k]!=<span class="number">0</span> &amp;&amp; dis[k][j]!=<span class="number">0</span> &amp;&amp; dis[i][k]+dis[k][j]&lt;dis[i][j])</span><br><span class="line">                    dis[i][j]=dis[i][k]+dis[k][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;dis[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dis[<span class="number">0</span>][n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jack-Straws"><a href="#Jack-Straws" class="headerlink" title="Jack Straws"></a>Jack Straws</h2><p>n the game of Jack Straws, a number of plastic or wooden “straws” are dumped on the table and players try to remove them one-by-one without disturbing the other straws. Here, we are only concerned with if various pairs of straws are connected by a path of touching straws. You will be given a list of the endpoints for some straws (as if they were dumped on a large piece of graph paper) and then will be asked if various pairs of straws are connected. Note that touching is connecting, but also two straws can be connected indirectly via other connected straws.</p><p><strong>输入</strong></p><p id="div-border-left-blue">A problem consists of multiple lines of input. The first line will be an integer n (1 &lt; n &lt; 13) giving the number of straws on the table. Each of the next n lines contain 4 positive integers, x1 , y1 , x2 and y2 , giving the coordinates, (x1 ; y1 ); (x2 ; y2 ) of the endpoints of a single straw. All coordinates will be less than 100. (Note that the straws will be of varying lengths.) The first straw entered will be known as straw #1, the second as straw #2, and so on. The remaining lines of input (except for the final line) will each contain two positive integers, a and b, both between 1 and n, inclusive. You are to determine if straw a can be connected to straw b. When a = 0 = b, the input is terminated. There will be no illegal input and there are no zero-length straws.</p><p><strong>输出</strong></p><p id="div-border-left-blue">You should generate a line of output for each line containing a pair a and b, except the final line where a = 0 = b. The line should say simply “CONNECTED”, if straw a is connected to straw b, or “NOT CONNECTED”, if straw a is not connected to straw b. For our purposes, a straw is considered connected to itself.</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">7<br>1 6 3 3<br>4 6 4 9<br>4 5 6 7<br>1 4 3 5<br>3 5 5 5<br>5 2 6 3<br>5 4 7 2<br>1 4<br>1 6<br>3 3<br>6 7<br>2 3<br>1 3<br>0 0</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">CONNECTED<br>NOT CONNECTED<br>CONNECTED<br>CONNECTED<br>NOT CONNECTED<br>CONNECTED</p><h3 id="题目解读-5"><a href="#题目解读-5" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">int</span> <span class="built_in">set</span>[<span class="number">20</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> x1,x2,y1,y2;  </span><br><span class="line">    Point(<span class="keyword">int</span> x1 = <span class="number">0</span>, <span class="keyword">int</span> x2 = <span class="number">0</span>, <span class="keyword">int</span> y1 = <span class="number">0</span>, <span class="keyword">int</span> y2 = <span class="number">0</span>) : x1(x1),x2(x2),y1(y1),y2(y2) &#123;&#125;;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;p[<span class="number">20</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">set</span>[i] = i;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> x == <span class="built_in">set</span>[x] ? x : <span class="built_in">set</span>[x] = find(<span class="built_in">set</span>[x]);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cross</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> x1 * y2 - x2 * y1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intersection</span><span class="params">(Point A, Point B)</span> <span class="comment">//判断直线相交  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">4</span>];  </span><br><span class="line">    <span class="keyword">if</span>(max(A.x1,A.x2) &lt; min(B.x1,B.x2) || max(A.y1,A.y2) &lt; min(B.y1,B.y2)  </span><br><span class="line">       || max(B.x1,B.x2) &lt; min(A.x1,A.x2) || max(B.y1,B.y2) &lt; min(A.y1,A.y2) ) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//考虑共线不相交的情况,为快速排斥定理  </span></span><br><span class="line">    <span class="comment">/*判断两条直线是否相交,即只需判断线是否在另一条线的两端*/</span>  </span><br><span class="line">    c[<span class="number">0</span>] = cross(A.x2 - A.x1, A.y2 - A.y1, B.x1 - A.x1, B.y1 - A.y1);  </span><br><span class="line">    c[<span class="number">1</span>] = cross(A.x2 - A.x1, A.y2 - A.y1, B.x2 - A.x1, B.y2 - A.y1);  </span><br><span class="line">    c[<span class="number">2</span>] = cross(B.x2 - B.x1, B.y2 - B.y1, A.x1 - B.x1, A.y1 - B.y1);  </span><br><span class="line">    c[<span class="number">3</span>] = cross(B.x2 - B.x1, B.y2 - B.y1, A.x2 - B.x1, A.y2 - B.y1);  </span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">0</span>] * c[<span class="number">1</span>] &lt;= <span class="number">0</span> &amp;&amp; c[<span class="number">2</span>] * c[<span class="number">3</span>] &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//运用到了向量的叉乘和点乘的知识;  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="comment">//freopen("in.txt","r",stdin);  </span></span><br><span class="line">    <span class="keyword">int</span> n;  </span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) &amp;&amp; n)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  </span><br><span class="line">            p[i].read();  </span><br><span class="line">        unit(n);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span>(intersection(p[i],p[j]))  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">int</span> a = find(i);  </span><br><span class="line">                    <span class="keyword">int</span> b = find(j);  </span><br><span class="line">                    <span class="keyword">if</span>(a != b) <span class="built_in">set</span>[a] = b;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> a,b;  </span><br><span class="line">        <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b), a | b)  </span><br><span class="line">        &#123;  </span><br><span class="line">            a = find(a);  </span><br><span class="line">            b = find(b);  </span><br><span class="line">            <span class="keyword">if</span>(a == b) <span class="built_in">puts</span>(<span class="string">"CONNECTED"</span>);  </span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NOT CONNECTED"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Coin-collecting-by-robot"><a href="#Coin-collecting-by-robot" class="headerlink" title="Coin-collecting by robot"></a>Coin-collecting by robot</h2><p>Several coins are placed in cells of an n×m board. A robot, located in the upper left cell of the board, needs to collect as many of the coins as possible and bring them to the bottom right cell. On each step, the robot can move either one cell to the right or one cell down from its current location.</p><p><strong>输入</strong></p><p id="div-border-left-blue">The fist line is n,m, which 1&lt; = n,m &lt;= 1000.<br>Then, have n row and m col, which has a coin in cell, the cell number is 1, otherwise is 0.</p><p><strong>输出</strong></p><p id="div-border-left-blue">The max number Coin-collecting by robot.</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">5 6<br>0 0 0 0 1 0<br>0 1 0 1 0 0<br>0 0 0 1 0 1<br>0 0 1 0 0 1<br>1 0 0 0 1 0</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">5</p><h3 id="题目解读-6"><a href="#题目解读-6" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>题目大意</strong></p><p>在nxm的方格中有一些硬币，用1代表有硬币，0代表没有硬币。现在让一个机器人来尽可能多的捡硬币，它从左上角出发，每次只能走一步，要么向下走，要么向右走，到右下角时结束。</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>建立dp二维数组，把原始数据存入二维数组中，这时从右下角往左上角依次按行列遍历，重新计算dp[i][j]的值。计算方法就是两种选择二选一，要么向下走，要么向右走：</p><ul><li>选择下方的数：dp[i][j] += dp[i+1][j]</li><li>选择右面的数：dp[i][j] += dp[i][j+1]</li></ul><p>状态方程就是：</p><p>dp[i][j] += max( dp[i+1][j] , dp[i][j+1] )</p><p>最后dp[0][0]就是最大值。</p><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a&gt;b)?a:b)</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1000</span>][<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=m<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] += max(dp[i+<span class="number">1</span>][j],dp[i][j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\r\n"</span>,dp[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Coin-row-problem"><a href="#Coin-row-problem" class="headerlink" title="Coin-row problem"></a>Coin-row problem</h2><p>There is a row of n coins whose values are some positive integers c₁, c₂,…,cn, not necessarily distinct. The goal is to pick up the maximum amount of money subject to the constraint that no two coins adjacent in the initial row can be picked up.</p><p><strong>输入</strong></p><p id="div-border-left-blue">Two lines, the first line is n (0&lt; n &lt;=10000), and the second line is value of coin(0&lt; value &lt;= 2^32).</p><p><strong>输出</strong></p><p id="div-border-left-blue">the maximum amount of money.</p><p><strong>样例输入</strong></p><p id="div-border-left-blue">6<br>5 1 2 10 6 2</p><p><strong>样例输出</strong></p><p id="div-border-left-blue">17</p><h3 id="题目解读-7"><a href="#题目解读-7" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>题目大意</strong></p><p>有一串数字，现在需要取出一些数组，取数规则就是不能选两个相邻的数。现在需要计算在这种规则下，能取到的数字之和最大是多少。</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">num</td><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">2</td></tr></tbody></table><p>dp(i)代表选择到第i个硬币时，能得到的金额数。</p><p>以dp(5)为例，此时有两种选择：</p><ul><li>选5号（那就不能选4号）：dp(3)+num(5)</li><li>不选5号（就可以选4号）：dp(4)</li></ul><p>这样就可以推导出状态方程：</p><p>dp(i) = max( dp(i-2)+num[i] , dp(i-1) )</p><p>dp(0) = num[0]</p><p>dp(1) = max( num[0] , num[1] )</p><p>这样就可以敲代码了，如果使用递归的方法，会产生很多重叠子问题，运算速度慢，效率为O(n^2)。所以不使用递归方法，而是建立一个dp数组，然后循环填表，一次把dp[0],dp[1],dp[2]……的值计算出来，最后最优解即是dp[n-1]。</p><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a&gt;b)?a:b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10000</span>],dp[<span class="number">10000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n,i;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=num[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">1</span>]=max(num[<span class="number">0</span>],num[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i]=max(dp[i<span class="number">-2</span>]+num[i],dp[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\r\n"</span>,dp[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习之sklearn</title>
      <link href="/2018/04/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bsklearn/"/>
      <url>/2018/04/28/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bsklearn/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/01/5ae85bbc1a959.png" width="600" height="300" alt="git" align="center"> </p><p>Scikit learn 也简称 sklearn, 是机器学习领域当中最知名的 python 模块之一。</p><a id="more"></a><h1 id="Scikit-learn模块"><a href="#Scikit-learn模块" class="headerlink" title="Scikit learn模块"></a>Scikit learn模块</h1><p>Scikit learn 也简称 sklearn, 是机器学习领域当中最知名的 python 模块之一。</p><p>Sklearn 包含了很多种机器学习的方式:</p><ul><li>Classification 分类（监督学习）</li><li>Regression 线性回归（监督学习）</li><li>Clustering 非监督分类</li><li>Dimensionality reduction 数据降维</li><li>Model Selection 模型选择</li><li>Preprocessing 数据预处理</li></ul><p><strong>在股票、房价预测中可以使用线性回归。</strong></p><p><img src="https://i.loli.net/2018/05/01/5ae85bbc1a959.png" alt="sklearn的流程图"></p><p>其中蓝色圆圈内是判断条件，绿色方框内是可以选择的算法</p><h1 id="sklearn-的使用"><a href="#sklearn-的使用" class="headerlink" title="sklearn 的使用"></a>sklearn 的使用</h1><h2 id="正则化输入"><a href="#正则化输入" class="headerlink" title="正则化输入"></a>正则化输入</h2><p><strong>正则化含义解释</strong> ：</p><p>如果输入特征属于不同范围内，可能有些特征值从0到1，有些特征值从1到1000，那么归一化（normalize）特征值就非常重要了。</p><p>具体参考吴恩达课程<a href="http://mooc.study.163.com/learn/2001281003?tid=2001391036#/learn/content?type=detail&amp;id=2001701046" target="_blank" rel="noopener">http://mooc.study.163.com/learn/2001281003?tid=2001391036#/learn/content?type=detail&amp;id=2001701046</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将收盘数据正则化，全部化为-1到1之间的数</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing <span class="comment">#标准化数据模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">()</span>:</span></span><br><span class="line">data = pd.read_csv(<span class="string">"new_day_close.csv"</span>)</span><br><span class="line">data = data.iloc[:,<span class="number">1</span>:]</span><br><span class="line">normalized = preprocessing.scale(data)</span><br><span class="line">print(normalized)</span><br></pre></td></tr></table></figure><h2 id="SVR——Support-Vector-Regression"><a href="#SVR——Support-Vector-Regression" class="headerlink" title="SVR——Support Vector Regression"></a>SVR——Support Vector Regression</h2><h2 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h2><h3 id="K-CV方法"><a href="#K-CV方法" class="headerlink" title="K-CV方法"></a>K-CV方法</h3><p>将原始数据分成K组(一般是均分),将每个子集数据分别做一次验证集,其余的K-1组子集数据作为训练集,这样会得到K个模型,用这K个模型最终的验证集的分类准确率的平均数作为此K-CV下分类器的性能指标.K一般大于等于2,实际操作时一般从3开始取,只有在原始数据集合数据量小的时候才会尝试取2.K-CV可以有效的避免过学习以及欠学习状态的发生,最后得到的结果也比较具有说服性。</p>]]></content>
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> sklearn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法分析实验二</title>
      <link href="/2018/04/23/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
      <url>/2018/04/23/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/21/5b02124a8dd5f.jpg" width="600" height="300" alt="git" align="center"></p><p>SWUST OJ 算法分析A（卓越软件1601）实验二</p><a id="more"></a><h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1><h2 id="凸包面积"><a href="#凸包面积" class="headerlink" title="凸包面积"></a>凸包面积</h2><p>麦兜是个淘气的孩子。一天，他在玩钢笔的时候把墨水洒在了白色的墙上。再过一会，麦兜妈就要回来了，麦兜为了不让妈妈知道这件事情，就想用一个白色的凸多边形把墙上的墨点盖住。你能告诉麦兜最小需要面积多大的凸多边形才能把这些墨点盖住吗？ 现在，给出了这些墨点的坐标，请帮助麦兜计算出覆盖这些墨点的最小凸多边形的面积。</p><p><strong>输入</strong></p><blockquote><p>多组测试数据。第一行是一个整数T，表明一共有T组测试数据。每组测试数据的第一行是一个正整数N(0&lt; N &lt; = 105)，表明了墨点的数量。接下来的N行每行包含了两个整数Xi和Yi（0&lt;=Xi,Yi&lt;=2000），表示每个墨点的坐标。每行的坐标间可能包含多个空格。</p></blockquote><p><strong>输出</strong></p><blockquote><p>每行输出一组测试数据的结果，只需输出最小凸多边形的面积。面积是个实数，小数点后面保留一位即可，不需要多余的空格。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>2</p><p>4</p><p>0 0</p><p>1 0</p><p>0 1</p><p>1 1</p><p>2</p><p>0 0</p><p>0 1</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>1.0</p><p>0.0</p></blockquote><h3 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y; </span><br><span class="line">&#125;data[<span class="number">110</span>],point[<span class="number">110</span>],basic;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">direction</span><span class="params">(node pi,node pj,node pk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pj.x-pi.x)*(pk.y-pi.y)-(pj.y-pi.y)*(pk.x-pi.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node pj,node pk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=direction(basic,pj,pk);</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span>(dis(basic,pj)&gt;dis(basic,pk));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> k&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n; <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;data[i].x&gt;&gt;data[i].y;</span><br><span class="line">            <span class="keyword">if</span>(data[i].y&lt;data[flag].y||(data[i].y==data[flag].y&amp;&amp;data[i].x&lt;data[flag].x))</span><br><span class="line">            flag=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0.0\n"</span>; <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node zz=data[<span class="number">0</span>]; data[<span class="number">0</span>]=data[flag]; data[flag]=zz;</span><br><span class="line">        basic=data[<span class="number">0</span>];</span><br><span class="line">        sort(data+<span class="number">1</span>,data+n,cmp);</span><br><span class="line">        <span class="keyword">int</span> top=<span class="number">0</span>;</span><br><span class="line">        point[top++]=data[<span class="number">0</span>];</span><br><span class="line">        point[top++]=data[<span class="number">1</span>];</span><br><span class="line">        point[top++]=data[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(direction(point[top<span class="number">-2</span>],point[top<span class="number">-1</span>],data[i])&lt;<span class="number">0</span>)</span><br><span class="line">            top--;</span><br><span class="line">            point[top++]=data[i]; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;top<span class="number">-1</span>;i++)</span><br><span class="line">        sum+=<span class="built_in">abs</span>(direction(point[<span class="number">0</span>],point[i],point[i+<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>,sum/<span class="number">2</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变位词"><a href="#变位词" class="headerlink" title="变位词"></a>变位词</h2><p>如果两个单词的组成字母完全相同，只是字母的排列顺序不一样，则它们就是变位词，两个单词相同也被认为是变位词。如tea 与eat , nic 与cin, ddc与dcd, abc与abc 等。你的任务就是判断它们是否是变位词。</p><p><strong>输入</strong></p><blockquote><p>第一行一个N,表示下面有N行测试数据。每行测试数据包括两个单词，如tea eat ,它们之间用空格割开</p></blockquote><p><strong>输出</strong></p><blockquote><p>对于每个测试数据，如果它们是变位词，输出Yes,否则输出No.</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>3</p><p>tea eat</p><p>ddc cdd</p><p>dee dde</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>Yes</p><p>Yes</p><p>No</p></blockquote><h3 id="题目解读-1"><a href="#题目解读-1" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>策略</strong></p><p>对于两个给定字符串，先预排序，排序之后比较是否完全一样，如果完全一样就是变位词，否则不是变位词。</p><p><strong>代码</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">105</span>],b[<span class="number">105</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> len1=<span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">int</span> len2=<span class="built_in">strlen</span>(b);</span><br><span class="line">sort(a,a+len1);</span><br><span class="line">sort(b,b+len2);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(a,b)==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><p>Quicksort is a well-known sorting algorithm developed by C. A. R. Hoare that, on average, makes Θ(n log n) comparisons to sort n items. However, in the worst case, it makes Θ(n2) comparisons. Typically, quicksort is significantly faster in practice than other Θ(n log n) algorithms, because its inner loop can be efficiently implemented on most architectures, and in most real-world data it is possible to make design choices which minimize the possibility of requiring quadratic time. Quicksort sorts by employing a divide and conquer strategy to divide a list into two sub-lists. The steps are: 1. Pick an element, called a pivot, from the list. 2. Reorder the list so that all elements which are less than the pivot come before the pivot and so that all elements greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation. 3. Recursively sort the sub-list of lesser elements and the sub-list of greater elements. The base case of the recursion are lists of size zero or one, which are always sorted. The algorithm always terminates because it puts at least one element in its final place on each iteration (the loop invariant). Quicksort in action on a list of random numbers. The horizontal lines are pivot values. Write a program to sort ascending int number by QuickSort ,n less than 50000.</p><p><strong>输入</strong></p><blockquote><p>two lows, the first low is numbers , less and equal than 50000. the second low is a set integer numbers</p></blockquote><p><strong>输出</strong></p><blockquote><p>a set integer numbers of sort ascending</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10</p><p>4 2 1 5 7 6 9 8 0 3</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>0 1 2 3 4 5 6 7 8 9</p></blockquote><h3 id="题目解读-2"><a href="#题目解读-2" class="headerlink" title="题目解读"></a>题目解读</h3><p>快排算法</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50005</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PostOffice"><a href="#PostOffice" class="headerlink" title="PostOffice"></a>PostOffice</h2><p>在一个按照东西和南北方向划分成规整街区的城市里，n个居民点散乱地分布在不同的街区中。用x 坐标表示东西向，用y坐标表示南北向。各居民点的位置可以由坐标(x,y)表示。 　　</p><p>街区中任意2 点(x1,y1)和(x2,y2)之间的距离可以用数值|x1-x2|+|y1-y2|度量。 居民们希望在城市中选择建立邮局的最佳位置，使n个居民点到邮局的距离总和最小。 　　</p><p>任务：给定n 个居民点的位置,编程计算n 个居民点到邮局的距离总和的最小值。</p><p><strong>输入</strong></p><blockquote><p>第1 行是居民点数n，1 &lt; = n &lt; =10000。接下来n 行是居民点的位置，每行2 个整数x 和y，-10000 &lt; =x，y &lt; =10000。</p></blockquote><p><strong>输出</strong></p><blockquote><p>n 个居民点到邮局的距离总和的最小值。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5</p><p>1 2</p><p>2 2</p><p>1 3</p><p>3 -2</p><p>3 3</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>10</p></blockquote><h3 id="题目解读-3"><a href="#题目解读-3" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>策略</strong></p><p>蛮力法。循环比较每两个点之间的距离。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,midx,midy;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">10005</span>],y[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">sort(x,x+n);</span><br><span class="line">sort(y,y+n);</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">midx=(x[n/<span class="number">2</span>]+x[n/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2</span>;</span><br><span class="line">midy=(y[n/<span class="number">2</span>]+y[n/<span class="number">2</span><span class="number">-1</span>])/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">midx=x[n/<span class="number">2</span>];</span><br><span class="line">midy=y[n/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> dis=<span class="built_in">abs</span>(x[i]-midx)+<span class="built_in">abs</span>(y[i]-midy);</span><br><span class="line">sum+=dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="俄式乘法"><a href="#俄式乘法" class="headerlink" title="俄式乘法"></a>俄式乘法</h2><p>俄式乘法，又被称为俄国农夫法，它是对两个正整数相乘的非主流算法。假设m和n是两个正整数，我们要计算它们的积。它的主要原理如下： if n is 偶数 n <em> m=n/2 </em> 2m else n <em> m=(n-1)/2 </em> 2m + m 该算法只包括折半，加倍，相加等几个简单操作，因此实现速度非常快。</p><p><strong>输入</strong></p><blockquote><p>两个正整数 n,m。</p></blockquote><p><strong>输出</strong></p><blockquote><p>n和m的乘积。</p><p>输出整个求和表达式，运算符与数字之间用一个空格隔开。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>50 65</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>130 + 1040 + 2080 = 3250</p></blockquote><h3 id="题目解读-4"><a href="#题目解读-4" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,i,k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">n=n/<span class="number">2</span>;</span><br><span class="line">m=m*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">n=(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">m=<span class="number">2</span>*m;</span><br><span class="line">a[k]=m/<span class="number">2</span>;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" + "</span>);</span><br><span class="line">sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" = "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum+m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最近对问题"><a href="#最近对问题" class="headerlink" title="最近对问题"></a>最近对问题</h2><p>设p1=(x1, y1), p2=(x2, y2), …, pn=(xn, yn)是平面上n个点构成的集合S，设计算法找出集合S中距离最近的点对。</p><p><strong>输入</strong></p><blockquote><p>多组测试数据，第一行为测试数据组数n（0&lt;n≤100），每组测试数据由两个部分构成，第一部分为一个点的个数m（0&lt;m≤1000），紧接着是m行，每行为一个点的坐标x和y，用空格隔开，（0&lt;x，y≤100000）</p></blockquote><p><strong>输出</strong></p><blockquote><p>每组测试数据输出一行，为该组数据最近点的距离，保留4为小数。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>2</p><p>2</p><p>0 0</p><p>0 1</p><p>3</p><p>0 0</p><p>1 1</p><p>1 0</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>1.0000</p><p>1.0000</p></blockquote><h3 id="题目解读-5"><a href="#题目解读-5" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>策略</strong></p><p>蛮力法。循环比较。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m,i,j,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">1005</span>],y[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;m;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x[k],&amp;y[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> min=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> a=(x[j]-x[i])*(x[j]-x[i]);</span><br><span class="line"><span class="keyword">double</span> b=(y[j]-y[i])*(y[j]-y[i]);</span><br><span class="line"><span class="keyword">double</span> dis=<span class="built_in">sqrt</span>(a+b);</span><br><span class="line"><span class="keyword">if</span>(dis&lt;min)</span><br><span class="line">min=dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="约瑟夫问题的实现"><a href="#约瑟夫问题的实现" class="headerlink" title="约瑟夫问题的实现"></a>约瑟夫问题的实现</h2><p>n个人围成一个圈，每个人分别标注为1、2、…、n，要求从1号从1开始报数，报到k的人出圈，接着下一个人又从1开始报数，如此循环，直到只剩最后一个人时，该人即为胜利者。例如当n=10,k=4时，依次出列的人分别为4、8、2、7、3、10，9、1、6、5，则5号位置的人为胜利者。给定n个人，请你编程计算出最后胜利者标号数。（要求用单循环链表完成。）</p><p><strong>输入</strong></p><blockquote><p>第一行为人数n;</p><p>第二行为报数k。</p></blockquote><p><strong>输出</strong></p><blockquote><p>输出最后胜利者的标号数。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10 4</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>5</p></blockquote><h3 id="题目解读-6"><a href="#题目解读-6" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">josephus</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=(sum+m)%i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">int</span> ans=josephus(n,k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法分析实验一</title>
      <link href="/2018/04/22/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>/2018/04/22/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/21/5b02124a8dd5f.jpg" width="600" height="300" alt="git" align="center"></p><p>SWUST OJ  算法分析A（卓越软件1601）实验一</p><a id="more"></a><h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1><h2 id="Euclid’s-Game"><a href="#Euclid’s-Game" class="headerlink" title="Euclid’s Game"></a>Euclid’s Game</h2><p>Starts with two unequal positive numbers (M,N and M&gt;N) on the board. Two players move in turn. On each move, a player has to write on the board a positive number equal to the difference of two numbers already on the board; this number must be new, i.e., different from all the numbers already on the board. The player who cannot move loses the game. Should you choose to move first or second in this game? </p><p>According to the above rules, there are two players play tihs game. Assumptions A write a number on the board at first, then B write it. </p><p>Your task is write a program to judge the winner is A or B.</p><p><strong>输入</strong></p><blockquote><p>Two unequal positive numbers M and N , M&gt;N (M&lt;1000000)</p></blockquote><p><strong>输出</strong></p><blockquote><p>A or B</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>3  1</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>A</p></blockquote><h3 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>翻译</strong></p><p>黑板上已经有两个正数M和N（M&gt;N），两个人轮流在黑板上写数组，要求写上的数字必须是黑板上已有数字只差，而且不能重复写已经在黑板上的数字，最后一个不能写数字的人就输了。请问赢家应该先写还是后写？</p><p><strong>策略</strong></p><p>如果开始时，两个数字不是倍数关系，那么从M到1所有的数都可以出现，也就是黑板上总共可以出现M个数，减掉原先写在黑板上的两个数，就可以写 <strong>M-2</strong> 个数；</p><p>如果开始时，两个数字是整数倍关系，那么只能出现[M-1N , M-2N, M-3N…]这些数，也就是黑板上总共可以出现M/N个数，减掉原来写在黑板上的两个数，就可以写 <strong>M/N-2</strong> 个数。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,sum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(a%b==<span class="number">0</span>)</span><br><span class="line">sum=a/b<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum=a<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"B\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"A\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="翻煎饼"><a href="#翻煎饼" class="headerlink" title="翻煎饼"></a>翻煎饼</h2><p>麦兜最喜欢的食物是煎饼，每次在街上看到煎饼摊的时候都会在那里停留几分钟。最吸引麦兜还是煎饼师傅那一手熟练的翻煎饼的技术，一堆煎饼在那里，师傅只需要用铲子翻几下，就让煎饼整齐的叠在了一起。 这天，为了庆祝麦兜被保送上研究生，他从煎饼师傅那里买回来一些煎饼请客。但是麦兜买回的煎饼大小不一，麦兜太想吃煎饼了，他想吃这些煎饼中最大的那个。麦兜还知道同学们也很喜欢煎饼，为了表示他的诚意，他想让同学们先吃，麦兜最后吃，因此，麦兜想把煎饼按照从小到大的顺序叠放在一起，大的在最下面。这样麦兜就可以在最后拿到最大的那一块煎饼了。 现在请你帮助麦兜用煎饼师傅翻煎饼的方法把麦兜买的煎饼从小到大的叠在一起。煎饼师傅的方法是用铲子插入两块煎饼之间，然后将铲子上的煎饼翻一转，这样铲子上第一个煎饼就被翻到了顶上，而原来顶上的煎饼则被翻到了刚才插入铲子的地方。麦兜希望这样翻煎饼的次数最少。</p><p><strong>输入</strong></p><blockquote><p>输入包括两行，第一行是一个整数n(1&lt;=n&lt;=1000)，表示煎饼的个数，接下来的一行有n个不相同的整数，整数间用空格隔开，每个整数表示煎饼的大小（直径），左边表示顶部，右边表示底部。</p></blockquote><p><strong>输出</strong></p><blockquote><p>输出为一行，翻煎饼的最少次数</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5</p><p>5 4 2 3 1</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>4</p></blockquote><h3 id="题目解读-1"><a href="#题目解读-1" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>策略</strong> </p><p>每次先找最大的，然后把最大的翻到上面，再整体翻一次，最大的就到最下面了。</p><p>一个函数找数组中最大数对应的角标；</p><p>一个函数实现翻煎饼（把num[a]到num[b]逆序排列）；</p><p>一个递归函数反复找最大值和实现翻煎饼的过程。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> times=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=a,j=b;i&lt;j;i++,j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t=num[i];</span><br><span class="line">num[i]=num[j];</span><br><span class="line">num[j]=t;</span><br><span class="line">&#125;</span><br><span class="line">times++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindMax</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,max=a;</span><br><span class="line"><span class="keyword">for</span>(i=a;i&lt;=b;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[i]&gt;num[max])</span><br><span class="line">max=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> maxn=FindMax(<span class="number">0</span>,n);</span><br><span class="line"><span class="keyword">if</span>(maxn!=<span class="number">0</span> &amp;&amp; maxn!=n)</span><br><span class="line">&#123;</span><br><span class="line">turn(<span class="number">0</span>,maxn);</span><br><span class="line">turn(<span class="number">0</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxn==<span class="number">0</span>)</span><br><span class="line">turn(<span class="number">0</span>,n);</span><br><span class="line">change(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line">change(n<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,times);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Locker-doors"><a href="#Locker-doors" class="headerlink" title="Locker doors"></a>Locker doors</h2><p>There are n lockers in a hallway numbered sequentially from 1 to n. Initially, all the locker doors are closed. You make n passes by the lockers, each time starting with locker #1. On the ith pass, i = 1, 2, …, n, you toggle the door of every ith locker: if the door is closed, you open it, if it is open, you close it. For example, after the first pass every door is open; on the second pass you only toggle the even-numbered lockers (#2, #4, …) so that after the second pass the even doors are closed and the odd ones are opened; the third time through you close the door of locker #3 (opened from the first pass), open the door of locker #6 (closed from the second pass), and so on. After the last pass, which locker doors are open and which are closed? How many of them are open? Your task is write a program to output How many doors are open after the last pass? Assumptions all doors are closed at first.</p><p><strong>输入</strong></p><blockquote><p>a positive numbers n, total doors. n&lt;=100000</p></blockquote><p><strong>输出</strong></p><blockquote><p>a positive numbers ，the total of doors opened after the last pass.</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>3</p></blockquote><h3 id="题目解读-2"><a href="#题目解读-2" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>翻译</strong></p><p>假设走廊上有n把锁，标号为0~n，全部都是锁上的，现在你经过走廊n次，第一次把1的倍数（1,2,3…）的锁打开，第二次把2的倍数（2,4,6…）的锁打开，如果已经打开了就关上，第三次对3的倍数的锁进行类似的操作。请问最后有几把锁是开着的？</p><p><strong>策略</strong></p><p>直白的来看，就是从1到n，求每个数的公因数的个数（比如数字6，有1,2,3,6四个公因数，经过4次操作后就是关闭的状态），但是如果循环求n次公因数的个数，就会超时……</p><p>换个角度想一想，什么样的数会有奇数个公因子呢？只有遇到1x1, 2x2, 3x3，…  才会出现奇数个公因子，所以只需要求$\sqrt{n}$的整数部分就可以啦！</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> sum=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-Josephus-Problem"><a href="#The-Josephus-Problem" class="headerlink" title="The Josephus Problem"></a>The Josephus Problem</h2><p>The problem is named after Flavius Josephus, a Jewish historian who participated in and chronicled the Jewish revolt of 66-70C.E. against the Romans. Josephus, as a general, managed to hold the fortress of Jotapata for 47days, but after the fall of the city he took refuge with 40 diehards in a nearby cave. There the rebels voted to perish rather than surrender. Josephus proposed that each man in turn should dispatch his neighbor, the order to be determined by casting lots. Josephus contrived to draw the last lot, and as one of the two surviving men in the cave, he prevailed upon his intended victim to surrender to the Romans. Your task:computint the position of the survivor when there are initially n people.</p><p><strong>输入</strong></p><blockquote><p>a Positive Integer n is initially people. n&lt; = 50000</p></blockquote><p><strong>输出</strong></p><blockquote><p>the position of the survivor</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>6</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>5</p></blockquote><h3 id="题目解读-3"><a href="#题目解读-3" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>翻译</strong></p><p>n个人围成一圈报数，报到2的人就会死掉，然后下一个人再接着从1开始报数，直到最后剩下一个人活着，请问最开始应该在几号位才能活到最后？</p><p><strong>策略</strong></p><p>一种方法就是模拟，定义一个数组，从1到n全部置为1，对应编号的人死掉就置为0，用另一个数组表示当前报数的数字，等于2时，就从头再来。</p><p>还有一种公式法，循环取模。</p><p><strong>代码</strong></p><p><strong>模拟法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,t=<span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50005</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span>(t&gt;n)</span><br><span class="line">t=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[t]==<span class="number">0</span>)</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">count++;</span><br><span class="line">a[t]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count==n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>公式法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">josephus</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=(sum+m)%i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> ans=josephus(n,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h2><p>A binary search algorithm (or binary chop) is a technique for finding a particular value in a sorted list. It makes progressively better guesses, and closes in on the sought value, by comparing an element halfway with what has been determined to be an element too low in the list and one too high in the list. A binary search finds the median element in a list, compares its value to the one you are searching for, and determines if it’s greater than, less than, or equal to the one you want. A guess that turns out to be too high becomes the new top of the list, and one too low the new bottom of the list. The binary search’s next guess is halfway between the new list’s top and bottom. Pursuing this strategy iteratively, it narrows the search by a factor 2 each time, and finds your value. A binary search is an example of a divide and conquer algorithm (more specifically a decrease and conquer algorithm) and a dichotomic search (more at Search algorithm). The most common application of binary search is to find a specific value in a sorted list. To cast this in the frame of the guessing game (see Example below), realize that we are now guessing the index, or numbered place, of the value in the list. This is useful because, given the index, other data structures will contain associated information. Suppose a data structure containing the classic collection of name, address, telephone number and so forth has been accumulated, and an array is prepared containing the names, numbered from one to N. A query might be: what is the telephone number for a given name X. To answer this the array would be searched and the index (if any) corresponding to that name determined, whereupon it would be used to report the associated telephone number and so forth. Appropriate provision must be made for the name not being in the list (typically by returning an index value of zero), indeed the question of interest might be only whether X is in the list or not. If the list of names is in sorted order, a binary search will find a given name with far fewer probes than the simple procedure of probing each name in the list, one after the other in a linear search, and the procedure is much simpler than organising a hash table though that would be faster still, typically averaging just over one probe. This applies for a uniform distribution of search items but if it is known that some few items are much more likely to be sought for than the majority then a linear search with the list ordered so that the most popular items are first may do better. The binary search begins by comparing the sought value X to the value in the middle of the list; because the values are sorted, it is clear whether the sought value would belong before or after that middle value, and the search then continues through the correct half in the same way. Only the sign of the difference is inspected: there is no attempt at an interpolation search based on the size of the differences. Your task is to write a program that, given a set numbers of ascending and a key, finding a particular postion in a sorted list.</p><p><strong>输入</strong></p><blockquote><p>The input contains one total numbers（N&lt;=5000000） and a find key,followed by a line containing the integer numbers ascending sets. </p></blockquote><p><strong>输出</strong></p><blockquote><p>if find the key in the sorted list, output containing postion in a sorted list, else ouput -1.</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10 7</p><p>0 1 2 3 4 5 6 7 8 9</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>8</p></blockquote><h3 id="题目解读-4"><a href="#题目解读-4" class="headerlink" title="题目解读"></a>题目解读</h3><p><strong>翻译</strong></p><p>二分搜索（折半查找）：是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p><p><strong>特别注意</strong></p><p>数组要开到5000005，写在函数外面，用iostream，c++提交。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">5000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> first=<span class="number">0</span>,last=n,mid;</span><br><span class="line"><span class="keyword">while</span>(first&lt;=last)</span><br><span class="line">&#123;</span><br><span class="line">mid=(first+last)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(num[mid]&gt;key)</span><br><span class="line">last=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[mid]&lt;key)</span><br><span class="line">first=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num[mid]==key)</span><br><span class="line"><span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i,key;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;key);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=binary(n<span class="number">-1</span>,key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TF在MNIST中的应用</title>
      <link href="/2018/04/18/TF%E5%9C%A8MNIST%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2018/04/18/TF%E5%9C%A8MNIST%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="TensorFlow在MNIST中的应用"><a href="#TensorFlow在MNIST中的应用" class="headerlink" title="TensorFlow在MNIST中的应用"></a>TensorFlow在MNIST中的应用</h1><h2 id="MNIST数据集简介"><a href="#MNIST数据集简介" class="headerlink" title="MNIST数据集简介"></a>MNIST数据集简介</h2><h2 id="常用的函数API-r1-5"><a href="#常用的函数API-r1-5" class="headerlink" title="常用的函数API r1.5"></a>常用的函数API r1.5</h2><p>tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=prediction, labels=y))<br>tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)<br>tf.layers.conv2d(x_image, 32, 5, 1, ‘same’, activation=tf.nn.relu)<br>tf.layers.max_pooling2d(conv1, 2, 2)<br>tf.layers.dense(flat,10)<br>tf.layers.dropout(output)</p>]]></content>
      
      
    </entry>
    
  
  
</search>
